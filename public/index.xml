<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course materials | Data Analytics</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Course materials</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <image>
      <url>/img/social-image.png</url>
      <title>Course materials</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Introduction to R and the tidyverse</title>
      <link>/lab/01-exercise/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/lab/01-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-make-an-rstudio-project&#34;&gt;Task 1: Make an RStudio Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-make-an-r-markdown-file-with-a-plot-in-it&#34;&gt;Task 2: Make an R Markdown file with a plot in it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;task-1-make-an-rstudio-project&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Make an RStudio Project&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Use either RStudio.cloud or RStudio on your computer (preferably RStudio on your computer! &lt;a href=&#34;/resource/install/&#34;&gt;Follow these instructions to get started!&lt;/a&gt;) to create a new RStudio Project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a folder named ‚Äúdata‚Äù in the project folder you just made.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download this CSV file and place it in that folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/cars.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;cars.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In RStudio, go to ‚ÄúFile‚Äù &amp;gt; ‚ÄúNew File‚Ä¶‚Äù &amp;gt; ‚ÄúR Markdown‚Ä¶‚Äù and click ‚ÄúOK‚Äù in the dialog without changing anything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delete all the placeholder text in that new file and replace it with this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;---
title: &amp;quot;Exercise 1&amp;quot;
author: &amp;quot;Put your name here&amp;quot;
output: html_document
---

# Reflection

Replace this text with your reflection


# My first plot

```{r load-libraries-data, warning=FALSE, message=FALSE}
library(tidyverse)

cars &amp;lt;- read_csv(&amp;quot;data/cars.csv&amp;quot;)
```

Replace this line with a code chunk and use it to create a plot.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the R Markdown file with some sort of name (&lt;strong&gt;without any spaces!&lt;/strong&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your project folder should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/project-structure.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-make-an-r-markdown-file-with-a-plot-in-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Make an R Markdown file with a plot in it&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Add your reading reflection to the appropriate place in the R Markdown file. You can type directly in RStudio if you want (though there‚Äôs no spell checker), or you can type it in Word or Google Docs and then paste it into RStudio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the text that says ‚ÄúReplace this line with a code chunk‚Äù and insert a new R code chunk. Either type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS, or use the ‚ÄúInsert Chunk‚Äù menu:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;ggplot()&lt;/code&gt; to create a scatterplot using the &lt;code&gt;mpg&lt;/code&gt; dataset. Use whatever variables you want. Type the code to create the plot in the new empty chunk.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knit your document as a Word file (or PDF if you‚Äôre brave and &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed LaTeX&lt;/a&gt;). Use the ‚ÄúKnit‚Äù menu:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upload the knitted document to iCollege.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;üéâ Party! üéâ&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;You‚Äôll be doing this same process for all your future exercises. Each exercise will involve an R Markdown file. You can either create a new RStudio Project directory for all your work:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reference/rproj-one-folder.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or you can create individual projects for each assignment and mini-project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reference/rproj-multiple-folders.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mini project 2</title>
      <link>/lab/02-mini-project/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/02-mini-project/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-cleaning-code&#34;&gt;Data cleaning code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-to-possibly-use-in-your-plot&#34;&gt;Data to possibly use in your plot&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#country-totals-over-time&#34;&gt;Country totals over time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cumulative-country-totals-over-time&#34;&gt;Cumulative country totals over time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continent-totals-over-time&#34;&gt;Continent totals over time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cumulative-continent-totals-over-time&#34;&gt;Cumulative continent totals over time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualization-ideas&#34;&gt;Visualization ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The United States has resettled more than 600,000 refugees from 60 different countries since 2006.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/refugees_welcome.jpg&#34; width=&#34;70%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this mini project, you will use &lt;strong&gt;R, ggplot, and &lt;a href=&#34;https://www.adobe.com/products/illustrator.html&#34;&gt;Illustrator&lt;/a&gt;, &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt;, or &lt;a href=&#34;https://www.designer.io/&#34;&gt;Gravit Designer&lt;/a&gt;&lt;/strong&gt; to explore where these refugees have come from.&lt;/p&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here‚Äôs what you need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; a new RStudio project and place it on your computer somewhere. Open that new folder in Windows File Explorer or macOS Finder (however you navigate around the files on your computer), and create two subfolders there named &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; the Department of Homeland Security‚Äôs annual count of people granted refugee status between 2006-2015:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/data/refugee_status.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; DHS refugees, 2006-2015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Place this in the &lt;code&gt;data&lt;/code&gt; subfolder you created in step 1. You might need to right click on this link and choose ‚ÄúSave link as‚Ä¶‚Äù, since your browser may try to display it as text. This data was originally &lt;a href=&#34;https://www.kaggle.com/dhs/refugee-report&#34;&gt;uploaded by the Department of Homeland Security to Kaggle&lt;/a&gt;, and is provided with a public domain license.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; a new R Markdown file and save it in your project. In RStudio go to File &amp;gt; New File &amp;gt; R Markdown‚Ä¶, choose the default options, and delete all the placeholder text in the new file except for the metadata at the top, which is between &lt;code&gt;---&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify&lt;/strong&gt; that your project folder is structured like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name/
  your-analysis.Rmd
  your-project-name.Rproj
  data/
    refugee_status.csv
  output/
    NOTHING&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clean&lt;/strong&gt; the data using the code I‚Äôve given you below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Summarize&lt;/strong&gt; the data somehow. There is data for 60 countries over 10 years, so you‚Äôll probably need to aggregate or reshape the data somehow (unless you do a 60-country sparkline). I‚Äôve included some examples down below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; an appropriate time-based visualization based on the data. I‚Äôve shown a few different ways to summarize the data so that it‚Äôs plottable down below. Don‚Äôt just calculate overall averages or totals per country‚Äîthe visualization needs to deal with change over time. &lt;em&gt;Do as much polishing and refining in R&lt;/em&gt;‚Äîmake adjustments to the colors, scales, labels, grid lines, and even fonts, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; the figure as a PDF. Use &lt;code&gt;ggsave(plot_name, filename = &#34;output/blah.pdf&#34;, width = XX, height = XX)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Refine and polish&lt;/strong&gt; the saved PDF in &lt;a href=&#34;https://www.adobe.com/products/illustrator.html&#34;&gt;Illustrator&lt;/a&gt; or &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt; or &lt;a href=&#34;https://www.designer.io/&#34;&gt;Gravit Designer&lt;/a&gt;, adding annotations, changing colors, and otherwise enhancing it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export&lt;/strong&gt; the polished image as a PDF and a PNG file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; a memo (no word limit) explaining your process. I‚Äôm specifically looking for the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What story are you telling with your graphic?&lt;/li&gt;
&lt;li&gt;How did you apply the principles of CRAP?&lt;/li&gt;
&lt;li&gt;How did you apply Kieran Healy‚Äôs principles of great visualizations or Alberto Cairo‚Äôs five qualities of great visualizations?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Upload&lt;/strong&gt; the following outputs to iCollege:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A PDF or Word file of your memo with your final code, intermediate graphic (the one you create in R), and final graphic (the one you enhance) in it. Remember to use &lt;code&gt;![Caption](path/to/figure/here)&lt;/code&gt; to place external images in Markdown.&lt;/li&gt;
&lt;li&gt;A standalone PNG version of your graphic. You‚Äôll export this from Illustrator or Inkscape.&lt;/li&gt;
&lt;li&gt;A standalone PDF version of your graphic. You‚Äôll export this from Illustrator or Inkscape.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will be graded based on completion using the standard ‚úì system, but I‚Äôll provide comments on how you use R and &lt;strong&gt;ggplot2&lt;/strong&gt;, how well you apply the principles of CRAP, &lt;em&gt;The Truthful Art&lt;/em&gt;, and &lt;em&gt;Effective Data Visualization&lt;/em&gt;, and how appropriate the graph is for the data and the story you‚Äôre telling. I will use &lt;a href=&#34;/files/mini-project-2-rubric.pdf&#34;&gt;this rubric&lt;/a&gt; to make comments and provide you with a simulated grade.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/files/mini-project-2-rubric.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; &lt;code&gt;mini-project-2-rubric.pdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this assignment, I am less concerned with the code (that‚Äôs why I gave most of it to you), and more concerned with the &lt;em&gt;design&lt;/em&gt;. Choose good colors based on palettes. Choose good, clean fonts. Use the heck out of &lt;code&gt;theme()&lt;/code&gt;. Add informative design elements in Illustrator/Inkscape/Gravit Designer. Make it look beautiful and CRAPpy. Refer to &lt;a href=&#34;/resource/design/&#34;&gt;the design resources here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The assignment is due by 11:59 PM on Friday, May 29&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please seek out help when you need it!&lt;/strong&gt; You know enough R (and have enough examples of code from class and your readings) to be able to do this. Your project has to be turned in individually, and your visualization should be your own (i.e.¬†if you work with others, don‚Äôt all turn in the same graph), but you should work with others! Reach out to me for help too‚ÄîI‚Äôm here to help!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can do this,&lt;/em&gt; and you‚Äôll feel like a budding dataviz witch/wizard when you‚Äôre done.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-cleaning-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data cleaning code&lt;/h2&gt;
&lt;p&gt;The data isn‚Äôt perfectly clean and tidy, but it‚Äôs real world data, so this is normal. Because the emphasis for this assignment is on design, not code, I‚Äôve provided code to help you clean up the data.&lt;/p&gt;
&lt;p&gt;These are the main issues with the data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are non-numeric values in the data, like &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;. The data isn‚Äôt very well documented; I‚Äôm assuming &lt;code&gt;-&lt;/code&gt; indicates a missing value, but I‚Äôm not sure what &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; mean, so for this assignment, we‚Äôll just assume they‚Äôre also missing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data generally includes rows for dozens of countries, but there are also rows for some continents, ‚Äúunknown,‚Äù ‚Äúother,‚Äù and a total row. Because &lt;a href=&#34;https://twitter.com/africasacountry&#34;&gt;Africa is not a country&lt;/a&gt;, and neither are the other continents, we want to exclude all non-countries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintaining consistent country names across different datasets is &lt;em&gt;literally&lt;/em&gt; the woooooooorst. Countries have different formal official names and datasets are never consistent in how they use those names.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; It‚Äôs such a tricky problem that social scientists have spent their careers just figuring out how to properly name and code countries. Really.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; There are international standards for country codes, though, like &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3&#34;&gt;ISO 3166-1 alpha 3&lt;/a&gt; (my favorite), also known as ISO3. It‚Äôs not perfect‚Äîit omits microstates (some Polynesian countries) and gray area states (Palestine, Kosovo)‚Äîbut it‚Äôs an international standard, so it has that going for it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To ensure that country names are consistent in this data, we use the &lt;strong&gt;countrycode&lt;/strong&gt; package (install it if you don‚Äôt have it), which is amazing. The &lt;code&gt;countrycode()&lt;/code&gt; function will take a country name in a given coding scheme and convert it to a different coding scheme using this syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  countrycode(variable, &amp;quot;current-coding-scheme&amp;quot;, &amp;quot;new-coding-scheme&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also does a farily good job at guessing and parsing inconsistent country names (e.g.¬†it will recognize ‚ÄúCongo, Democratic Republic‚Äù, even though it should technically be ‚ÄúDemocratic Republic of the Congo‚Äù). Here, we use &lt;code&gt;countrycode()&lt;/code&gt; to convert the inconsistent country names into ISO3 codes. We then create a cleaner version of the &lt;code&gt;origin_country&lt;/code&gt; column by converting the ISO3 codes back into country names. Note that the function chokes on North Korea initially, since it‚Äôs included as ‚ÄúKorea, North‚Äù‚Äîwe use the &lt;code&gt;custom_match&lt;/code&gt; argument to help the function out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data isn‚Äôt tidy‚Äîthere are individual columns for each year. &lt;code&gt;gather()&lt;/code&gt; takes every column and changes it to a row. We exclude the country, region, continent, and ISO3 code from the change-into-rows transformation with &lt;code&gt;-origin_country, -iso3, -origin_region, -origin_continent&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Currently, the year is being treated as a number, but it‚Äôs helpful to also treat it as an actual date. We create a new variable named &lt;code&gt;year_date&lt;/code&gt; that converts the raw number (e.g.¬†2009) into a date. The date needs to have at least a month, day, and year, so we actually convert it to January 1, 2009 with &lt;code&gt;ymd(paste0(year, &#34;-01-01&#34;))&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)    # For ggplot, dplyr, and friends
library(countrycode)  # For dealing with country names, abbreviations, and codes
library(lubridate)    # For dealing with dates&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;refugees_raw &amp;lt;- read_csv(&amp;quot;data/refugee_status.csv&amp;quot;, na = c(&amp;quot;-&amp;quot;, &amp;quot;X&amp;quot;, &amp;quot;D&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;non_countries &amp;lt;- c(&amp;quot;Africa&amp;quot;, &amp;quot;Asia&amp;quot;, &amp;quot;Europe&amp;quot;, &amp;quot;North America&amp;quot;, &amp;quot;Oceania&amp;quot;,
                   &amp;quot;South America&amp;quot;, &amp;quot;Unknown&amp;quot;, &amp;quot;Other&amp;quot;, &amp;quot;Total&amp;quot;)

refugees_clean &amp;lt;- refugees_raw %&amp;gt;%
  # Make this column name easier to work with
  rename(origin_country = `Continent/Country of Nationality`) %&amp;gt;%
  # Get rid of non-countries
  filter(!(origin_country %in% non_countries)) %&amp;gt;%
  # Convert country names to ISO3 codes
  mutate(iso3 = countrycode(origin_country, &amp;quot;country.name&amp;quot;, &amp;quot;iso3c&amp;quot;,
                            custom_match = c(&amp;quot;Korea, North&amp;quot; = &amp;quot;PRK&amp;quot;))) %&amp;gt;%
  # Convert ISO3 codes to country names, regions, and continents
  mutate(origin_country = countrycode(iso3, &amp;quot;iso3c&amp;quot;, &amp;quot;country.name&amp;quot;),
         origin_region = countrycode(iso3, &amp;quot;iso3c&amp;quot;, &amp;quot;region&amp;quot;),
         origin_continent = countrycode(iso3, &amp;quot;iso3c&amp;quot;, &amp;quot;continent&amp;quot;)) %&amp;gt;%
  # Make this data tidy
  gather(year, number, -origin_country, -iso3, -origin_region, -origin_continent) %&amp;gt;%
  # Make sure the year column is numeric + make an actual date column for years
  mutate(year = as.numeric(year),
         year_date = ymd(paste0(year, &amp;quot;-01-01&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-to-possibly-use-in-your-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data to possibly use in your plot&lt;/h2&gt;
&lt;p&gt;Here are some possible summaries of the data you might use‚Ä¶&lt;/p&gt;
&lt;div id=&#34;country-totals-over-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Country totals over time&lt;/h3&gt;
&lt;p&gt;This is just the &lt;code&gt;refugees_clean&lt;/code&gt; data frame I gave you. You‚Äôll want to filter it and select specific countries, though‚Äîyou won‚Äôt really be able to plot 60 countries all at once unless you use sparklines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   origin_country iso3  origin_region    origin_continent  year number year_date 
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    
## 1 Afghanistan    AFG   South Asia       Asia              2006    651 2006-01-01
## 2 Angola         AGO   Sub-Saharan Afr‚Ä¶ Africa            2006     13 2006-01-01
## 3 Armenia        ARM   Europe &amp;amp; Centra‚Ä¶ Asia              2006     87 2006-01-01
## 4 Azerbaijan     AZE   Europe &amp;amp; Centra‚Ä¶ Asia              2006     77 2006-01-01
## 5 Belarus        BLR   Europe &amp;amp; Centra‚Ä¶ Europe            2006    350 2006-01-01
## 6 Bhutan         BTN   South Asia       Asia              2006      3 2006-01-01&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cumulative-country-totals-over-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cumulative country totals over time&lt;/h3&gt;
&lt;p&gt;Note the &lt;code&gt;cumsum()&lt;/code&gt; function‚Äîit calculates the cumulative sum of a column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;refugees_countries_cumulative &amp;lt;- refugees_clean %&amp;gt;%
  arrange(year_date) %&amp;gt;%
  group_by(origin_country) %&amp;gt;%
  mutate(cumulative_total = cumsum(number))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
## # Groups:   origin_country [1]
##   origin_country iso3  origin_continent  year number year_date  cumulative_total
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;                &amp;lt;dbl&amp;gt;
## 1 Afghanistan    AFG   Asia              2006    651 2006-01-01              651
## 2 Afghanistan    AFG   Asia              2007    441 2007-01-01             1092
## 3 Afghanistan    AFG   Asia              2008    576 2008-01-01             1668
## 4 Afghanistan    AFG   Asia              2009    349 2009-01-01             2017
## 5 Afghanistan    AFG   Asia              2010    515 2010-01-01             2532
## 6 Afghanistan    AFG   Asia              2011    428 2011-01-01             2960&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;continent-totals-over-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Continent totals over time&lt;/h3&gt;
&lt;p&gt;Note the &lt;code&gt;na.rm = TRUE&lt;/code&gt; argument in &lt;code&gt;sum()&lt;/code&gt;. This makes R ignore any missing data when calculating the total. Without it, if R finds a missing value in the column, it will mark the final sum as &lt;code&gt;NA&lt;/code&gt; too, which we don‚Äôt want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;refugees_continents &amp;lt;- refugees_clean %&amp;gt;%
  group_by(origin_continent, year_date) %&amp;gt;%
  summarize(total = sum(number, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` regrouping output by &amp;#39;origin_continent&amp;#39; (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
## # Groups:   origin_continent [1]
##   origin_continent year_date  total
##   &amp;lt;chr&amp;gt;            &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Africa           2006-01-01 18116
## 2 Africa           2007-01-01 17473
## 3 Africa           2008-01-01  8931
## 4 Africa           2009-01-01  9664
## 5 Africa           2010-01-01 13303
## 6 Africa           2011-01-01  7677&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cumulative-continent-totals-over-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cumulative continent totals over time&lt;/h3&gt;
&lt;p&gt;Note that there are two &lt;code&gt;group_by()&lt;/code&gt; functions here. First we get the total number of refugees per continent per year, then we group by continent only to get the cumulative sum of refugees across continents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;refugees_continents_cumulative &amp;lt;- refugees_clean %&amp;gt;%
  group_by(origin_continent, year_date) %&amp;gt;%
  summarize(total = sum(number, na.rm = TRUE)) %&amp;gt;%
  arrange(year_date) %&amp;gt;%
  group_by(origin_continent) %&amp;gt;%
  mutate(cumulative_total = cumsum(total))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` regrouping output by &amp;#39;origin_continent&amp;#39; (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
## # Groups:   origin_continent [1]
##   origin_continent year_date  total cumulative_total
##   &amp;lt;chr&amp;gt;            &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1 Africa           2006-01-01 18116            18116
## 2 Africa           2007-01-01 17473            35589
## 3 Africa           2008-01-01  8931            44520
## 4 Africa           2009-01-01  9664            54184
## 5 Africa           2010-01-01 13303            67487
## 6 Africa           2011-01-01  7677            75164&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-ideas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization ideas&lt;/h2&gt;
&lt;p&gt;You can redesign one of these ugly, less-than-helpful graphs, or create a brand new visualization (like a map!).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/lab/02-mini-project_files/figure-html/create-plots-1.png&#34; width=&#34;1056&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or be super brave and make a map!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/lab/02-mini-project_files/figure-html/create-map-1.png&#34; width=&#34;1056&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;For instance, ‚ÄúNorth Korea‚Äù, ‚ÄúKorea, North‚Äù, ‚ÄúDPRK‚Äù, ‚ÄúKorea, Democratic People‚Äôs Republic of‚Äù, and ‚ÄúDemocratic People‚Äôs Republic of Korea‚Äù, and ‚ÄúKorea (DPRK)‚Äù are all perfectly normal versions of the country‚Äôs name and you‚Äôll find them all in the wild.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;See Gleditsch, Kristian S. &amp;amp; Michael D. Ward. 1999. &lt;a href=&#34;https://www.tandfonline.com/doi/abs/10.1080/03050629908434958&#34;&gt;‚ÄúInterstate System Membership: A Revised List of the Independent States since 1816.‚Äù&lt;/a&gt; &lt;em&gt;International Interactions&lt;/em&gt; 25: 393-413; or the &lt;a href=&#34;http://www.paulhensel.org/icownames.html&#34;&gt;‚ÄúICOW Historical State Names Data Set‚Äù&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mini project 1</title>
      <link>/lab/01-mini-project/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/01-mini-project/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#starter-code&#34;&gt;Starter code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;New York City is full of urban wildlife, and rats are one of the city‚Äôs most infamous animal mascots. Rats in NYC are plentiful, but they also deliver food, so they‚Äôre useful too.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PeJUqcbool4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;NYC keeps incredibly detailed data regarding animal sightings, including rats, and &lt;a href=&#34;https://www.kaggle.com/new-york-city/nyc-rat-sightings/data&#34;&gt;it makes this data publicly available&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this first mini project, you will use &lt;strong&gt;R and ggplot2&lt;/strong&gt; to tell an interesting story hidden in the data. You can recreate one of these ugly, less-than-helpful graphs, or create a new story by looking at other variables in the data:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/rat_examples.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here‚Äôs what you need to do:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; a new RStudio project and place it on your computer somewhere. Open that new folder in Windows File Explorer or macOS Finder (however you navigate around the files on your computer), and create two subfolders there named &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; New York City‚Äôs database of rat sightings since 2010:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andrewheiss/datavizf18.classes.andrewheiss.com/master/static/data/Rat_Sightings.csv&#34; target=&#34;_blank&#34; download&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;Rat_Sightings.csv&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Place this in the &lt;code&gt;data&lt;/code&gt; subfolder you created in step 1. You might need to right click on this link and choose ‚ÄúSave link as‚Ä¶‚Äù, since your browser may try to display it as text. The data was originally &lt;a href=&#34;https://www.kaggle.com/new-york-city/nyc-rat-sightings/data&#34;&gt;uploaded by the City of New York to Kaggle&lt;/a&gt;, and is provided with a public domain license.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; a new R Markdown file and save it in your project. In RStudio go to File &amp;gt; New File &amp;gt; R Markdown‚Ä¶, choose the default options, and delete all the placeholder text in the new file except for the metadata at the top, which is between &lt;code&gt;---&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify&lt;/strong&gt; that your project folder is structured like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name/
  your-analysis.Rmd
  your-project-name.Rproj
  data/
    Rat_Sightings.csv
  output/
    NOTHING&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Summarize&lt;/strong&gt; the data somehow. The raw data has more than 100,000 rows, which means you‚Äôll need to aggregate the data (&lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, and &lt;code&gt;summarize()&lt;/code&gt; will be your friends). Consider looking at the number of sightings per borough, per year, per dwelling type, etc., or a combination of these, like the change in the number sightings across the 5 boroughs between 2010 and 2016.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; an appropriate visualization based on the data you summarized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; a memo (no word limit) explaining your process. I‚Äôm specifically looking for a discussion of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What was wrong with the original graphic (if you‚Äôre fixing one of the original figures)?&lt;/li&gt;
&lt;li&gt;What story are you telling with your new graphic?&lt;/li&gt;
&lt;li&gt;How did you apply the principles of CRAP?&lt;/li&gt;
&lt;li&gt;How did you apply Kieran Healy‚Äôs principles of great visualizations or Alberto Cairo‚Äôs five qualities of great visualizations?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Upload&lt;/strong&gt; the following outputs to iCollege:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A PDF or Word file of your memo with your final code and graphic embedded in it.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This means you‚Äôll need to do all your coding in an R Markdown file and embed your code in chunks.&lt;/li&gt;
&lt;li&gt;A standalone PNG version of your graphic. Use &lt;code&gt;ggsave(plot_name, filename = &#34;output/blah.png&#34;, width = XX, height = XX)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A standalone PDF version of your graphic. Use &lt;code&gt;ggsave(plot_name, filename = &#34;output/blah.pdf&#34;, width = XX, height = XX)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will be graded based on completion using the standard ‚úì system, but I‚Äôll provide comments on how you use R and &lt;strong&gt;ggplot2&lt;/strong&gt;, how well you apply the principles of CRAP, &lt;em&gt;The Truthful Art&lt;/em&gt;, and &lt;em&gt;Effective Data Visualization&lt;/em&gt;, and how appropriate the graph is for the data and the story you‚Äôre telling. I will use &lt;a href=&#34;/files/mini-project-1-rubric.pdf&#34;&gt;this rubric&lt;/a&gt; to make comments and provide you with a simulated grade.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/files/mini-project-1-rubric.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; &lt;code&gt;mini-project-1-rubric.pdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this assignment, I am less concerned with detailed graphic design principles‚Äîselect appropriate colors, change fonts if you‚Äôre brave, and choose a nice ggplot theme and make some adjustments like moving the legend around (&lt;code&gt;theme(legend.position = &#34;bottom&#34;)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The assignment is due by 11:59 PM on Friday, May 226&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please seek out help when you need it!&lt;/strong&gt; You know enough R (and have enough examples of code from class and your readings) to be able to do this. Your project has to be turned in individually, and your visualization should be your own (i.e.¬†if you work with others, don‚Äôt all turn in the same graph), but you should work with others! Reach out to me for help too‚ÄîI‚Äôm here to help!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can do this,&lt;/em&gt; and you‚Äôll feel like a budding dataviz witch/wizard when you‚Äôre done.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;starter-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Starter code&lt;/h2&gt;
&lt;p&gt;I‚Äôve provided some starter code below. A couple comments about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default, &lt;code&gt;read_csv()&lt;/code&gt; treats cells that are empty or ‚ÄúNA‚Äù as missing values. This rat dataset uses ‚ÄúN/A‚Äù to mark missing values, so we need to add that as a possible marker of missingness (hence &lt;code&gt;na = c(&#34;&#34;, &#34;NA&#34;, &#34;N/A&#34;)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;To make life easier, I‚Äôve renamed some of the key variables you might work with. You can rename others if you want.&lt;/li&gt;
&lt;li&gt;I‚Äôve also created a few date-related variables (&lt;code&gt;sighting_year&lt;/code&gt;, &lt;code&gt;sighting_month&lt;/code&gt;, &lt;code&gt;sighting_day&lt;/code&gt;, and &lt;code&gt;sighting_weekday&lt;/code&gt;). You don‚Äôt have to use them, but they‚Äôre there if you need them. The functions that create these, like &lt;code&gt;year()&lt;/code&gt; and &lt;code&gt;wday()&lt;/code&gt; are part of the &lt;strong&gt;lubridate&lt;/strong&gt; library.&lt;/li&gt;
&lt;li&gt;The date/time variables are formatted like &lt;code&gt;04/03/2017 12:00:00 AM&lt;/code&gt;, which R is not able to automatically parse as a date when reading the CSV file. You can use the &lt;code&gt;mdy_hms()&lt;/code&gt; function in the &lt;strong&gt;lubridate&lt;/strong&gt; library to parse dates that are structured as ‚Äúmonth-day-year-hour-minute‚Äù. There are also a bunch of other iterations of this function, like &lt;code&gt;ymd()&lt;/code&gt;, &lt;code&gt;dmy()&lt;/code&gt;, etc., for other date formats.&lt;/li&gt;
&lt;li&gt;There‚Äôs one row with an unspecified borough, so I filter that out.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)

rats_raw &amp;lt;- read_csv(&amp;quot;data/Rat_Sightings.csv&amp;quot;, na = c(&amp;quot;&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;N/A&amp;quot;))

# If you get an error that says &amp;quot;All formats failed to parse. No formats
# found&amp;quot;, it&amp;#39;s because the mdy_hms function couldn&amp;#39;t parse the date. The date
# variable *should* be in this format: &amp;quot;04/03/2017 12:00:00 AM&amp;quot;, but in some
# rare instances, it might load without the seconds as &amp;quot;04/03/2017 12:00 AM&amp;quot;.
# If there are no seconds, use mdy_hm() instead of mdy_hms().
rats_clean &amp;lt;- rats_raw %&amp;gt;%
  rename(created_date = `Created Date`,
         location_type = `Location Type`,
         borough = Borough) %&amp;gt;%
  mutate(created_date = mdy_hms(created_date)) %&amp;gt;%
  mutate(sighting_year = year(created_date),
         sighting_month = month(created_date),
         sighting_day = day(created_date),
         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %&amp;gt;%
  filter(borough != &amp;quot;Unspecified&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You‚Äôll summarize the data with functions from &lt;strong&gt;dplyr&lt;/strong&gt;, including stuff like &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;arrange()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, &lt;code&gt;summarize()&lt;/code&gt;, and &lt;code&gt;mutate()&lt;/code&gt;. Here are some examples of ways to summarize the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# See the count of rat sightings by weekday
rats_clean %&amp;gt;%
  count(sighting_weekday)

# Assign a summarized data frame to an object to use it in a plot
rats_by_weekday &amp;lt;- rats_clean %&amp;gt;%
  count(sighting_weekday, sighting_year)

ggplot(rats_by_weekday, aes(x = fct_rev(sighting_weekday), y = n)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~ sighting_year)

# See the count of rat sightings by weekday and borough
rats_clean %&amp;gt;%
  count(sighting_weekday, borough, sighting_year)

# An alternative to count() is to specify the groups with group_by() and then
# be explicit about how you&amp;#39;re summarizing the groups, such as calculating the
# mean, standard deviation, or number of observations (we do that here with
# `n()`).
rats_clean %&amp;gt;%
  group_by(sighting_weekday, borough) %&amp;gt;%
  summarize(n = n())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;You can approach this in a couple different ways‚Äîyou can write the memo and then include the full figure and code at the end, &lt;a href=&#34;https://rud.is/b/2017/09/18/mapping-fall-foliage-with-sf/&#34;&gt;similar to this blog post&lt;/a&gt;, or you can write the memo in an incremental way, describing the different steps of creating the figure, ultimately arriving at a clean final figure, &lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/bechdel.html&#34;&gt;like this blog post&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>(Re)Introduction to R</title>
      <link>/example/00-example/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/00-example/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction-to-examples&#34;&gt;Introduction to Examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-process-for-working-with-rstudio&#34;&gt;Basic process for working with RStudio&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reading-in-data&#34;&gt;Reading in Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction-to-examples&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction to Examples&lt;/h1&gt;
&lt;p&gt;Examples in this class are designed to be presented in-class. Accordingly, the notes here are &lt;em&gt;not&lt;/em&gt; comprehensive. Instead, they are intended to guide students through&lt;/p&gt;
&lt;p&gt;I‚Äôm also aware that my writing is dry and lifeless. If you‚Äôre reading this online without the advantage of seeing it in person, don‚Äôt worry‚ÄîI‚Äôll be ‚Äúfunnier‚Äù in class.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;basic-process-for-working-with-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic process for working with RStudio&lt;/h2&gt;
&lt;p&gt;For this example, we are going to create a new RStudio project, download some data, put the data in the project, and make a graph of it using R Markdown. You‚Äôll follow this same process any time you start a new project or exercise. You will need to tackle this in class and there are some specific exercises and reflections for each class.&lt;/p&gt;
&lt;p&gt;To follow along, download this CSV file here (you may need to right click on it and select ‚ÄúSave As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/gapminder.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;gapminder.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;reading-in-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading in Data&lt;/h3&gt;
&lt;p&gt;Our first step in any data project is actually reading in data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Comments from previous classes indicate that I am not, in fact, funny.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Installing R, RStudio, tidyverse, and tinytex</title>
      <link>/resource/install/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>/resource/install/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install-r&#34;&gt;Install &lt;code&gt;R&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-rstudio&#34;&gt;Install RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-tidyverse&#34;&gt;Install &lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-tinytex&#34;&gt;Install &lt;code&gt;tinytex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned in the syllabus, you will do all of your work in this class with the open source programming language &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;&lt;code&gt;R&lt;/code&gt;&lt;/a&gt;. You will use &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; as the main program to access &lt;code&gt;R&lt;/code&gt;. Think of &lt;code&gt;R&lt;/code&gt; as an engine and RStudio as a car dashboard‚Äî‚Äì&lt;code&gt;R&lt;/code&gt; handles all the calculations and the actual statistics, while RStudio provides a nice interface for running &lt;code&gt;R&lt;/code&gt; code.&lt;/p&gt;
&lt;p&gt;Here‚Äôs how you install these things.&lt;/p&gt;
&lt;div id=&#34;install-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install &lt;code&gt;R&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;First you need to install &lt;code&gt;R&lt;/code&gt; itself (the engine).&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Go to the CRAN (Collective &lt;code&gt;R&lt;/code&gt; Archive Network)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; website: &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on ‚ÄúDownload &lt;code&gt;R&lt;/code&gt; for &lt;code&gt;XXX&lt;/code&gt;‚Äù, where &lt;code&gt;XXX&lt;/code&gt; is either Mac or Windows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-links.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you use macOS, scroll down to the first &lt;code&gt;.pkg&lt;/code&gt; file in the list of files (in this picture, it‚Äôs &lt;code&gt;R-4.0.0.pkg&lt;/code&gt;; as of right now, the current version is also 4.0.0) and download it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-mac.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use Windows, click ‚Äúbase‚Äù (or click on the bolded ‚Äúinstall R for the first time‚Äù link) and download it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-windows.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double click on the downloaded file (check your &lt;code&gt;Downloads&lt;/code&gt; folder). Click yes through all the prompts to install like any other program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use macOS, &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;download and install XQuartz&lt;/a&gt;. You do not need to do this on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;install-rstudio&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install RStudio&lt;/h3&gt;
&lt;p&gt;Next, you need to install RStudio, the nicer graphical user interface (GUI) for &lt;code&gt;R&lt;/code&gt; (the dashboard). Once &lt;code&gt;R&lt;/code&gt; and RStudio are both installed, you can ignore &lt;code&gt;R&lt;/code&gt; and only use RStudio. RStudio will use &lt;code&gt;R&lt;/code&gt; automatically and you won‚Äôt ever have to interact with it directly.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Go to the free download location on RStudio‚Äôs website: &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34; class=&#34;uri&#34;&gt;https://www.rstudio.com/products/rstudio/download/#download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The website should automatically detect your operating system (macOS or Windows) and show a big download button for it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-rstudio1.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If not, scroll down a little to the large table and choose the version of RStudio that matches your operating system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-rstudio2.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double click on the downloaded file (again, check your &lt;code&gt;Downloads&lt;/code&gt; folder). Click yes through all the prompts to install like any other program.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Double click on RStudio to run it (check your applications folder or start menu).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install &lt;code&gt;tidyverse&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;R packages are easy to install with RStudio. Select the packages panel, click on ‚ÄúInstall,‚Äù type the name of the package you want to install, and press enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-package-panel.png&#34; width=&#34;40%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This can sometimes be tedious when you‚Äôre installing lots of packages, though. &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;The tidyverse&lt;/a&gt;, for instance, consists of dozens of packages (including the ever-present &lt;strong&gt;ggplot2&lt;/strong&gt;) that all work together. Rather than install each individually, you can install a single magical package and get them all at the same time.&lt;/p&gt;
&lt;p&gt;Go to the packages panel in RStudio, click on ‚ÄúInstall,‚Äù type ‚Äútidyverse‚Äù, and press enter. You‚Äôll see a bunch of output in the RStudio console as all the tidyverse packages are installed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/install/install-r-tidyverse.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice also that RStudio will generate a line of code for you and run it: &lt;code&gt;install.packages(&#34;tidyverse&#34;)&lt;/code&gt;. You can also just paste and run this instead of using the packages panel. Hopefully you‚Äôve experienced installing packages before now; if not, consider this a crash course!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-tinytex&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install &lt;code&gt;tinytex&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you knit to PDF, &lt;code&gt;R&lt;/code&gt; uses a special scientific typesetting program named LaTeX.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LaTeX is neat and makes pretty documents, but it‚Äôs a huge program‚Äî&lt;a href=&#34;https://tug.org/mactex/mactex-download.html&#34;&gt;the macOS version, for instance, is nearly 4 GB&lt;/a&gt;. To make life easier, there‚Äôs &lt;a href=&#34;https://yihui.org/tinytex/&#34;&gt;an &lt;code&gt;R&lt;/code&gt; package named &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt; that installs a minimal LaTeX program and that automatically deals with differences between macOS and Windows.&lt;/p&gt;
&lt;p&gt;Here‚Äôs how to install &lt;strong&gt;tinytex&lt;/strong&gt; so you can knit to pretty PDFs:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Use the Packages in panel in RStudio to install &lt;strong&gt;tinytex&lt;/strong&gt; like you did above with &lt;strong&gt;tidyverse&lt;/strong&gt;. Alternatively, run &lt;code&gt;install.packages(&#34;tinytex&#34;)&lt;/code&gt; in the console.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;tinytex::install_tinytex()&lt;/code&gt; in the console.&lt;/li&gt;
&lt;li&gt;Wait for a bit while R downloads and installs everything you need.&lt;/li&gt;
&lt;li&gt;The end! You should now be able to knit to PDF.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;It‚Äôs a goofy name, but CRAN is where most &lt;code&gt;R&lt;/code&gt; packages‚Äîand R itself‚Äîlives.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Pronounced ‚Äúlay-tek‚Äù for those who are correct; or ‚Äúlah-tex‚Äù to those who love goofy nerdy pronunciation. Technically speaking, the x is the ‚Äúch‚Äù sound in ‚ÄúBach‚Äù, but most people just say it as ‚Äúk‚Äù. While either saying ‚Äúlay‚Äù or ‚Äúlah‚Äù is correct, ‚Äúlayteks‚Äù is frowned upon because it clearly shows you‚Äôre not cool.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>/resource/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/resource/design/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#accessibility&#34;&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#colors&#34;&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graphic-assets&#34;&gt;Graphic assets&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors&#34;&gt;Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors-photos-videos-and-other-assets&#34;&gt;Vectors, photos, videos, and other assets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;accessibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vischeck.com/vischeck/vischeckImage.php&#34;&gt;&lt;strong&gt;Vischeck&lt;/strong&gt;&lt;/a&gt;: Simulate how your images look for people with different forms of colorblindness (web-based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colororacle.org/index.html&#34;&gt;&lt;strong&gt;Color Oracle&lt;/strong&gt;&lt;/a&gt;: Simulate how your images look for people with different forms of colorblindness (desktop-based, more types of colorblindness)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;colors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://color.adobe.com&#34;&gt;&lt;strong&gt;Adobe Color&lt;/strong&gt;&lt;/a&gt;: Create, share, and explore rule-based and custom color palettes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.colourlovers.com/&#34;&gt;&lt;strong&gt;ColourLovers&lt;/strong&gt;&lt;/a&gt;: Like Facebook for color palettes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html&#34;&gt;&lt;strong&gt;viridis&lt;/strong&gt;&lt;/a&gt;: Percetually uniform color scales.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fabiocrameri.ch/colourmaps.php&#34;&gt;&lt;strong&gt;Scientific Colour-Maps&lt;/strong&gt;&lt;/a&gt;: Perceptually uniform color scales like viridis. Use them in R with &lt;a href=&#34;https://github.com/thomasp85/scico&#34;&gt;&lt;strong&gt;scico&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colorbrewer2.org/&#34;&gt;&lt;strong&gt;ColorBrewer&lt;/strong&gt;&lt;/a&gt;: Sequential, diverging, and qualitative color palettes that take accessibility into account.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vrl.cs.brown.edu/color&#34;&gt;&lt;strong&gt;Colorgorical&lt;/strong&gt;&lt;/a&gt;: Create color palettes based on fancy mathematical rules for perceptual distance.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tristen.ca/hcl-picker/&#34;&gt;&lt;strong&gt;Colorpicker for data&lt;/strong&gt;&lt;/a&gt;: More fancy mathematical rules for color palettes (&lt;a href=&#34;https://www.vis4.net/blog/posts/avoid-equidistant-hsv-colors/&#34;&gt;explanation&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.medialab.sciences-po.fr/iwanthue/&#34;&gt;&lt;strong&gt;iWantHue&lt;/strong&gt;&lt;/a&gt;: Yet another perceptual distance-based color palette builder.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://photochrome.io/&#34;&gt;&lt;strong&gt;Photochrome&lt;/strong&gt;&lt;/a&gt;: Word-based color pallettes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://policyviz.com/better-presentations/design-resources/design-color-tools/&#34;&gt;&lt;strong&gt;PolicyViz Design Color Tools&lt;/strong&gt;&lt;/a&gt;: Large collection of useful color resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;fonts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fonts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fonts.google.com/&#34;&gt;&lt;strong&gt;Google Fonts&lt;/strong&gt;&lt;/a&gt;: Huge collection of free, well-made fonts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reliablepsd.com/ultimate-google-font-pairings/&#34;&gt;&lt;strong&gt;The Ultimate Collection of Google Font Pairings&lt;/strong&gt;&lt;/a&gt;: A list of great, well-designed font pairings from all those fonts hosted by Google (for when you‚Äôre looking for good contrasting or complementary fonts).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;graphic-assets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Graphic assets&lt;/h2&gt;
&lt;div id=&#34;images&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Images&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use the Creative Commons filters on Google Images or Flickr&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unsplash.com/&#34;&gt;&lt;strong&gt;Unsplash&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pexels.com/&#34;&gt;&lt;strong&gt;Pexels&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pixabay.com/&#34;&gt;&lt;strong&gt;Pixabay&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stocksnap.io/&#34;&gt;&lt;strong&gt;StockSnap.io&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://burst.shopify.com/&#34;&gt;&lt;strong&gt;Burst&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://freephotos.cc/&#34;&gt;&lt;strong&gt;freephotos.cc&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vectors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thenounproject.com/&#34;&gt;&lt;strong&gt;Noun Project&lt;/strong&gt;&lt;/a&gt;: Thousands of free simple vector images&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aiconica.net/&#34;&gt;&lt;strong&gt;aiconica&lt;/strong&gt;&lt;/a&gt;: 1,000+ vector icons&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vecteezy.com/&#34;&gt;&lt;strong&gt;Vecteezy&lt;/strong&gt;&lt;/a&gt;: Thousands of free vector images&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors-photos-videos-and-other-assets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vectors, photos, videos, and other assets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stockio.com/&#34;&gt;&lt;strong&gt;Stockio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphic design</title>
      <link>/example/02-example/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/02-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#critique&#34;&gt;Critique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redesign-in-canva&#34;&gt;Redesign in Canva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redesign-in-illustrator&#34;&gt;Redesign in Illustrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-versions&#34;&gt;Final versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, I‚Äôm going to critique and improve this random flyer I found posted in the BYU library in September 2018:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/projects/02-example/original-from-hbll.jpg&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs not the best designed poster, but it‚Äôs incredibly typical of what you see in the real world. By applying the principles of CRAP, we can improve the poster significantly.&lt;/p&gt;
&lt;p&gt;If you download and unzip this file, you can follow along too (but you don‚Äôt have to‚Äîyou can just sit back and enjoy the ride).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/02-example.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;02-example.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;critique&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Critique&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/K0sd-j6eMiI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;redesign-in-canva&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Redesign in Canva&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/G1857weuvIc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;redesign-in-illustrator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Redesign in Illustrator&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/5Z8FQtDVlYQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-versions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final versions&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/img/examples/combined-output@2x.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphic design</title>
      <link>/lab/02-exercise/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/02-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-crap-critique&#34;&gt;Task 2: CRAP critique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-3-crap-redesign&#34;&gt;Task 3: CRAP redesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-crap-critique&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: CRAP critique&lt;/h2&gt;
&lt;p&gt;Critique the design of the poster for the BYU Student Wellness Center workshop below. Go through the CRAP checklist and analyze how well or poorly the poster follows each of the principles. Discuss how the poster‚Äôs adherence to (or non-adherence to) these principles influences its effectiveness.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;This would have been some random poster from GSU, but I haven‚Äôt been on campus since mid-March&lt;/em&gt; üò≠)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/student-wellness.jpg&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-3-crap-redesign&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 3: CRAP redesign&lt;/h2&gt;
&lt;p&gt;Redesign the poster for the BYU Student Wellness Center workshop. Use whatever program you want‚Äîeven PowerPoint if you‚Äôre most comfortable with that, though it‚Äôll probably be easier to use something like &lt;a href=&#34;https://www.canva.com/&#34;&gt;Canva&lt;/a&gt; or Adobe Illustrator. If you use Canva, don‚Äôt use any of the built-in templates‚Äîstart from scratch with a blank page.&lt;/p&gt;
&lt;p&gt;To save you from retyping everything, I‚Äôve included all the text and Student Wellness hex logo in the zip file below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/02-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;02-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn‚Äôt include the Instagram logo. If you want to use that, go find one online. You don‚Äôt have to use it. You don‚Äôt have to use the big paragraph of text either‚Äîyou can rewrite it to shrink it down if you want.&lt;/p&gt;
&lt;p&gt;Critique your new design using the CRAP checklist. How did you use contrast, repetition, alignment, and proximity in your improved design?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;You don‚Äôt need to worry about using R Markdown for this assignment (unless you really want to). On iCollege, submit a PDF of your new poster, along with a PDF of your reflection and your critiques of the original poster and your new poster.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Markdown</title>
      <link>/resource/markdown/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/resource/markdown/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-markdown-formatting&#34;&gt;Basic Markdown formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tables&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#footnotes&#34;&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#front-matter&#34;&gt;Front matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#citations&#34;&gt;Citations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-references&#34;&gt;Other references&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt; to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (&lt;a href=&#34;https://pandoc.org/MANUAL.html#option--to&#34;&gt;see the full list of output types here&lt;/a&gt;)&lt;/p&gt;
&lt;div id=&#34;basic-markdown-formatting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Markdown formatting&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;40%&#34; /&gt;
&lt;col width=&#34;21%&#34; /&gt;
&lt;col width=&#34;38%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type‚Ä¶&lt;/th&gt;
&lt;th&gt;‚Ä¶or‚Ä¶&lt;/th&gt;
&lt;th&gt;‚Ä¶to get&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;pre&gt;Some text in a paragraph.

More text in the next paragraph. Always
use empty lines between paragraphs.&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Some text in a paragraph.&lt;/p&gt;
&lt;p&gt;More text in the next paragraph. Always
use empty lines between paragraphs.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;*Italic*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_Italic_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;**Bold**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__Bold__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;# Heading 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;h1 class=&#34;smaller-h1&#34;&gt;
Heading 1
&lt;/h1&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;## Heading 2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;h2 class=&#34;smaller-h2&#34;&gt;
Heading 2
&lt;/h2&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;### Heading 3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;h3 class=&#34;smaller-h3&#34;&gt;
Heading 3
&lt;/h3&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;(Go up to heading level 6 with &lt;code&gt;######&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;[Link text](http://www.example.com)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.example.com&#34;&gt;Link text&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;![Image caption](/path/to/image.png)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;/img/mstile-144x144.png&#34; title=&#34;fig:&#34; alt=&#34;Class logo&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;`&lt;code&gt;Inline code` with backticks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Inline code&lt;/code&gt; with backticks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;&amp;gt; Blockquote&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;blockquote&gt;
&lt;p&gt;Blockquote&lt;/p&gt;
&lt;/blockquote&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;pre&gt;- Things in
- an unordered
- list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;* Things in
* an unordered
* list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Things in&lt;/li&gt;
&lt;li&gt;an unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;pre&gt;1. Things in
2. an ordered
3. list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;1) Things in
2) an ordered
3) list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Things in&lt;/li&gt;
&lt;li&gt;an ordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ol&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;pre&gt;Horizontal line

---&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;Horizontal line

***&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Horizontal line&lt;/p&gt;
&lt;hr /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;math&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Math&lt;/h2&gt;
&lt;p&gt;Markdown uses LaTeX to create fancy mathematical equations. There are like a billion little options and features available for math equations‚Äîyou can find &lt;a href=&#34;http://www.malinc.se/math/latex/basiccodeen.php&#34;&gt;helpful examples of the the most common basic commands here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can use math in two different ways: inline or in a display block. To use math inline, wrap it in single dollar signs, like &lt;code&gt;$y = mx + b$&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;52%&#34; /&gt;
&lt;col width=&#34;47%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type‚Ä¶&lt;/th&gt;
&lt;th&gt;‚Ä¶to get&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;pre&gt;Based on the DAG, the regression model for
estimating the effect of education on wages
is $\hat{y} = \beta_0 + \beta_1 x_1 + \epsilon$, or
$\text{Wages} = \beta_0 + \beta_1 \text{Education} + \epsilon$.&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;Based on the DAG, the regression model for
estimating the effect of education on wages
is &lt;span class=&#34;math inline&#34;&gt;\(\hat{y} = \beta_0 + \beta_1 x_1 + \epsilon\)&lt;/span&gt;, or
&lt;span class=&#34;math inline&#34;&gt;\(\text{Wages} = \beta_0 + \beta_1 \text{Education} + \epsilon\)&lt;/span&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To put an equation on its own line in a display block, wrap it in double dollar signs, like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;The quadratic equation was an important part of high school math:

$$
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
$$

But now we just use computers to solve for $x$.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;‚Ä¶to get‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The quadratic equation was an important part of high school math:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But now we just use computers to solve for &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;Because dollar signs are used to indicate math equations, you can‚Äôt just use dollar signs like normal if you‚Äôre writing about actual dollars. For instance, if you write &lt;code&gt;This book costs $5.75 and this other costs $40&lt;/code&gt;, Markdown will treat everything that comes between the dollar signs as math, like so: ‚ÄúThis book costs $5.75 and this other costs $40‚Äù.&lt;/p&gt;
&lt;p&gt;To get around that, put a backslash (&lt;code&gt;\&lt;/code&gt;) in front of the dollar signs, so that &lt;code&gt;This book costs \$5.75 and this other costs \$40&lt;/code&gt; becomes ‚ÄúThis book costs &lt;span&gt;$5.75&lt;/span&gt; and this other costs &lt;span&gt;$40&lt;/span&gt;‚Äù.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;p&gt;There are 4 different ways to hand-create tables in Markdown‚ÄîI say ‚Äúhand-create‚Äù because it‚Äôs normally way easier to use R to generate these things with packages like &lt;a href=&#34;https://rapporter.github.io/pander/&#34;&gt;&lt;strong&gt;pander&lt;/strong&gt;&lt;/a&gt; (use &lt;code&gt;pandoc.table()&lt;/code&gt;) or &lt;strong&gt;knitr&lt;/strong&gt; (use &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/kable.html&#34;&gt;&lt;code&gt;kable()&lt;/code&gt;&lt;/a&gt;). The two most common are simple tables and pipe tables. &lt;a href=&#34;https://pandoc.org/MANUAL.html#tables&#34;&gt;You should look at the full documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For simple tables, type‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;  Right     Left     Center     Default
-------     ------ ----------   -------
     12     12        12            12
    123     123       123          123
      1     1          1             1

Table: Caption goes here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;‚Ä¶to get‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Caption goes here&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Left&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Center&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;123&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;For pipe tables, type‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

Table: Caption goes here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;‚Ä¶to get‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Caption goes here&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Left&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Center&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;123&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;There are two different ways to add footnotes (&lt;a href=&#34;https://pandoc.org/MANUAL.html#footnotes&#34;&gt;see here for complete documentation&lt;/a&gt;): regular and inline.&lt;/p&gt;
&lt;p&gt;Regular notes need (1) an identifier and (2) the actual note. The identifier can be whatever you want. Some people like to use numbers like &lt;code&gt;[^1]&lt;/code&gt;, but if you ever rearrange paragraphs or add notes before #1, the numbering will be wrong (in your Markdown file, not in the output; everything will be correct in the output). Because of that, I prefer to use some sort of text label:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;Here is a footnote reference[^1] and here is another [^note-on-dags].

[^1]: This is a note.

[^note-on-dags]: DAGs are neat. 

And here&amp;#39;s more of the document.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;‚Ä¶to get‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is a footnote reference&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and here is another.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here‚Äôs more of the document.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;
&lt;p&gt;
This is a note.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;
&lt;p&gt;
DAGs are neat.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;You can also use inline footnotes with &lt;code&gt;^[Text of the note goes here]&lt;/code&gt;, which are often easier because you don‚Äôt need to worry about identifiers:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;Causal inference is neat.^[But it can be hard too!]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;‚Ä¶to get‚Ä¶&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Causal inference is neat.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;ol&gt;
&lt;li id=&#34;fn3&#34;&gt;
&lt;p&gt;
But it can be hard too!&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;front-matter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Front matter&lt;/h2&gt;
&lt;p&gt;You can include a special section at the top of a Markdown document that contains metadata (or data about your document) like the title, date, author, etc. This section uses a special simple syntax named &lt;a href=&#34;https://learn.getgrav.org/16/advanced/yaml&#34;&gt;YAML&lt;/a&gt; (or ‚ÄúYAML Ain‚Äôt Markup Language‚Äù) that follows this basic outline: &lt;code&gt;setting: value for setting&lt;/code&gt;. Here‚Äôs an example YAML metadata section. Note that it must start and end with three dashes (&lt;code&gt;---&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: Title of your document
date: &amp;quot;January 13, 2020&amp;quot;
author: &amp;quot;Your name&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can put the values inside quotes (like the date and name in the example above), or you can leave them outside of quotes (like the title in the example above). I typically use quotes just to be safe‚Äîif the value you‚Äôre using has a colon (&lt;code&gt;:&lt;/code&gt;) in it, it‚Äôll confuse Markdown since it‚Äôll be something like &lt;code&gt;title: My cool title: a subtitle&lt;/code&gt;, which has two colons. It‚Äôs better to do this:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;quot;My cool title: a subtitle&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to use quotes inside one of the values (e.g.¬†your document is &lt;code&gt;An evaluation of &#34;scare quotes&#34;&lt;/code&gt;), you can use single quotes instead:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;#39;An evaluation of &amp;quot;scare quotes&amp;quot;&amp;#39;
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;citations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Citations&lt;/h2&gt;
&lt;p&gt;One of the most powerful features of Markdown + pandoc is the ability to automatically cite things and generate bibliographies. to use citations, you need to create a &lt;a href=&#34;http://www.bibtex.org/&#34;&gt;BibTeX file&lt;/a&gt; (ends in &lt;code&gt;.bib&lt;/code&gt;) that contains a database of the things you want to cite. You can do this with bibliography managers designed to work with BibTeX directly (like &lt;a href=&#34;https://bibdesk.sourceforge.io/&#34;&gt;BibDesk&lt;/a&gt; on macOS), or you can use &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; (macOS and Windows) to export a &lt;code&gt;.bib&lt;/code&gt; file. You can &lt;a href=&#34;/reference/&#34;&gt;download an example &lt;code&gt;.bib&lt;/code&gt; file of all the readings from this class here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html&#34;&gt;Complete details for using citations can be found here&lt;/a&gt;. In brief, you need to do three things:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Add a &lt;code&gt;bibliography:&lt;/code&gt; entry to the YAML metadata:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: Title of your document
date: &amp;quot;January 13, 2020&amp;quot;
author: &amp;quot;Your name&amp;quot;
bibliography: name_of_file.bib
---&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose a citation style based on a CSL file. The default is Chicago author-date, but you can choose from 2,000+ &lt;a href=&#34;https://github.com/citation-style-language/styles&#34;&gt;at this repository&lt;/a&gt;. Download the CSL file, put it in your project folder, and add an entry to the YAML metadata (or provide a URL to the online version):&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: Title of your document
date: &amp;quot;January 13, 2020&amp;quot;
author: &amp;quot;Your name&amp;quot;
bibliography: name_of_file.bib
csl: &amp;quot;https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the most common CSLs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date.csl&#34;&gt;Chicago author-date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-note-bibliography.csl&#34;&gt;Chicago note-bibliography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography.csl&#34;&gt;Chicago full note-bibliography&lt;/a&gt; (no shortened notes or ibids)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl&#34;&gt;APA 7th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association.csl&#34;&gt;MLA 8th edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cite things in your document. &lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html&#34;&gt;Check the documentation for full details of how to do this&lt;/a&gt;. Essentially, you use &lt;code&gt;@citationkey&lt;/code&gt; inside square brackets (&lt;code&gt;[]&lt;/code&gt;):&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;51%&#34; /&gt;
&lt;col width=&#34;48%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type‚Ä¶&lt;/th&gt;
&lt;th&gt;‚Ä¶to get‚Ä¶&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Causal inference is neat [@Rohrer:2018; @AngristPischke:2015].&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causal inference is neat (Rohrer 2018; Angrist and Pischke 2015).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Causal inference is neat [see @Rohrer:2018, p. 34; also @AngristPischke:2015, chapter 1].&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causal inference is neat (see Rohrer 2018, 34; also Angrist and Pischke 2015, chap.¬†1).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Angrist and Pischke say causal inference is neat [-@AngristPischke:2015; see also @Rohrer:2018].&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Angrist and Pischke say causal inference is neat (2015; see also Rohrer 2018).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;@AngristPischke:2015 [chapter 1] say causal inference is neat, and @Rohrer:2018 agrees.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Angrist and Pischke (2015, chap.¬†1) say causal inference is neat, and Rohrer (2018) agrees.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After compiling, you should have a perfectly formatted bibliography added to the end of your document too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Angrist, Joshua D., and J√∂rn-Steffen Pischke. 2015. &lt;em&gt;Mastering ‚ÄôMetrics: The Path from Cause to Effect.&lt;/em&gt; Princeton, NJ: Princeton University Press.&lt;/p&gt;
&lt;p&gt;Rohrer, Julia M. 2018. ‚ÄúThinking Clearly About Correlations and Causation: Graphical Causal Models for Observational Data.‚Äù &lt;em&gt;Advances in Methods and Practices in Psychological Science&lt;/em&gt; 1 (1): 27‚Äì42. &lt;a href=&#34;https://doi.org/10.1177/2515245917745629&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1177/2515245917745629&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;other-references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other references&lt;/h2&gt;
&lt;p&gt;These websites have additional details and examples and practice tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commonmark.org/help/tutorial/&#34;&gt;&lt;strong&gt;CommonMark‚Äôs Markdown tutorial&lt;/strong&gt;&lt;/a&gt;: A quick interactive Markdown tutorial.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdowntutorial.com/&#34;&gt;&lt;strong&gt;Markdown tutorial&lt;/strong&gt;&lt;/a&gt;: Another interactive tutorial to practice using Markdown.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://packetlife.net/media/library/16/Markdown.pdf&#34;&gt;&lt;strong&gt;Markdown cheatsheet&lt;/strong&gt;&lt;/a&gt;: Useful one-page reminder of Markdown syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plain-text.co/&#34;&gt;&lt;strong&gt;The Plain Person‚Äôs Guide to Plain Text Social Science&lt;/strong&gt;&lt;/a&gt;: A comprehensive explanation and tutorial about why you should write data-based reports in Markdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualization</title>
      <link>/resource/visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/resource/visualization/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#interesting-and-excellent-real-world-examples&#34;&gt;Interesting and excellent real world examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-select-the-appropriate-chart-type&#34;&gt;How to select the appropriate chart type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#general-resources&#34;&gt;General resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualization-in-excel&#34;&gt;Visualization in Excel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualization-in-tableau&#34;&gt;Visualization in Tableau&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;interesting-and-excellent-real-world-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interesting and excellent real world examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.storiesbehindaline.com/&#34;&gt;The Stories Behind a Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowingdata.com/2017/06/28/australia-as-100-people/&#34;&gt;Australia as 100 people&lt;/a&gt;: You can make something like this with &lt;a href=&#34;https://d3js.org/&#34;&gt;d3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/civisanalytics/potato&#34;&gt;potato project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowingdata.com/2017/07/17/marrying-age-over-the-past-century/&#34;&gt;Marrying Later, Staying Single Longer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-select-the-appropriate-chart-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to select the appropriate chart type&lt;/h2&gt;
&lt;p&gt;Many people have created many useful tools for selecting the correct chart type for a given dataset or question. Here are some of the best:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datavizcatalogue.com/&#34;&gt;&lt;strong&gt;The Data Visualisation Catalogue&lt;/strong&gt;&lt;/a&gt;: Descriptions, explanations, examples, and tools for creating 60 different types of visualizations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://datavizproject.com/&#34;&gt;&lt;strong&gt;The Data Viz Project&lt;/strong&gt;&lt;/a&gt;: Descriptions and examples for 150 different types of visualizations. Also allows you to search by data shape and chart function (comparison, correlation, distribution, geographical, part to whole, trend over time, etc.).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.data-to-viz.com/&#34;&gt;&lt;strong&gt;From Data to Viz&lt;/strong&gt;&lt;/a&gt;: A decision tree for dozens of chart types with links to R and Python code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chartmaker.visualisingdata.com/&#34;&gt;&lt;strong&gt;The Chartmaker Directory&lt;/strong&gt;&lt;/a&gt;: Examples of how to create 51 different types of visualizations in 31 different software packages, including Excel, Tableau, and R.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shinyapps.stat.ubc.ca/r-graph-catalog/&#34;&gt;&lt;strong&gt;R Graph Catalog&lt;/strong&gt;&lt;/a&gt;: R code for 124 ggplot graphs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/essentials/&#34;&gt;&lt;strong&gt;Emery‚Äôs Essentials&lt;/strong&gt;&lt;/a&gt;: Descriptions and examples of 26 different chart types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;general-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;General resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.storytellingwithdata.com/&#34;&gt;&lt;strong&gt;Storytelling with Data&lt;/strong&gt;&lt;/a&gt;: Blog and site full of resources by Cole Nussbaumer Knaflic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/blog/&#34;&gt;&lt;strong&gt;Ann K. Emery‚Äôs blog&lt;/strong&gt;&lt;/a&gt;: Blog and tutorials by &lt;a href=&#34;https://twitter.com/AnnKEmery&#34;&gt;Ann Emery&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stephanieevergreen.com/&#34;&gt;&lt;strong&gt;Evergreen Data&lt;/strong&gt;&lt;/a&gt;: Helful resources by &lt;a href=&#34;https://twitter.com/evergreendata&#34;&gt;Stephanie Evergreen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://policyviz.com/&#34;&gt;&lt;strong&gt;PolicyViz&lt;/strong&gt;&lt;/a&gt;: Regular podcast and site full of helpful resources by &lt;a href=&#34;https://twitter.com/jschwabish&#34;&gt;Jon Schwabisch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.visualisingdata.com/&#34;&gt;&lt;strong&gt;Visualising Data&lt;/strong&gt;&lt;/a&gt;: Fantastic collection of visualization resources, articles, and tutorials by &lt;a href=&#34;https://twitter.com/visualisingdata&#34;&gt;Andy Kirk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://infowetrust.com/&#34;&gt;&lt;strong&gt;Info We Trust&lt;/strong&gt;&lt;/a&gt;: Detailed explorations of visualizations by &lt;a href=&#34;https://twitter.com/infowetrust&#34;&gt;RJ Andrews&lt;/a&gt;, including a &lt;a href=&#34;http://infowetrust.com/history/&#34;&gt;beautiful visual history of the field&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowingdata.com/&#34;&gt;&lt;strong&gt;FlowingData&lt;/strong&gt;&lt;/a&gt;: Blog by &lt;a href=&#34;https://twitter.com/flowingdata&#34;&gt;Nathan Yau&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.informationisbeautiful.net/&#34;&gt;&lt;strong&gt;Information is Beautiful&lt;/strong&gt;&lt;/a&gt;: Blog by &lt;a href=&#34;https://twitter.com/mccandelish&#34;&gt;David McCandless&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://junkcharts.typepad.com/&#34;&gt;&lt;strong&gt;Junk Charts&lt;/strong&gt;&lt;/a&gt;: Blog by &lt;a href=&#34;https://twitter.com/junkcharts&#34;&gt;Kaiser Fung&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://viz.wtf/&#34;&gt;&lt;strong&gt;WTF Visualizations&lt;/strong&gt;&lt;/a&gt;: Visualizations that make you ask ‚Äúwtf?‚Äù&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/checklist/&#34;&gt;&lt;strong&gt;The Data Visualization Checklist&lt;/strong&gt;&lt;/a&gt;: A helpful set of criteria for grading the effectiveness of a graphic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1kKRadOiF0LruItsvGA40fSDZkAQfCqC_Ela0gBdo8A4/edit&#34;&gt;&lt;strong&gt;Data Literacy Starter Kit&lt;/strong&gt;&lt;/a&gt;: Compilation of resources to become data literate by &lt;a href=&#34;http://lauracalloway.com/&#34;&gt;Laura Calloway&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seeingdata.org/&#34;&gt;&lt;strong&gt;Seeing Data&lt;/strong&gt;&lt;/a&gt;: A series of research projects about perceptions and visualizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-in-excel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization in Excel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stephanieevergreen.com/how-to/&#34;&gt;&lt;strong&gt;How to Build Data Visualizations in Excel&lt;/strong&gt;&lt;/a&gt;: Detailed tutorials for creating 14 different visualizations in Excel.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/category/visualizing-data/tutorials/&#34;&gt;&lt;strong&gt;Ann Emery‚Äôs tutorials&lt;/strong&gt;&lt;/a&gt;: Fantastic series of tutorials for creating charts in Excel.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-in-tableau&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization in Tableau&lt;/h2&gt;
&lt;p&gt;Because it is focused entirely on visualization (and because it‚Äôs a well-supported commercial product), Tableau has a &lt;a href=&#34;https://www.tableau.com/learn/training&#34;&gt;phenomenal library of tutorials and training videos&lt;/a&gt;. There‚Äôs &lt;a href=&#34;https://www.quora.com/What-are-some-good-video-tutorials-for-learning-Tableau&#34;&gt;a helpful collections of videos here&lt;/a&gt;, as well.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Final project</title>
      <link>/lab/final-project/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/lab/final-project/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-from-the-internet&#34;&gt;Data from the internet&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nonprofit-management&#34;&gt;Nonprofit management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#federal-state-and-local-government-management&#34;&gt;Federal, state, and local government management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#business-management&#34;&gt;Business management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-deliverables&#34;&gt;Final deliverables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#past-examples&#34;&gt;Past examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#travel-runs-in-yellowstone&#34;&gt;Travel runs in Yellowstone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#firefighter-fatalities&#34;&gt;Firefighter fatalities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scripture-use-by-the-killers&#34;&gt;Scripture use by &lt;em&gt;The Killers&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utah-nonprofits&#34;&gt;Utah nonprofits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#buckethead&#34;&gt;Buckethead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;You made it to the end of our whirlwind tour of data visualization principles! Congratulations!&lt;/p&gt;
&lt;p&gt;Now you get to show off all the tools you learned with a beautiful, truthful, narrative visualization.&lt;/p&gt;
&lt;p&gt;For your final project, you will take a dataset, explore it, tinker with it, and tell a nuanced story about it using at least three graphs.&lt;/p&gt;
&lt;p&gt;I want this project to be as useful for you and your future career as possible‚Äîyou‚Äôll hopefully want to show off your final project in a portfolio or during job interviews.&lt;/p&gt;
&lt;p&gt;Accordingly, you have some choice in what data you can use for this project. I‚Äôve found several different high-quality datasets online related to the core MPA/MPP tracks. &lt;strong&gt;You do not have to choose a dataset in your given field&lt;/strong&gt; (especially if you‚Äôre not an MPA or MPP student!) Choose whatever one you are most interested in or will have the most fun with.&lt;/p&gt;
&lt;div id=&#34;data-from-the-internet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data from the internet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/resource/data/&#34;&gt;Go to this list of data sources&lt;/a&gt; and find something interesting! The things in the ‚ÄúData is Plural‚Äù newsletter are often especially interesting and fun. Here are some different high-quality datasets that students have worked with before:&lt;/p&gt;
&lt;div id=&#34;nonprofit-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Nonprofit management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/crawford/us-charities-and-nonprofits&#34;&gt;U.S. Charities and Non-profits&lt;/a&gt;: All of the charities and nonprofits registered with the IRS. This is actually split into six separate files. You can combine them all into one massive national database with &lt;code&gt;bind_rows()&lt;/code&gt;, or filter the data to include specific states (or a single state). It all depends on the story you‚Äôre telling. Source: IRS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://data.world/causebot/grant-2010-to-2016&#34;&gt;Nonprofit Grants 2010 to 2016&lt;/a&gt;: Nonprofit grants made in the US as listed in Schedule I of the IRS 990 tax form between 2010 to 2016. Source: IRS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;federal-state-and-local-government-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Federal, state, and local government management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/kwullum/deadly-traffic-accidents-in-the-uk-2015&#34;&gt;Deadly traffic accidents in the UK (2015)&lt;/a&gt;: List of all traffic-related deaths in the UK in 2015. Source: &lt;a href=&#34;https://data.gov.uk/dataset/road-accidents-safety-data/resource/ceb00cff-443d-4d43-b17a-ee13437e9564&#34;&gt;data.gov.uk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/fema/firefighter-fatalities&#34;&gt;Firefighter Fatalities in the United States&lt;/a&gt;: Name, rank, and cause of death for all firefighters killed since 2000. Source: FEMA.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/fema/federal-disasters&#34;&gt;Federal Emergencies and Disasters, 1953‚ÄìPresent&lt;/a&gt;: Every federal emergency or disaster declared by the President of the United States since 1953. Source: FEMA.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/START-UMD/gtd&#34;&gt;Global Terrorism Database (1970‚Äì2016)&lt;/a&gt;: 170,000 terrorist attacks worldwide, 1970-2016. Source: National Consortium for the Study of Terrorism and Responses to Terrorism (START), University of Maryland.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://data.world/cityofaustin/i26j-ai4z&#34;&gt;City of Austin 311 Unified Data&lt;/a&gt;: All 311 calls to the City of Austin since 2014. Source: City of Austin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;business-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Business management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/jiashenliu/515k-hotel-reviews-data-in-europe&#34;&gt;515K Hotel Reviews Data in Europe&lt;/a&gt;: 515,000 customer reviews and scoring of 1,493 luxury hotels across Europe. Source: Booking.com.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/chasebank/bank-deposits&#34;&gt;Chase Bank Branch Deposits, 2010‚Äì2016&lt;/a&gt;: Records for every branch of Chase Bank in the United States. This dataset is not quite tidy and will require a little bit of reshaping with &lt;code&gt;gather()&lt;/code&gt; or &lt;code&gt;pivot_longer()&lt;/code&gt;, since there are individual columns of deposits per year. Source: Chase Bank.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here‚Äôs what you‚Äôll need to do:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; a dataset and explore it. Many of these datasets are large and will not open (well) in Excel, so you‚Äôll need to load the CSV file into R with &lt;code&gt;read_csv()&lt;/code&gt;. Most of these datasets have nice categorical variables that you can use for grouping and summarizing, and many have time components too, so you can look at trends. Your past problem sets and in-class examples will come in handy here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find&lt;/strong&gt; a story in the data. Explore that story and make sure it‚Äôs true and insightful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use R to &lt;strong&gt;create&lt;/strong&gt; multiple graphs to tell the story. You can make as many graphs as you want, but you must use at least &lt;strong&gt;three&lt;/strong&gt; different chart types (i.e.¬†don‚Äôt just make three scatterplots or three maps).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Export these figures as PDF files, place them in Adobe Illustrator (or InDesign or Gravit Designer or Inkscape), and &lt;strong&gt;make&lt;/strong&gt; one combined graphic or handout where you tell the complete story. You have a lot of latitude in how you do this. You can make a graphic-heavy one-page handout. You can make something along the lines of the &lt;a href=&#34;https://www.wired.co.uk/article/nuclear-power-reactors-global&#34;&gt;this&lt;/a&gt;, with one big graphic + smaller subgraphics + explanatory text. Just don‚Äôt make a &lt;a href=&#34;https://medium.com/@kazarnowicz/why-infographics-are-bad-3a2fa49673e2&#34;&gt;goofy infographic&lt;/a&gt;. Whatever you do, the final figure must include all the graphics, must have some explanatory text to help summarize the narrative, and must be well designed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export&lt;/strong&gt; the final graphic from Illustrator as a PDF and a PNG.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; a memo using R Markdown to introduce, frame, and describe your story and figure. &lt;a href=&#34;/files/your_name_finalproject.Rmd&#34;&gt;Use this template to get started&lt;/a&gt;. You should include the following in the memo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executive summary&lt;/li&gt;
&lt;li&gt;Background information and summary of the data&lt;/li&gt;
&lt;li&gt;Explanation, description, and code for each individual figure&lt;/li&gt;
&lt;li&gt;Explanation and description for the final figure&lt;/li&gt;
&lt;li&gt;Final figure should be included as an image (remember &lt;code&gt;![Caption goes here](path/to/file.png)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember to follow R Markdown etiquette rules and style‚Äîdon‚Äôt have it output extraneous messages or warnings, include summary tables in nice tables, adjust the dimensions for your figures, and remove the placeholder text that‚Äôs in the template already (i.e.¬†I don‚Äôt want to see stuff like ‚ÄúDescribe and show how you cleaned and reshaped the data‚Äù in the final report.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You should &lt;a href=&#34;/projects/example_final.zip&#34;&gt;download a full example of what a final project might look like&lt;/a&gt;&lt;/strong&gt; (but don‚Äôt make your final combined visualization look exactly like this‚Äîshow some creativity!)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-deliverables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final deliverables&lt;/h2&gt;
&lt;p&gt;Upload the following files to iCollege:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A memo introducing and describing your final graphic (see full instructions above)&lt;/li&gt;
&lt;li&gt;A standalone PDF of your graphic exported from Illustrator&lt;/li&gt;
&lt;li&gt;A standalone PNG of your graphic exported from Illustrator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;No late work will be accepted for this project since it‚Äôs the last project and it counts as your final.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will use &lt;a href=&#34;/files/final-project-rubric.xlsx&#34;&gt;this rubric&lt;/a&gt; to grade the final product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/files/final-project-rubric.xlsx&#34;&gt;&lt;i class=&#34;fas fa-file-excel&#34;&gt;&lt;/i&gt; &lt;code&gt;final-project-rubric.xlsx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am happy to give feedback and help along the way‚Äîplease don‚Äôt hesitate to get help! My goal is for you to have a beautiful graphic in the end that you‚Äôll want to show off to all your friends, family, neighbors, employers, and strangers on the street‚ÄîI‚Äôm not trying to trip you up or give you trick questions!&lt;/p&gt;
&lt;p&gt;And that‚Äôs it. &lt;strong&gt;You‚Äôre done!&lt;/strong&gt; Go out into the world now and make beautiful, insightful, and truthful graphics.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://24ways.org/2010/go-forth-and-make-awesomeness/&#34;&gt;&lt;strong&gt;Go forth and make awesomeness.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;past-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Past examples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/projects/example_final.zip&#34;&gt;Download a full example of what a final project might look like.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some great examples of student projects from past versions of this class.&lt;/p&gt;
&lt;div id=&#34;travel-runs-in-yellowstone&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Travel runs in Yellowstone&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/yellowstone-travel/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/yellowstone-travel/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/yellowstone-travel/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/yellowstone-travel/final.pdf&#34;&gt;&lt;img src=&#34;/files/past-projects/yellowstone-travel/final.png&#34; alt=&#34;Yellowstone travel final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;firefighter-fatalities&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Firefighter fatalities&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/firefighters/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/firefighters/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/firefighters/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/firefighters/final.pdf&#34;&gt;&lt;img src=&#34;/files/past-projects/firefighters/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scripture-use-by-the-killers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scripture use by &lt;em&gt;The Killers&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/killers-scripture/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/killers-scripture/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/killers-scripture/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/killers-scripture/final.pdf&#34;&gt;&lt;img src=&#34;/files/past-projects/killers-scripture/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;utah-nonprofits&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Utah nonprofits&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/utah-nonprofits/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/utah-nonprofits/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/utah-nonprofits/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/utah-nonprofits/final.pdf&#34;&gt;&lt;img src=&#34;/files/past-projects/utah-nonprofits/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;buckethead&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Buckethead&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/buckethead/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/buckethead/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt;‚ÄÇ
&lt;a href=&#34;/files/past-projects/buckethead/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/files/past-projects/buckethead/final.pdf&#34;&gt;&lt;img src=&#34;/files/past-projects/buckethead/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping data to graphics</title>
      <link>/example/03-example/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/03-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-and-clean-data&#34;&gt;Load and clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#histograms&#34;&gt;Histograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#points&#34;&gt;Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boxplots&#34;&gt;Boxplots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summaries&#34;&gt;Summaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, I‚Äôm going to use real world data to demonstrate the typical process for loading data, cleaning it up a bit, and mapping specific columns of the data onto the parts of a graph using the grammar of graphics and &lt;code&gt;ggplot()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The data I‚Äôll use comes from the BBC‚Äôs corporate charity, &lt;a href=&#34;https://www.bbcchildreninneed.co.uk/&#34;&gt;BBC Children in Need&lt;/a&gt;, which makes grants to smaller UK nonprofit organizations that work on issues related to childhood poverty. An organization in the UK named &lt;a href=&#34;https://www.threesixtygiving.org/&#34;&gt;360Giving&lt;/a&gt; helps nonprofits and foundations publish data about their grant giving activities in an open and standardized way, and (as of May 2020) &lt;a href=&#34;http://data.threesixtygiving.org/&#34;&gt;they list data from 126 different charities&lt;/a&gt;, including BBC Children in Need.&lt;/p&gt;
&lt;p&gt;If you want to follow along with this example (highly recommended!), you can download the data directly from &lt;a href=&#34;http://data.threesixtygiving.org/&#34;&gt;360Giving&lt;/a&gt; or by using this link:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/360-giving-data.xlsx&#34;&gt;&lt;i class=&#34;fas fa-file-excel&#34;&gt;&lt;/i&gt; &lt;code&gt;360-giving-data.xlsx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: I got carried away with this because I wanted to make it as comprehensive and detailed as possible, so it starts off with nothing and walks through the process of downloading data, creating a new project, and getting everything started. As such, it is ridiculously long (1 hour üò± üò±). Remember that there‚Äôs no requirement that you watch these things‚Äîthey‚Äôre simply for your reference so you can see what doing this R stuff looks like in real time. The content all below the video is roughly the same (more polished even).&lt;/p&gt;
&lt;p&gt;That said, it &lt;em&gt;is&lt;/em&gt; a useful demonstration of how to get everything started and what it looks like to do an entire analysis, so there is value in it. Watch just the first part, or watch it on 2x or something.&lt;/p&gt;
&lt;p&gt;And I &lt;em&gt;promise&lt;/em&gt; future examples will not be this long!&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/2N04T-3kZfw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load and clean data&lt;/h3&gt;
&lt;p&gt;First, we need to load a few libraries: &lt;strong&gt;tidyverse&lt;/strong&gt; (as always), along with &lt;strong&gt;readxl&lt;/strong&gt; for reading Excel files and &lt;strong&gt;lubridate&lt;/strong&gt; for working with dates:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load libraries
library(tidyverse)  # For ggplot, dplyr, and friends
library(readxl)     # For reading Excel files
library(lubridate)  # For working with dates&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We‚Äôll then load the original Excel file. I placed this file in a folder named &lt;code&gt;data&lt;/code&gt; in my RStudio Project folder for this example. I like to read original data into an object named &lt;code&gt;whatever_raw&lt;/code&gt; just in case it takes a long time to load (that way I don‚Äôt have to keep reloading it every time I add a new column or do anything else with it). It‚Äôs also good practice to keep a pristine, untouched copy of your data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load the original Excel file
bbc_raw &amp;lt;- read_excel(&amp;quot;data/360-giving-data.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There may be some errors reading the file‚Äîyou can ignore those in this case.&lt;/p&gt;
&lt;p&gt;Next we‚Äôll add a couple columns and clean up the data a little. In the video I did this non-linearly‚ÄîI came back to the top of the document to add columns when I needed them and then reran the chunk to create the data.&lt;/p&gt;
&lt;p&gt;We‚Äôll extract the year from the Award Date column, rename some of the longer-named columns, and make a new column that shows the duration of grants. We‚Äôll also get rid of 2015 since there are so few observations then.&lt;/p&gt;
&lt;p&gt;Note the strange use of &lt;code&gt;`&lt;/code&gt;s around column names like &lt;code&gt;`Award Date`&lt;/code&gt;. This is because R technically doesn‚Äôt allow special characters like spaces in column names. If there are spaces, you have to wrap the column names in backticks. Because typing backticks all the time gets tedious, we‚Äôll use &lt;code&gt;rename()&lt;/code&gt; to rename some of the columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bbc &amp;lt;- bbc_raw %&amp;gt;% 
  # Extract the year from the award date
  mutate(grant_year = year(`Award Date`)) %&amp;gt;% 
  # Rename some columns
  rename(grant_amount = `Amount Awarded`,
         grant_program = `Grant Programme:Title`,
         grant_duration = `Planned Dates:Duration (months)`) %&amp;gt;% 
  # Make a new text-based version of the duration column, recoding months
  # between 12-23, 23-35, and 36+. The case_when() function here lets us use
  # multiple if/else conditions at the same time.
  mutate(grant_duration_text = case_when(
    grant_duration &amp;gt;= 12 &amp;amp; grant_duration &amp;lt; 24 ~ &amp;quot;1 year&amp;quot;,
    grant_duration &amp;gt;= 24 &amp;amp; grant_duration &amp;lt; 36 ~ &amp;quot;2 years&amp;quot;,
    grant_duration &amp;gt;= 36 ~ &amp;quot;3 years&amp;quot;
  )) %&amp;gt;% 
  # Get rid of anything before 2016
  filter(grant_year &amp;gt; 2015) %&amp;gt;% 
  # Make a categorical version of the year column
  mutate(grant_year_category = factor(grant_year))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;histograms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Histograms&lt;/h3&gt;
&lt;p&gt;First let‚Äôs look at the distribution of grant amounts with a histogram. Map &lt;code&gt;grant_amount&lt;/code&gt; to the x-axis and don‚Äôt map anything to the y-axis, since &lt;code&gt;geom_histogram()&lt;/code&gt; will calculate the y-axis values for us:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = bbc, mapping = aes(x = grant_amount)) +
  geom_histogram()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/hist-basic-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice that ggplot warns you about bin widths. By default it will divide the data into 30 equally spaced bins, which will most likely not be the best for your data. You should &lt;em&gt;always&lt;/em&gt; set your own bin width to something more appropriate. There are no rules for correct bin widths. Just don‚Äôt have them be too wide:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = bbc, mapping = aes(x = grant_amount)) +
  geom_histogram(binwidth = 100000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/hist-wide-bin-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or too small:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = bbc, mapping = aes(x = grant_amount)) +
  geom_histogram(binwidth = 500)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/hist-tiny-bins-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;¬£10,000 seems to fit well. It‚Äôs often helpful to add a white border to the histogram bars, too:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = bbc, mapping = aes(x = grant_amount)) +
  geom_histogram(binwidth = 10000, color = &amp;quot;white&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/hist-good-bins-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can map other variables onto the plot, like mapping &lt;code&gt;grant_year_category&lt;/code&gt; to the fill aesthetic:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_amount, fill = grant_year_category)) +
  geom_histogram(binwidth = 10000, color = &amp;quot;white&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/hist-bad-fill-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That gets really hard to interpret though, so we can facet by year with &lt;code&gt;facet_wrap()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_amount, fill = grant_year_category)) +
  geom_histogram(binwidth = 10000, color = &amp;quot;white&amp;quot;) +
  facet_wrap(vars(grant_year))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/hist-facet-fill-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;points&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Points&lt;/h3&gt;
&lt;p&gt;Next let‚Äôs look at the data using points, mapping year to the x-axis and grant amount to the y-axis:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/points-initial-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have some serious overplotting here, with dots so thick that it looks like lines. We can fix this a couple different ways. First, we can make the points semi-transparent using &lt;code&gt;alpha&lt;/code&gt;, which ranges from 0 (completely invisible) to 1 (completely solid).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +
  geom_point(alpha = 0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/points-alpha-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also randomly space the points to spread them out using &lt;code&gt;position_jitter()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +
  geom_point(position = position_jitter())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/points-jitter-default-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One issue with this, though, is that the points are jittered along the x-axis (which is fine, since they‚Äôre all within the same year) &lt;em&gt;and&lt;/em&gt; the y-axis (which is bad, since the amounts are actual numbers). We can tell ggplot to only jitter in one direction by specifying the &lt;code&gt;height&lt;/code&gt; argument‚Äîwe don‚Äôt want any up-and-down jittering:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_year_category, y = grant_amount)) +
  geom_point(position = position_jitter(height = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/points-jitter-horizontal-only-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are some weird clusters around ¬£30,000 and below. Let‚Äôs map &lt;code&gt;grant_program&lt;/code&gt; to the color aesthetic, which has two categories‚Äîregular grants and small grants‚Äîand see if that helps explain why:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_year_category, y = grant_amount, color = grant_program)) +
  geom_point(position = position_jitter(height = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/points-jitter-color-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It does! We appear to have two different distributions of grants: small grants have a limit of ¬£30,000, while regular grants have a much higher average amount.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Boxplots&lt;/h3&gt;
&lt;p&gt;We can add summary information to the plot by only changing the &lt;code&gt;geom&lt;/code&gt; we‚Äôre using. Switch from &lt;code&gt;geom_point()&lt;/code&gt; to &lt;code&gt;geom_boxplot()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc, aes(x = grant_year_category, y = grant_amount, color = grant_program)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/boxplot-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summaries&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summaries&lt;/h3&gt;
&lt;p&gt;We can also make smaller summarized datasets with &lt;strong&gt;dplyr&lt;/strong&gt; functions like &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; and plot those. First let‚Äôs look at grant totals, averages, and counts over time:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bbc_by_year &amp;lt;- bbc %&amp;gt;% 
  group_by(grant_year) %&amp;gt;%  # Make invisible subgroups for each year
  summarize(total = sum(grant_amount),  # Find the total awarded in each group
            avg = mean(grant_amount),  # Find the average awarded in each group
            number = n())  # n() is a special function that shows the number of rows in each group

# Look at our summarized data
bbc_by_year&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
##   grant_year    total    avg number
##        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
## 1       2016 17290488 78238.    221
## 2       2017 62394278 59765.   1044
## 3       2018 61349392 60205.   1019
## 4       2019 41388816 61136.    677&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we used &lt;code&gt;summarize()&lt;/code&gt;, R shrank our data down significantly. We now only have a row for each of the subgroups we made: one for each year. We can plot this smaller data. We‚Äôll use &lt;code&gt;geom_col()&lt;/code&gt; for now (but in tomorrow‚Äôs session you‚Äôll learn why this is actually bad for averages!)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot our summarized data
ggplot(bbc_by_year, aes(x = grant_year, y = avg)) +
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-summaries-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_by_year, aes(x = grant_year, y = total)) +
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-summaries-2.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_by_year, aes(x = grant_year, y = number)) +
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-summaries-3.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on these charts, it looks like 2016 saw the largest average grant amount. In all other years, grants averaged around ¬£60,000, but in 2016 it jumped up to ¬£80,000. If we look at total grants, though, we can see that there were far fewer grants awarded in 2016‚Äîonly 221! 2017 and 2018 were much bigger years with far more money awarded.&lt;/p&gt;
&lt;p&gt;We can also use multiple aesthetics to reveal more information from the data. First we‚Äôll make a new small summary dataset and group by both year and grant program. With those groups, we‚Äôll again calculate the total, average, and number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bbc_year_size &amp;lt;- bbc %&amp;gt;% 
  group_by(grant_year, grant_program) %&amp;gt;% 
  summarize(total = sum(grant_amount),
            avg = mean(grant_amount),
            number = n())

bbc_year_size&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 5
## # Groups:   grant_year [4]
##   grant_year grant_program    total    avg number
##        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
## 1       2016 Main Grants   16405586 86345.    190
## 2       2016 Small Grants    884902 28545.     31
## 3       2017 Main Grants   48502923 90154.    538
## 4       2017 Small Grants  13891355 27453.    506
## 5       2018 Main Grants   47347789 95652.    495
## 6       2018 Small Grants  14001603 26721.    524
## 7       2019 Main Grants   33019492 96267.    343
## 8       2019 Small Grants   8369324 25058.    334&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we‚Äôll plot the data, mapping the &lt;code&gt;grant_program&lt;/code&gt; column to the &lt;code&gt;fill&lt;/code&gt; aesthetic:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-size-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By default, ggplot will stack the different fill colors within the same bar, but this makes it a little hard to make comparisons. While we can see that the average small grant amount was a little bigger in 2017 than in 2019, it‚Äôs harder to compare average main grant amount, since the bottoms of those sections don‚Äôt align.&lt;/p&gt;
&lt;p&gt;To fix this, we can use &lt;code&gt;position_dodge()&lt;/code&gt; to tell the columns to fit side-by-side:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +
  geom_col(position = position_dodge())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-size-dodge-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Instead of dodging, we can also facet by &lt;code&gt;grant_program&lt;/code&gt; to separate the bars:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +
  geom_col() +
  facet_wrap(vars(grant_program))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-size-facet-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can put these in one column if we want:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_year_size, aes(x = grant_year, y = total, fill = grant_program)) +
  geom_col() +
  facet_wrap(vars(grant_program), ncol = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-size-col-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can include even more variables! We have a lot of aesthetics we can work with (&lt;code&gt;size&lt;/code&gt;, &lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;linetype&lt;/code&gt;, etc.), as well as facets, so let‚Äôs add one more to show the duration of the awarded grant.&lt;/p&gt;
&lt;p&gt;First we‚Äôll make another smaller summarized dataset, grouping by year, program, and duration and summarizing the total, average, and number of awards.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bbc_year_size_duration &amp;lt;- bbc %&amp;gt;% 
  group_by(grant_year, grant_program, grant_duration_text) %&amp;gt;% 
  summarize(total = sum(grant_amount),
            avg = mean(grant_amount),
            number = n())

bbc_year_size_duration&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 6
## # Groups:   grant_year, grant_program [8]
##    grant_year grant_program grant_duration_text    total    avg number
##         &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
##  1       2016 Main Grants   2 years                97355 48678.      2
##  2       2016 Main Grants   3 years             16308231 86746.    188
##  3       2016 Small Grants  3 years               884902 28545.     31
##  4       2017 Main Grants   1 year                 59586 29793       2
##  5       2017 Main Grants   2 years               825732 82573.     10
##  6       2017 Main Grants   3 years             47617605 90528.    526
##  7       2017 Small Grants  1 year                 10000 10000       1
##  8       2017 Small Grants  2 years               245227 18864.     13
##  9       2017 Small Grants  3 years             13636128 27716.    492
## 10       2018 Main Grants   1 year                118134 59067       2
## # ‚Ä¶ with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we‚Äôll fill by grant program and facet by duration and show the total number of grants awarded&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(bbc_year_size_duration, aes(x = grant_year, y = number, fill = grant_program)) +
  geom_col(position = position_dodge(preserve = &amp;quot;single&amp;quot;)) +
  facet_wrap(vars(grant_duration_text), ncol = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/03-example_files/figure-html/plot-year-size-duration-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The vast majority of BBC Children in Need‚Äôs grants last for 3 years. Super neat.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping data to graphics</title>
      <link>/lab/03-exercise/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/03-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-lord-of-the-rings&#34;&gt;Task 2: Lord of the Rings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;You‚Äôll be doing all your R work in R Markdown this time (and from now on). You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to download three CSV files and put them somewhere on your computer or upload them to RStudio.cloud‚Äîpreferably in a folder named &lt;code&gt;data&lt;/code&gt; in your project folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/03-exercise/data/The_Fellowship_Of_The_Ring.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;The_Fellowship_Of_The_Ring.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/projects/03-exercise/data/The_Two_Towers.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;The_Two_Towers.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/projects/03-exercise/data/The_Return_Of_The_King.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;The_Return_Of_The_King.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To help you, I‚Äôve created a skeleton R Markdown file with a template for this exercise. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/03-exercise/03-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;03-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  03-exercise.Rmd
  your-project-name.Rproj
  data\
    The_Fellowship_Of_The_Ring.csv
    The_Two_Towers.csv
    The_Return_Of_The_King.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/03-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;03-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-lord-of-the-rings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Lord of the Rings&lt;/h2&gt;
&lt;p&gt;Answer the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; on the &lt;code&gt;lotr&lt;/code&gt; data to find the total number of words spoken by race. &lt;em&gt;Don‚Äôt worry about plotting it&lt;/em&gt;. How many words did male hobbits say in the movies?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; to answer these questions &lt;em&gt;with bar plots&lt;/em&gt; (&lt;code&gt;geom_col()&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Does a certain race dominate the entire trilogy? (hint: group by &lt;code&gt;Race&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does a certain gender dominate a movie? (lolz of course it does, but still, graph it) (Hint: group by both &lt;code&gt;Gender&lt;/code&gt; and &lt;code&gt;Film&lt;/code&gt;.) Experiment with filling by &lt;code&gt;Gender&lt;/code&gt; or &lt;code&gt;Film&lt;/code&gt; and faceting by &lt;code&gt;Gender&lt;/code&gt; or &lt;code&gt;Film&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does the dominant race differ across the three movies? (Hint: group by both &lt;code&gt;Race&lt;/code&gt; and &lt;code&gt;Film&lt;/code&gt;.) Experiment with filling by &lt;code&gt;Race&lt;/code&gt; or &lt;code&gt;Film&lt;/code&gt; and faceting by &lt;code&gt;Race&lt;/code&gt; or &lt;code&gt;Film&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a plot that visualizes the number of words spoken by race, gender, and film simultaneously. Use the complete tidy &lt;code&gt;lotr&lt;/code&gt; data frame. You don‚Äôt need to create a new summarized dataset (with &lt;code&gt;group_by(Race, Gender, Film)&lt;/code&gt;) because the original data already has a row for each of those (you could make a summarized dataset, but it would be identical to the full version).&lt;/p&gt;
&lt;p&gt;You need to show &lt;code&gt;Race&lt;/code&gt;, &lt;code&gt;Gender&lt;/code&gt;, and &lt;code&gt;Film&lt;/code&gt; at the same time, but you only have two possible aesthetics (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;fill&lt;/code&gt;), so you‚Äôll also need to facet by the third. Play around with different combinations (e.g.¬†try &lt;code&gt;x = Race&lt;/code&gt;, then &lt;code&gt;x = Film&lt;/code&gt;) until you find one that tells the clearest story. For fun, add a &lt;code&gt;labs()&lt;/code&gt; layer to add a title and subtitle and caption.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using R Markdown</title>
      <link>/resource/rmarkdown/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/resource/rmarkdown/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#key-terms&#34;&gt;Key terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-chunks&#34;&gt;Add chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chunk-names&#34;&gt;Chunk names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chunk-options&#34;&gt;Chunk options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inline-chunks&#34;&gt;Inline chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#output-formats&#34;&gt;Output formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown&lt;/a&gt; is &lt;a href=&#34;/reference/markdown/&#34;&gt;regular Markdown&lt;/a&gt; with R code and output sprinkled in. You can do everything you can with &lt;a href=&#34;/reference/markdown/&#34;&gt;regular Markdown&lt;/a&gt;, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;interactive dashboards&lt;/a&gt; with R Markdown. This whole course website is created with R Markdown (and &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;a package named &lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;documentation for R Markdown&lt;/a&gt; is extremely comprehensive, and their &lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-1.html&#34;&gt;tutorials&lt;/a&gt; and &lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-15.html&#34;&gt;cheatsheets&lt;/a&gt; are excellent‚Äîrely on those.&lt;/p&gt;
&lt;p&gt;Here are the most important things you‚Äôll need to know about R Markdown in this class:&lt;/p&gt;
&lt;div id=&#34;key-terms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Key terms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Document&lt;/strong&gt;: A Markdown file where you type stuff&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chunk&lt;/strong&gt;: A piece of R code that is included in your document. It looks like this:&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r}
# Code goes here
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There must be an empty line before and after the chunk. The final three backticks must be the only thing on the line‚Äîif you add more text, or if you forget to add the backticks, or accidentally delete the backticks, your document will not knit correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Knit&lt;/strong&gt;: When you ‚Äúknit‚Äù a document, R runs each of the chunks sequentially and converts the output of each chunk into Markdown. R then runs the knitted document through &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt; to convert it to HTML or PDF or Word (or whatever output you‚Äôve selected).&lt;/p&gt;
&lt;p&gt;You can knit by clicking on the ‚ÄúKnit‚Äù button at the top of the editor window, or by pressing &lt;code&gt;‚åò‚áßK&lt;/code&gt; on macOS or &lt;code&gt;control + shift + K&lt;/code&gt; on Windows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;add-chunks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add chunks&lt;/h2&gt;
&lt;p&gt;There are three ways to insert chunks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;‚åò‚å•I&lt;/code&gt; on macOS or &lt;code&gt;control + alt + I&lt;/code&gt; on Windows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the ‚ÄúInsert‚Äù button at the top of the editor window&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reference/insert-chunk.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manually type all the backticks and curly braces (don‚Äôt do this)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;chunk-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chunk names&lt;/h2&gt;
&lt;p&gt;You can add names to chunks to make it easier to navigate your document. If you click on the little dropdown menu at the bottom of your editor in RStudio, you can see a table of contents that shows all the headings and chunks. If you name chunks, they‚Äôll appear in the list. If you don‚Äôt include a name, the chunk will still show up, but you won‚Äôt know what it does.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reference/chunk-toc.png&#34; width=&#34;40%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To add a name, include it immediately after the &lt;code&gt;{r&lt;/code&gt; in the first line of the chunk. Names cannot contain spaces, but they can contain underscores and dashes. &lt;strong&gt;All chunk names in your document must be unique.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r name-of-this-chunk}
# Code goes here
```&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chunk-options&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chunk options&lt;/h2&gt;
&lt;p&gt;There are a bunch of different options you can set for each chunk. You can see a complete list in the &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf&#34;&gt;RMarkdown Reference Guide&lt;/a&gt; or at &lt;a href=&#34;https://yihui.org/knitr/options/&#34;&gt;&lt;strong&gt;knitr&lt;/strong&gt;‚Äôs website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Options go inside the &lt;code&gt;{r}&lt;/code&gt; section of the chunk:&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r name-of-this-chunk, warning=FALSE, message=FALSE}
# Code goes here
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most common chunk options are these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig.width=5&lt;/code&gt; and &lt;code&gt;fig.height=3&lt;/code&gt; (&lt;em&gt;or whatever number you want&lt;/em&gt;): Set the dimensions for figures&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo=FALSE&lt;/code&gt;: The code is not shown in the final document, but the results are&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message=FALSE&lt;/code&gt;: Any messages that R generates (like all the notes that appear after you load a package) are omitted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;warning=FALSE&lt;/code&gt;: Any warnings that R generates are omitted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include=FALSE&lt;/code&gt;: The chunk still runs, but the code and results are not included in the final document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also set chunk options by clicking on the little gear icon in the top right corner of any chunk:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reference/chunk-options.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inline-chunks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inline chunks&lt;/h2&gt;
&lt;p&gt;You can also include R output directly in your text, which is really helpful if you want to report numbers from your analysis. To do this, use &lt;code&gt;`r r_code_here`&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It‚Äôs generally easiest to calculate numbers in a regular chunk beforehand and then use an inline chunk to display the value in your text. For instance, this document‚Ä¶&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r find-avg-mpg, echo=FALSE}
avg_mpg &amp;lt;- mean(mtcars$mpg)
```

The average fuel efficiency for cars from 1974 was `r round(avg_mpg, 1)` miles per gallon.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚Ä¶ would knit into this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The average fuel efficiency for cars from 1974 was 20.1 miles per gallon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;output-formats&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Output formats&lt;/h2&gt;
&lt;p&gt;You can specify what kind of document you create when you knit in the &lt;a href=&#34;/reference/markdown/#front-matter&#34;&gt;YAML front matter&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;title: &amp;quot;My document&amp;quot;
output:
  html_document: default
  pdf_document: default
  word_document: default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also click on the down arrow on the ‚ÄúKnit‚Äù button to choose the output &lt;em&gt;and&lt;/em&gt; generate the appropriate YAML. If you click on the gear icon next to the ‚ÄúKnit‚Äù button and choose ‚ÄúOutput options‚Äù, you change settings for each specific output type, like default figure dimensions or whether or not a table of contents is included.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/reference/output-options.png&#34; width=&#34;35%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The first output type listed under &lt;code&gt;output:&lt;/code&gt; will be what is generated when you click on the ‚ÄúKnit‚Äù button or press the keyboard shortcut (&lt;code&gt;‚åò‚áßK&lt;/code&gt; on macOS; &lt;code&gt;control + shift + K&lt;/code&gt; on Windows). If you choose a different output with the ‚ÄúKnit‚Äù button menu, that output will be moved to the top of the &lt;code&gt;output&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;The indentation of the YAML section matters, especially when you have settings nested under each output type. Here‚Äôs what a typical &lt;code&gt;output&lt;/code&gt; section might look like:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;quot;My document&amp;quot;
author: &amp;quot;My name&amp;quot;
date: &amp;quot;January 13, 2020&amp;quot;
output: 
  html_document: 
    toc: yes
    fig_caption: yes
    fig_height: 8
    fig_width: 10
  pdf_document: 
    latex_engine: xelatex  # More modern PDF typesetting engine
    toc: yes
  word_document: 
    toc: yes
    fig_caption: yes
    fig_height: 4
    fig_width: 5
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R</title>
      <link>/resource/r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/resource/r/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#learning-r&#34;&gt;Learning R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-in-the-wild&#34;&gt;R in the wild&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;learning-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Learning R&lt;/h2&gt;
&lt;p&gt;I highly recommend subscribing to the &lt;a href=&#34;https://rweekly.org/&#34;&gt;R Weekly newsletter&lt;/a&gt;. This e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.&lt;/p&gt;
&lt;p&gt;Searching for help with R on Google can sometimes be tricky because the program name is a single letter. Google is generally smart enough to figure out what you mean when you search for ‚Äúr scatterplot‚Äù, but if it does struggle, try searching for ‚Äúrstats‚Äù instead (e.g.¬†‚Äúrstats scatterplot‚Äù). Also, since most of your R work in this class will deal with &lt;strong&gt;ggplot2&lt;/strong&gt;, it‚Äôs often easier to just search for that instead of the letter ‚Äúr‚Äù (e.g.¬†‚Äúggplot scatterplot‚Äù).&lt;/p&gt;
&lt;p&gt;If you use Twitter, post R-related questions and content with &lt;a href=&#34;https://twitter.com/search?q=%23rstats&#34;&gt;#rstats&lt;/a&gt;. The community there is exceptionally generous and helpful. Also check out &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; (a Q&amp;amp;A site with hundreds of thousands of answers to all sorts of programming questions) and &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt; (a forum specifically designed for people using RStudio and the tidyverse (i.e.¬†you)).&lt;/p&gt;
&lt;p&gt;These resources are also really really helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;&lt;strong&gt;R for Data Science&lt;/strong&gt;&lt;/a&gt;: A free online book for learning the basics of R and the tidyverse.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;&lt;strong&gt;R and RStudio cheat sheets&lt;/strong&gt;&lt;/a&gt;: A large collection of simple cheat sheets for RStudio, &lt;strong&gt;ggplot2&lt;/strong&gt;, and other R-related things.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stat545.com/&#34;&gt;&lt;strong&gt;Stat 545&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://twitter.com/JennyBryan&#34;&gt;Dr.¬†Jenny Bryan&lt;/a&gt; at RStudio has an entire introductory course in R, visualization, and data analysis online.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.stat.duke.edu/courses/Fall17/sta112.01/&#34;&gt;&lt;strong&gt;STA 112FS: Data Science&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://twitter.com/minebocek&#34;&gt;Dr.¬†Mine √áetinkaya-Rundel&lt;/a&gt; at the University of Edinburgh / Duke University has an entire introductory course in R, visualization, and data science online.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cslu.ohsu.edu/~bedricks/courses/cs631/&#34;&gt;&lt;strong&gt;CSE 631: Principles &amp;amp; Practice of Data Visualization&lt;/strong&gt;&lt;/a&gt;: Yet another introductory course for R and ggplot2 by &lt;a href=&#34;https://twitter.com/apreshill&#34;&gt;Dr.¬†Alison Presmanes Hill&lt;/a&gt; at RStudio.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;r-in-the-wild&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R in the wild&lt;/h2&gt;
&lt;p&gt;A popular (and increasingly standard) way for sharing your analyses and visualizations is to post an annotated explanation of your process somewhere online. RStudio allows you to publish knitted HTML files directly to &lt;a href=&#34;http://rpubs.com/&#34;&gt;RPubs&lt;/a&gt;, but you can also post your output to a blog or other type of website.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Reading these kinds of posts is one of the best ways to learn R, since they walk you through each step of the process &lt;em&gt;and&lt;/em&gt; show the code and output.&lt;/p&gt;
&lt;p&gt;Here are some of the best examples I‚Äôve come across:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://varianceexplained.org/r/trump-tweets/&#34;&gt;Text analysis of Trump‚Äôs tweets confirms he writes only the (angrier) Android half&lt;/a&gt; (with a &lt;a href=&#34;http://varianceexplained.org/r/trump-followup/&#34;&gt;follow-up&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/bob_ross.html&#34;&gt;Bob Ross - Joy of Painting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/bechdel.html&#34;&gt;Bechdel analysis using the tidyverse&lt;/a&gt;: There are also a bunch of other examples &lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/&#34;&gt;using data from FiveThirtyEight&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/Jwhitman/Final_Project&#34;&gt;Sexism on the Silver Screen: Exploring film‚Äôs gender divide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://soc301s2017.netlify.com/group_projects/group5&#34;&gt;Comparison of Quentin Tarantino Movies by Box Office and the Bechdel Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juliasilge.com/blog/who-came-to-vote/&#34;&gt;Who came to vote in Utah‚Äôs caucuses?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juliasilge.com/blog/health-care-indicators/&#34;&gt;Health care indicators in Utah counties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juliasilge.com/blog/song-lyrics-across/&#34;&gt;Song lyrics across the United States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.karawoo.com/2016/09/22/A-decade-ish-of-listening-to-Sigur-Ros&#34;&gt;A decade (ish) of listening to Sigur R√≥s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/ry_lisa_elana/chicago&#34;&gt;When is Tom peeping these days?&lt;/a&gt;: There are a also bunch of final projects from other R and data visualization classes &lt;a href=&#34;http://soc301s2017.netlify.com/group-projects/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://rudeboybert.github.io/MATH116/PS/final_project/final_project_outline.html#past_examples&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/09/18/mapping-fall-foliage-with-sf/&#34;&gt;Mapping Fall Foliage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/07/25/r%E2%81%B6-general-attys-distributions/&#34;&gt;General (Attys) Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/06/18/r%E2%81%B6-disproving-approval/&#34;&gt;Disproving Approval&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;If you want to be really fancy, you can use &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown&lt;/a&gt;, which makes a complete website with R Markdown files. That‚Äôs actually how this site is built (&lt;a href=&#34;https://github.com/andrewheiss/datavizm20.classes.andrewheiss.com&#34;&gt;see the source code&lt;/a&gt;). You can build your own site &lt;a href=&#34;https://apreshill.rbind.io/post/up-and-running-with-blogdown/&#34;&gt;with this tutorial&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R style suggestions</title>
      <link>/resource/style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/resource/style/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-style-conventions&#34;&gt;R style conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#main-style-things-to-pay-attention-to-for-this-class&#34;&gt;Main style things to pay attention to for this class&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#spacing&#34;&gt;Spacing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#long-lines&#34;&gt;Long lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipes-and-ggplot-layers&#34;&gt;Pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) and ggplot layers (&lt;code&gt;+&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-style-conventions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R style conventions&lt;/h2&gt;
&lt;p&gt;R is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  filter(cty &amp;gt; 10, class == &amp;quot;compact&amp;quot;)

mpg %&amp;gt;% filter(cty &amp;gt; 10, class == &amp;quot;compact&amp;quot;)

mpg %&amp;gt;% 
  filter(cty &amp;gt; 10, 
         class == &amp;quot;compact&amp;quot;)

mpg %&amp;gt;% filter(cty&amp;gt;10, class==&amp;quot;compact&amp;quot;)

filter(mpg,cty&amp;gt;10,class==&amp;quot;compact&amp;quot;)

mpg %&amp;gt;% 
filter(cty &amp;gt; 10, 
                        class == &amp;quot;compact&amp;quot;)

filter ( mpg,cty&amp;gt;10,     class==&amp;quot;compact&amp;quot; )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you‚Äôll notice that only a few of those iterations (the first three) are easily readable.&lt;/p&gt;
&lt;p&gt;To help improve readability and make it easier to share code with others, there‚Äôs &lt;a href=&#34;https://style.tidyverse.org/index.html&#34;&gt;an unofficial style guide for writing R code&lt;/a&gt;. It‚Äôs fairly short and just has lots of examples of good and bad ways of writing code (naming variables, dealing with long lines, using proper indentation levels, etc.)‚Äîyou should glance through it some time.&lt;/p&gt;
&lt;p&gt;RStudio has a built-in way of cleaning up your code. Select some code, press &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; (on Windows) or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; (on macOS), and R will reformat the code for you. It‚Äôs not always perfect, but it‚Äôs really helpful for getting indentation right without having to manually hit &lt;kbd&gt;space&lt;/kbd&gt; a billion times.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;main-style-things-to-pay-attention-to-for-this-class&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Main style things to pay attention to for this class&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Important note&lt;/em&gt;: I won‚Äôt ever grade you on any of this! If you submit something like &lt;code&gt;filter(mpg,cty&amp;gt;10,class==&#34;compact&#34;)&lt;/code&gt;, I might recommend adding spaces, but it won‚Äôt affect your grade or points or anything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;spacing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Spacing&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://style.tidyverse.org/syntax.html#spacing&#34;&gt;‚ÄúSpacing‚Äù section&lt;/a&gt; in the tidyverse style guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Put spaces after commas (like in regular English):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10)

# Bad
filter(mpg , cty &amp;gt; 10)
filter(mpg ,cty &amp;gt; 10)
filter(mpg,cty &amp;gt; 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put spaces around operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, etc.:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10)

# Bad
filter(mpg, cty&amp;gt;10)
filter(mpg, cty&amp;gt; 10)
filter(mpg, cty &amp;gt;10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don‚Äôt put spaces around parentheses that are parts of functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10)

# Bad
filter (mpg, cty &amp;gt; 10)
filter ( mpg, cty &amp;gt; 10)
filter( mpg, cty &amp;gt; 10 )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;long-lines&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Long lines&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://style.tidyverse.org/syntax.html#long-lines&#34;&gt;‚ÄúLong lines‚Äù section&lt;/a&gt; in the tidyverse style guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It‚Äôs generally good practice to not have really long lines of code. A good suggestion is to keep lines at a maximum of 80 characters. Instead of counting characters by hand (ew), in RStudio go to ‚ÄúTools‚Äù &amp;gt; ‚ÄúGlobal Options‚Äù &amp;gt; ‚ÄúCode‚Äù &amp;gt; ‚ÄúDisplay‚Äù and check the box for ‚ÄúShow margin‚Äù. You should now see a really thin line indicating 80 characters. Again, you can go beyond this‚Äîthat‚Äôs fine. It‚Äôs just good practice to avoid going too far past it.&lt;/p&gt;
&lt;p&gt;You can add line breaks inside longer lines of code. Line breaks should come after commas, and things like function arguments should align within the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10, class == &amp;quot;compact&amp;quot;)

# Good
filter(mpg, cty &amp;gt; 10, 
       class == &amp;quot;compact&amp;quot;)

# Good
filter(mpg,
       cty &amp;gt; 10,
       class == &amp;quot;compact&amp;quot;)

# Bad
filter(mpg, cty &amp;gt; 10, class %in% c(&amp;quot;compact&amp;quot;, &amp;quot;pickup&amp;quot;, &amp;quot;midsize&amp;quot;, &amp;quot;subcompact&amp;quot;, &amp;quot;suv&amp;quot;, &amp;quot;2seater&amp;quot;, &amp;quot;minivan&amp;quot;))

# Good
filter(mpg, 
       cty &amp;gt; 10, 
       class %in% c(&amp;quot;compact&amp;quot;, &amp;quot;pickup&amp;quot;, &amp;quot;midsize&amp;quot;, &amp;quot;subcompact&amp;quot;, 
                    &amp;quot;suv&amp;quot;, &amp;quot;2seater&amp;quot;, &amp;quot;minivan&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pipes-and-ggplot-layers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) and ggplot layers (&lt;code&gt;+&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Put each layer of a ggplot plot on separate lines, with the &lt;code&gt;+&lt;/code&gt; at the end of the line, indented with two spaces:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
ggplot(mpg, aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  geom_smooth() +
  theme_bw()

# Bad
ggplot(mpg, aes(x = cty, y = hwy, color = class)) +
  geom_point() + geom_smooth() +
  theme_bw()

# Super bad
ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw()

# Super bad and won&amp;#39;t even work
ggplot(mpg, aes(x = cty, y = hwy, color = class))
  + geom_point()
  + geom_smooth() 
  + theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put each step in a dplyr pipeline on separate lines, with the &lt;code&gt;%&amp;gt;%&lt;/code&gt; at the end of the line, indented with two spaces:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
mpg %&amp;gt;% 
  filter(cty &amp;gt; 10) %&amp;gt;% 
  group_by(class) %&amp;gt;% 
  summarize(avg_hwy = mean(hwy))

# Bad
mpg %&amp;gt;% filter(cty &amp;gt; 10) %&amp;gt;% group_by(class) %&amp;gt;% 
  summarize(avg_hwy = mean(hwy))

# Super bad
mpg %&amp;gt;% filter(cty &amp;gt; 10) %&amp;gt;% group_by(class) %&amp;gt;% summarize(avg_hwy = mean(hwy))

# Super bad and won&amp;#39;t even work
mpg %&amp;gt;% 
  filter(cty &amp;gt; 10)
  %&amp;gt;% group_by(class)
  %&amp;gt;% summarize(avg_hwy = mean(hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;comments&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://style.tidyverse.org/syntax.html#comments&#34;&gt;‚ÄúComments‚Äù section&lt;/a&gt; in the tidyverse style guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Comments should start with a comment symbol and a single space: &lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good

#Bad

    #Bad&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the comment is really short (and won‚Äôt cause you to go over 80 characters in the line), you can include it in the same line as the code, separated by at least two spaces (it works with one space, but using a couple can enhance readability):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  filter(cty &amp;gt; 10) %&amp;gt;%  # Only rows where cty is 10 +
  group_by(class) %&amp;gt;%  # Divide into class groups
  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add extra spaces to get inline comments to align, if you want:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  filter(cty &amp;gt; 10) %&amp;gt;%            # Only rows where cty is 10 +
  group_by(class) %&amp;gt;%             # Divide into class groups
  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the comment is really long, you can break it into multiple lines. RStudio can do this for you if you go to ‚ÄúCode‚Äù &amp;gt; ‚ÄúReflow comment‚Äù&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
# Happy families are all alike; every unhappy family is unhappy in its own way.
# Everything was in confusion in the Oblonskys‚Äô house. The wife had discovered
# that the husband was carrying on an intrigue with a French girl, who had been
# a governess in their family, and she had announced to her husband that she
# could not go on living in the same house with him. This position of affairs
# had now lasted three days, and not only the husband and wife themselves, but
# all the members of their family and household, were painfully conscious of it.

# Bad
# Happy families are all alike; every unhappy family is unhappy in its own way. Everything was in confusion in the Oblonskys‚Äô house. The wife had discovered that the husband was carrying on an intrigue with a French girl, who had been a governess in their family, and she had announced to her husband that she could not go on living in the same house with him. This position of affairs had now lasted three days, and not only the husband and wife themselves, but all the members of their family and household, were painfully conscious of it.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though, if you‚Äôre dealing with comments that are &lt;em&gt;that&lt;/em&gt; long, consider putting the text in R Markdown instead and having it be actual prose.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Amounts and proportions</title>
      <link>/example/04-example/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/04-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-data&#34;&gt;Load data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wrangle-data&#34;&gt;Wrangle data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bar-plot&#34;&gt;Bar plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lollipop-chart&#34;&gt;Lollipop chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#strip-plot&#34;&gt;Strip plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beeswarm-plot&#34;&gt;Beeswarm plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heatmap&#34;&gt;Heatmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre going to use real world data to demonstrate some different ways to visualize amounts and proportions. We‚Äôll use data from the CDC and the Social Security Administration about the number of daily births in the United States from 1994‚Äì2014. &lt;a href=&#34;https://fivethirtyeight.com/features/some-people-are-too-superstitious-to-have-a-baby-on-friday-the-13th/&#34;&gt;FiveThirtyEight reported a story using this data in 2016&lt;/a&gt; and they posted relatively CSV files &lt;a href=&#34;https://github.com/fivethirtyeight/data/tree/master/births&#34;&gt;on GitHub&lt;/a&gt;, so we can download and use those.&lt;/p&gt;
&lt;p&gt;If you want to follow along with this example, you can download the data directly from &lt;a href=&#34;https://github.com/fivethirtyeight/data/tree/master/births&#34;&gt;GitHub&lt;/a&gt; or by using these links (you‚Äôll likely need to right click on these and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_1994-2003_CDC_NCHS.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;US_births_1994-2003_CDC_NCHS.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_2000-2014_SSA.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;US_births_2000-2014_SSA.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/zrT-ThV6U6M&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load data&lt;/h3&gt;
&lt;p&gt;There are two CSV files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;US_births_1994-2003_CDC_NCHS.csv&lt;/code&gt; contains U.S. births data for the years 1994 to 2003, as provided by the Centers for Disease Control and Prevention‚Äôs National Center for Health Statistics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;US_births_2000-2014_SSA.csv&lt;/code&gt; contains U.S. births data for the years 2000 to 2014, as provided by the Social Security Administration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the two datasets overlap in 2000‚Äì2003, we use Social Security Administration data for those years.&lt;/p&gt;
&lt;p&gt;We downloaded the data from GitHub and placed the CSV files in a folder named &lt;code&gt;data&lt;/code&gt;. We‚Äôll then load them with &lt;code&gt;read_csv()&lt;/code&gt; and combine them into one data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(scales)   # For nice labels in charts

births_1994_1999 &amp;lt;- read_csv(&amp;quot;data/US_births_1994-2003_CDC_NCHS.csv&amp;quot;) %&amp;gt;% 
  # Ignore anything after 2000
  filter(year &amp;lt; 2000)

births_2000_2014 &amp;lt;- read_csv(&amp;quot;data/US_births_2000-2014_SSA.csv&amp;quot;)

births_combined &amp;lt;- bind_rows(births_1994_1999, births_2000_2014)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;wrangle-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wrangle data&lt;/h3&gt;
&lt;p&gt;Let‚Äôs look at the first few rows of the data to see what we‚Äôre working with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(births_combined)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##    year month date_of_month day_of_week births
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1  1994     1             1           6   8096
## 2  1994     1             2           7   7772
## 3  1994     1             3           1  10142
## 4  1994     1             4           2  11248
## 5  1994     1             5           3  11053
## 6  1994     1             6           4  11406&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The columns for year and births seem straightforward and ready to use. The columns for month and day of the week could be improved if we changed them to text (i.e.¬†January instead of 1; Tuesday instead of 3). To fix this, we can convert these columns to categorical variables, or factors in R. We can also specify that these categories (or factors) are ordered, meaning that Feburary comes after January, etc. Without ordering, R will plot them alphabetically, which isn‚Äôt very helpful.&lt;/p&gt;
&lt;p&gt;We‚Äôll make a new dataset named &lt;code&gt;births&lt;/code&gt; that‚Äôs based on the combined births data, but with some new columns added:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The c() function lets us make a list of values
month_names &amp;lt;- c(&amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;, &amp;quot;July&amp;quot;,
                 &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;)

day_names &amp;lt;- c(&amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, 
               &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;, &amp;quot;Saturday&amp;quot;, &amp;quot;Sunday&amp;quot;)

births &amp;lt;- births_combined %&amp;gt;% 
  # Make month an ordered factor, using the month_name list as labels
  mutate(month = factor(month, labels = month_names, ordered = TRUE)) %&amp;gt;% 
  mutate(day_of_week = factor(day_of_week, labels = day_names, ordered = TRUE),
         date_of_month_categorical = factor(date_of_month)) %&amp;gt;% 
  # Add a column indicating if the day is on a weekend
  mutate(weekend = ifelse(day_of_week %in% c(&amp;quot;Saturday&amp;quot;, &amp;quot;Sunday&amp;quot;), TRUE, FALSE))

head(births)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##    year month   date_of_month day_of_week births date_of_month_categori‚Ä¶ weekend
##   &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;                   &amp;lt;lgl&amp;gt;  
## 1  1994 January             1 Saturday      8096 1                       TRUE   
## 2  1994 January             2 Sunday        7772 2                       TRUE   
## 3  1994 January             3 Monday       10142 3                       FALSE  
## 4  1994 January             4 Tuesday      11248 4                       FALSE  
## 5  1994 January             5 Wednesday    11053 5                       FALSE  
## 6  1994 January             6 Thursday     11406 6                       FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at the data now, you can see the columns are changed and have different types. &lt;code&gt;year&lt;/code&gt; and &lt;code&gt;date_of_month&lt;/code&gt; are still numbers, but &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day_of_week&lt;/code&gt; are ordered factors (&lt;code&gt;ord&lt;/code&gt;) and &lt;code&gt;date_of_month_categorical&lt;/code&gt; is a regular factor (&lt;code&gt;fct&lt;/code&gt;). Technically it‚Äôs also ordered, but because it‚Äôs already alphabetical (i.e.¬†2 naturally comes after 1), we don‚Äôt need to force it to be in the right order.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;births&lt;/code&gt; data is now clean and ready to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bar plot&lt;/h3&gt;
&lt;p&gt;First we can look at a bar chart showing the total number of births each day. We need to make a smaller summarized dataset and then we‚Äôll plot it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_births_weekday &amp;lt;- births %&amp;gt;% 
  group_by(day_of_week) %&amp;gt;% 
  summarize(total = sum(births))

ggplot(data = total_births_weekday,
       mapping = aes(x = day_of_week, y = total, fill = day_of_week)) +
  geom_col() +
  # Turn off the fill legend because it&amp;#39;s redundant
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/plot-bar-chart-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we fill by day of the week, we get 7 different colors, which is fine (I guess), but doesn‚Äôt really help tell a story. The main story here is that there are far fewer births during weekends. If we create a new column that flags if a row is Saturday or Sunday, we can fill by that column instead:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;total_births_weekday &amp;lt;- births %&amp;gt;% 
  group_by(day_of_week) %&amp;gt;% 
  summarize(total = sum(births)) %&amp;gt;% 
  mutate(weekend = ifelse(day_of_week %in% c(&amp;quot;Saturday&amp;quot;, &amp;quot;Sunday&amp;quot;), TRUE, FALSE))

ggplot(data = total_births_weekday,
       mapping = aes(x = day_of_week, y = total, fill = weekend)) +
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/plot-bar-chart-weekend-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat! Those default colors are kinda ugly, though, so let‚Äôs use the principles of preattentive processing and contrast to highlight the weekend bars:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = total_births_weekday,
       mapping = aes(x = day_of_week, y = total, fill = weekend)) +
  geom_col() +
  # Use grey and orange
  scale_fill_manual(values = c(&amp;quot;grey70&amp;quot;, &amp;quot;#f2ad22&amp;quot;)) +
  # Use commas instead of scientific notation
  scale_y_continuous(labels = comma) +
  # Turn off the legend since the title shows what the orange is
  guides(fill = FALSE) +
  labs(title = &amp;quot;Weekends are unpopular times for giving birth&amp;quot;,
       x = NULL, y = &amp;quot;Total births&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/plot-bar-chart-weekend-better-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lollipop-chart&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Lollipop chart&lt;/h3&gt;
&lt;p&gt;Since the ends of the bars are often the most important part of the graph, we can use a lollipop chart to emphasize them. We‚Äôll keep all the same code from our bar chart and make a few changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Color by weekend instead of fill by weekend, since points and lines are colored in ggplot, not filled&lt;/li&gt;
&lt;li&gt;Switch &lt;code&gt;scale_fill_manual()&lt;/code&gt; to &lt;code&gt;scale_color_manual()&lt;/code&gt; and turn off the &lt;code&gt;color&lt;/code&gt; legend in the &lt;code&gt;guides()&lt;/code&gt; layer&lt;/li&gt;
&lt;li&gt;Switch &lt;code&gt;geom_col()&lt;/code&gt; to &lt;code&gt;geom_pointrange()&lt;/code&gt;. The &lt;code&gt;geom_pointrange()&lt;/code&gt; layer requires two additional aesthetics: &lt;code&gt;ymin&lt;/code&gt; and &lt;code&gt;ymax&lt;/code&gt; for the ends of the lines that come out of the point. Here we‚Äôll set &lt;code&gt;ymin&lt;/code&gt; to 0 so it starts at the x-axis, and we‚Äôll set &lt;code&gt;ymax&lt;/code&gt; to &lt;code&gt;total&lt;/code&gt; so it ends at the point.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = total_births_weekday,
       mapping = aes(x = day_of_week, y = total, color = weekend)) +
  geom_pointrange(aes(ymin = 0, ymax = total),
                  # Make the lines a little thicker and the dots a little bigger
                  fatten = 5, size = 1.5) +
  # Use grey and orange
  scale_color_manual(values = c(&amp;quot;grey70&amp;quot;, &amp;quot;#f2ad22&amp;quot;)) +
  # Use commas instead of scientific notation
  scale_y_continuous(labels = comma) +
  # Turn off the legend since the title shows what the orange is
  guides(color = FALSE) +
  labs(title = &amp;quot;Weekends are unpopular times for giving birth&amp;quot;,
       x = NULL, y = &amp;quot;Total births&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/plot-lollipop-chart-weekend-better-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;strip-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Strip plot&lt;/h3&gt;
&lt;p&gt;However, we want to #barbarplots! (Though they‚Äôre arguably okay here, since they show totals and not averages). Let‚Äôs show all the data with points. We‚Äôll use the full dataset now, map x to weekday, y to births, and change &lt;code&gt;geom_col()&lt;/code&gt; to &lt;code&gt;geom_point()&lt;/code&gt;. We‚Äôll tell &lt;code&gt;geom_point()&lt;/code&gt; to jitter the points randomly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = births,
       mapping = aes(x = day_of_week, y = births, color = weekend)) +
  scale_color_manual(values = c(&amp;quot;grey70&amp;quot;, &amp;quot;#f2ad22&amp;quot;)) +
  geom_point(size = 0.5, position = position_jitter(height = 0)) +
  guides(color = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/strip-plot-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are some interesting points in the low ends, likely because of holidays like Labor Day and Memorial Day (for the Mondays) and Thanksgiving (for the Thursday). If we had a column that indicated whether a day was a holiday, we could color by that and it would probably explain most of those low numbers. Unfortunately we don‚Äôt have that column, and it‚Äôd be hard to make. Some holidays are constant (Halloween is always October 31), but some aren‚Äôt (Thanksgiving is the fourth Thursday in November, so we‚Äôd need to find out which November 20-somethingth each year is the fourth Thursday, and good luck doing that at scale).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;beeswarm-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Beeswarm plot&lt;/h3&gt;
&lt;p&gt;We can add some structure to these points if we use the &lt;a href=&#34;https://github.com/eclarke/ggbeeswarm&#34;&gt;&lt;strong&gt;ggbeeswarm&lt;/strong&gt; package&lt;/a&gt;, with either &lt;code&gt;geom_beeswarm()&lt;/code&gt; or &lt;code&gt;geom_quasirandom()&lt;/code&gt;. &lt;code&gt;geom_quasirandom()&lt;/code&gt; actually works better here since there are so many points‚Äî&lt;code&gt;geom_beeswarm()&lt;/code&gt; makes the clusters of points way too wide.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggbeeswarm)

ggplot(data = births,
       mapping = aes(x = day_of_week, y = births, color = weekend)) +
  scale_color_manual(values = c(&amp;quot;grey70&amp;quot;, &amp;quot;#f2ad22&amp;quot;)) +
  # Make these points suuuper tiny
  geom_quasirandom(size = 0.0001) +
  guides(color = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/beeswarm-plot-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;heatmap&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Heatmap&lt;/h3&gt;
&lt;p&gt;Finally, let‚Äôs use something non-traditional to show the average births by day in a somewhat proportional way. We can calculate the average number of births every day and then make a heatmap that fills each square by that average, thus showing the relative differences in births per day.&lt;/p&gt;
&lt;p&gt;To do this, we need to make a summarized data frame with &lt;code&gt;group_by() %&amp;gt;% summarize()&lt;/code&gt; to calculate the average number of births by month and day of the month (i.e.¬†average for January 1, January 2, etc.).&lt;/p&gt;
&lt;p&gt;We‚Äôll then make a sort of calendar with date of the month on the x axis, month on the y axis, with heat map squares filled by the daily average. We‚Äôll use &lt;code&gt;geom_tile()&lt;/code&gt; to add squares for each day, and then add some extra scale, coordinates, and theme layers to clean up the plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_births_month_day &amp;lt;- births %&amp;gt;% 
  group_by(month, date_of_month_categorical) %&amp;gt;% 
  summarize(avg_births = mean(births))

ggplot(data = avg_births_month_day,
       # By default, the y-axis will have December at the top, so use fct_rev() to reverse it
       mapping = aes(x = date_of_month_categorical, y = fct_rev(month), fill = avg_births)) +
  geom_tile() +
  # Add viridis colors
  scale_fill_viridis_c(option = &amp;quot;inferno&amp;quot;, labels = comma) + 
  # Add nice labels
  labs(x = &amp;quot;Day of the month&amp;quot;, y = NULL,
       title = &amp;quot;Average births per day&amp;quot;,
       subtitle = &amp;quot;1994-2014&amp;quot;,
       fill = &amp;quot;Average births&amp;quot;) +
  # Force all the tiles to have equal widths and heights
  coord_equal() +
  # Use a cleaner theme
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/04-example_files/figure-html/plot-heatmap-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat! There are some really interesting trends here. Most obvious, probably, is that very few people are born on New Year‚Äôs Day, July 4th, Halloween, Thanksgiving, and Christmas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_births_month_day %&amp;gt;% 
  arrange(avg_births)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 366 x 3
## # Groups:   month [12]
##    month    date_of_month_categorical avg_births
##    &amp;lt;ord&amp;gt;    &amp;lt;fct&amp;gt;                          &amp;lt;dbl&amp;gt;
##  1 December 25                             6601.
##  2 January  1                              7827.
##  3 December 24                             8103.
##  4 July     4                              8825.
##  5 January  2                              9356.
##  6 December 26                             9599.
##  7 November 27                             9770.
##  8 November 23                             9919.
##  9 November 25                            10001 
## 10 October  31                            10030.
## # ‚Ä¶ with 356 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The days with the highest average are in mid-September (lol my birthday is #2), likely because that‚Äôs about 9 months after the first week of January. July 7th at #7 is odd and I have no idea why it might be so popular ü§∑.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_births_month_day %&amp;gt;% 
  arrange(desc(avg_births))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 366 x 3
## # Groups:   month [12]
##    month     date_of_month_categorical avg_births
##    &amp;lt;ord&amp;gt;     &amp;lt;fct&amp;gt;                          &amp;lt;dbl&amp;gt;
##  1 September 9                             12344.
##  2 September 19                            12285.
##  3 September 12                            12282.
##  4 September 17                            12201.
##  5 September 10                            12190.
##  6 September 20                            12162.
##  7 July      7                             12147.
##  8 September 15                            12126.
##  9 September 16                            12114.
## 10 September 18                            12112.
## # ‚Ä¶ with 356 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The funniest trend is the very visible dark column for the 13th of every month. People &lt;em&gt;really&lt;/em&gt; don‚Äôt want to give birth on the 13th.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Amounts and proportions</title>
      <link>/lab/04-exercise/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/04-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-essential-pandemic-construction&#34;&gt;Task 2: Essential pandemic construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;The New York City Department of Buildings (DOB) maintains a list of construction sites that have been categorized as ‚Äúessential‚Äù during the city‚Äôs shelter-in-place pandemic order. They‚Äôve provided &lt;a href=&#34;https://www1.nyc.gov/assets/buildings/html/essential-active-construction.html&#34;&gt;an interactive map here&lt;/a&gt; where you can see the different projects. There‚Äôs also a link there to download the complete dataset.&lt;/p&gt;
&lt;p&gt;For this exercise, you‚Äôre going to use this data to visualize the amounts or proportions of different types of essential projects in the five boroughs of New York City (Brooklyn, Manhattan, the Bronx, Queens, and Staten Island).&lt;/p&gt;
&lt;p&gt;You‚Äôll be doing all your R work in R Markdown this time (and from now on). You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to download one CSV file and put it somewhere on your computer or upload it to RStudio.cloud‚Äîpreferably in a folder named &lt;code&gt;data&lt;/code&gt; in your project folder. You can download the data from &lt;a href=&#34;https://www1.nyc.gov/assets/buildings/html/essential-active-construction.html&#34;&gt;the DOB‚Äôs map&lt;/a&gt;, or use this link to get it directly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/04-exercise/data/EssentialConstruction.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;EssentialConstruction.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To help you, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/04-exercise/04-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;04-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  04-exercise.Rmd
  your-project-name.Rproj
  data\
    EssentialConstruction.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/04-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;04-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-essential-pandemic-construction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Essential pandemic construction&lt;/h2&gt;
&lt;p&gt;Make the following plots and briefly explain what they show:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Show the count or proportion of approved projects by borough using a bar chart&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show the count or proportion of approved projects by category using a lollipop chart&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show the proportion of approved projects by borough and category simultaneously using a heatmap&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;/example/04-example/&#34;&gt;The example for today‚Äôs session&lt;/a&gt; will be &lt;em&gt;incredibly&lt;/em&gt; helpful for this exercise. Reference it.&lt;/p&gt;
&lt;p&gt;You don‚Äôt need to make these super fancy, but if you‚Äôre feeling brave, experiment with adding a &lt;code&gt;labs()&lt;/code&gt; layer or changing fill colors with &lt;code&gt;scale_fill_manual()&lt;/code&gt; or with viridis palettes.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Unzipping files</title>
      <link>/resource/unzipping/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      <guid>/resource/unzipping/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Because RStudio projects typically consist of multiple files (R scripts, datasets, graphical output, etc.) the easiest way to distribute them to you for examples, assignments, and projects is to combine all the different files in to a single compressed collection called a &lt;strong&gt;zip file&lt;/strong&gt;. When you unzip a zipped file, your operating system extracts all the files that are contained inside into a new folder on your computer.&lt;/p&gt;
&lt;p&gt;Unzipping files on macOS is trivial, but unzipping files on Windows can mess you up if you don‚Äôt pay careful attention. Here‚Äôs a helpful guide to unzipping files on both macOS and Windows.&lt;/p&gt;
&lt;div id=&#34;unzipping-files-on-macos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unzipping files on macOS&lt;/h2&gt;
&lt;p&gt;Double click on the downloaded &lt;code&gt;.zip&lt;/code&gt; file. macOS will automatically create a new folder with the same name as the &lt;code&gt;.zip&lt;/code&gt; file, and all the file‚Äôs contents will be inside. Double click on the RStudio Project file (&lt;code&gt;.Rproj&lt;/code&gt;) to get started.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/unzipping/unzip-mac.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unzipping-files-on-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unzipping files on Windows&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Right click on the &lt;code&gt;.zip&lt;/code&gt; file, select ‚ÄúExtract All‚Ä¶‚Äù, and work with the resulting unzipped folder.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unlike macOS, Windows does &lt;em&gt;not&lt;/em&gt; automatically unzip things for you. If you double click on the &lt;code&gt;.zip&lt;/code&gt; file, Windows will show you what‚Äôs inside, but it will do so without actually extracting anything. This &lt;del&gt;can be&lt;/del&gt; is incredibly confusing! Here‚Äôs what it looks like‚Äîthe only clues that this folder is really a &lt;code&gt;.zip&lt;/code&gt; file are that there‚Äôs a ‚ÄúCompressed Folder Tools‚Äù tab at the top, and there‚Äôs a ‚ÄúRatio‚Äù column that shows how much each file is compressed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/unzipping/inside-zip-windows.png&#34; width=&#34;80%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is very tempting to try to open files from this view. However, if you do, things will break and you won‚Äôt be able to correctly work with any of the files in the zipped folder. If you open the R Project file, for instance, RStudio will point to a bizarre working directory buried deep in some temporary folder:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/unzipping/temp-wd-windows.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You most likely won‚Äôt be able to open any data files or save anything, which will be frustrating.&lt;/p&gt;
&lt;p&gt;Instead, you need to right click on the &lt;code&gt;.zip&lt;/code&gt; file and select ‚ÄúExtract All‚Ä¶‚Äù:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/unzipping/extract-windows-1.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then choose where you want to unzip all the files and click on ‚ÄúExtract‚Äù&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/unzipping/extract-windows-2.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You should then finally have a real folder with all the contents of the zipped file. Open the R Project file and RStudio will point to the correct working directory and everything will work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/unzipping/extract-windows-3.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data</title>
      <link>/resource/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/resource/data/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There are a ton of places to find data related to public policy and administration (as well as data on pretty much any topic you want) online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tinyletter.com/data-is-plural&#34;&gt;&lt;strong&gt;Data is Plural newsletter&lt;/strong&gt;&lt;/a&gt;: Jeremy Singer-Vine sends a weekly newsletter of the most interesting public datasets he‚Äôs found. You should subscribe to it. &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0&#34;&gt;He also has an archive of all the datasets he‚Äôs highlighted.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://toolbox.google.com/datasetsearch&#34;&gt;&lt;strong&gt;Google Dataset Search&lt;/strong&gt;&lt;/a&gt;: Google indexes thousands of public datasets; search for them here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/datasets&#34;&gt;&lt;strong&gt;Kaggle&lt;/strong&gt;&lt;/a&gt;: Kaggle hosts machine learning competitions where people compete to create the fastest, most efficient, most predictive algorithms. A byproduct of these competitions is a host of fascinating datasets that are generally free and open to the public. See, for example, &lt;a href=&#34;https://www.kaggle.com/hugomathien/soccer&#34;&gt;the European Soccer Database&lt;/a&gt;, the &lt;a href=&#34;https://www.kaggle.com/rtatman/salem-witchcraft-dataset&#34;&gt;Salem Witchcraft Dataset&lt;/a&gt; or results from an &lt;a href=&#34;https://www.kaggle.com/rtatman/oreo-flavors-tastetest-ratings&#34;&gt;Oreo flavors taste test&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.threesixtygiving.org/data/data-registry/&#34;&gt;&lt;strong&gt;360Giving&lt;/strong&gt;&lt;/a&gt;: Dozens of British foundations follow a standard file format for sharing grant data and have made that data available online.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://us-cities.survey.okfn.org/&#34;&gt;&lt;strong&gt;US City Open Data Census&lt;/strong&gt;&lt;/a&gt;: More than 100 US cities have committed to sharing dozens of types of data, including data about crime, budgets, campaign finance, lobbying, transit, and zoning. This site from the &lt;a href=&#34;http://sunlightfoundation.com/&#34;&gt;Sunlight Foundation&lt;/a&gt; and &lt;a href=&#34;http://www.codeforamerica.org//&#34;&gt;Code for America&lt;/a&gt; collects this data and rates cities by how well they‚Äôre doing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Political science and economics datasets&lt;/strong&gt;: There‚Äôs a wealth of data available for political science- and economics-related topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/briatte/srqm/wiki/Data&#34;&gt;&lt;strong&gt;Fran√ßois Briatte‚Äôs extensive curated lists&lt;/strong&gt;&lt;/a&gt;: Includes data from/about intergovernmental organizations (IGOs), nongovernmental organizations (NGOs), public opinion surveys, parliaments and legislatures, wars, human rights, elections, and municipalities.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/leeper/poliscitoys/issues/1&#34;&gt;&lt;strong&gt;Thomas Leeper‚Äôs list of political science datasets&lt;/strong&gt;&lt;/a&gt;: Good short list of useful datasets, divided by type of data (country-level data, survey data, social media data, event data, text data, etc.).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/erikgahner/PolData&#34;&gt;&lt;strong&gt;Erik Gahner‚Äôs list of political science datasets&lt;/strong&gt;&lt;/a&gt;: Huge list of useful datasets, divided by topic (governance, elections, policy, political elites, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>/example/05-example/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/05-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-plot&#34;&gt;Basic plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nice-pre-built-themes&#34;&gt;Nice pre-built themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bonus-ggthemeassist&#34;&gt;Bonus: &lt;strong&gt;ggthemeassist&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-plots&#34;&gt;Saving plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href=&#34;/lesson/05-lesson/&#34;&gt;lesson for today‚Äôs session&lt;/a&gt; is a fairly comprehensive introduction to using the &lt;code&gt;theme()&lt;/code&gt; function in ggplot, and &lt;a href=&#34;https://henrywang.nl/ggplot2-theme-elements-demonstration/&#34;&gt;this page by Henry Wang&lt;/a&gt; is a good cheat sheet for remembering which theme elements are which on a plot.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&#34;/assignment/05-exercise/&#34;&gt;your exercise&lt;/a&gt;, you‚Äôre going to create the world‚Äôs ugliest plot. For this example, we‚Äôll use the principles of CRAP to make a great theme.&lt;/p&gt;
&lt;p&gt;I‚Äôm going to build the theme semi-incrementally here. Instead of showing how the plot updates with each change in setting, I do most of the updates all at once, with tons of comments explaining what each line does. &lt;strong&gt;Importantly&lt;/strong&gt;, I did &lt;em&gt;not&lt;/em&gt; write this all at once. When you‚Äôre tinkering with themes, you generally start with something like &lt;code&gt;theme_minimal()&lt;/code&gt; or &lt;code&gt;theme_bw()&lt;/code&gt; and then gradually add new things to &lt;code&gt;theme()&lt;/code&gt;, like modifying &lt;code&gt;plot.title&lt;/code&gt;, then &lt;code&gt;plot.subtitle&lt;/code&gt;, etc. It‚Äôs a very iterative process with lots of tinkering. Because of this, &lt;strong&gt;there is no live-coding video for this example&lt;/strong&gt;‚Äîit would be incredibly long and boring. Instead, look through each of the lines and see what they‚Äôre doing.&lt;/p&gt;
&lt;p&gt;For this example, I‚Äôm going to use the &lt;code&gt;gapminder&lt;/code&gt; dataset that we‚Äôve been using throughout this week. You can get it if you install the &lt;strong&gt;gapminder&lt;/strong&gt; package in R, or you can download this CSV file (you may need to right click on it and select ‚ÄúSave As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/gapminder.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;gapminder.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I‚Äôm also going to use the &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Condensed&#34;&gt;Roboto Condensed font&lt;/a&gt; in the theme. Download and install it on your computer if you don‚Äôt have it.&lt;/p&gt;
&lt;div id=&#34;basic-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic plot&lt;/h2&gt;
&lt;p&gt;When I‚Äôm creating a theme, I like to use a basic plot with everything that might show up, complete with a title, subtitle, caption, legend, facets, and other elements.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(gapminder)  # For gapminder data
library(scales)     # For nice axis labels

gapminder_filtered &amp;lt;- gapminder %&amp;gt;% 
  filter(year &amp;gt; 2000)

base_plot &amp;lt;- ggplot(data = gapminder_filtered,
                    mapping = aes(x = gdpPercap, y = lifeExp, 
                                  color = continent, size = pop)) +
  geom_point() +
  # Use dollars, and get rid of the cents part (i.e. $300 instead of $300.00)
  scale_x_log10(labels = dollar_format(accuracy = 1)) +
  # Format with commas
  scale_size_continuous(labels = comma) +
  # Use viridis
  scale_color_viridis_d(option = &amp;quot;plasma&amp;quot;, end = 0.9) +
  labs(x = &amp;quot;GDP per capita&amp;quot;, y = &amp;quot;Life expectancy&amp;quot;,
       color = &amp;quot;Continent&amp;quot;, size = &amp;quot;Population&amp;quot;,
       title = &amp;quot;Here&amp;#39;s a cool title&amp;quot;,
       subtitle = &amp;quot;And here&amp;#39;s a neat subtitle&amp;quot;,
       caption = &amp;quot;Source: The Gapminder Project&amp;quot;) +
  facet_wrap(vars(year))

base_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/05-example_files/figure-html/basic-plot-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have &lt;code&gt;base_plot&lt;/code&gt; to work with. Here‚Äôs what it looks like with &lt;code&gt;theme_minimal()&lt;/code&gt; applied to it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_plot +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/05-example_files/figure-html/base-minimal-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That gets rid of the grey background and is a good start, but we can make lots of improvements. First let‚Äôs deal with the gridlines. There are too many. We can get rid of the minor gridlines with by setting them to &lt;code&gt;element_blank()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_plot +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/05-example_files/figure-html/theme1-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next let‚Äôs add some typographic contrast. We‚Äôll use Roboto Condensed Regular as the base font. Before trying this, make sure you do the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On macOS&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;capabilities()&lt;/code&gt; in your console and verify that &lt;code&gt;TRUE&lt;/code&gt; shows up under &lt;code&gt;cairo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If not, download and install &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;XQuartz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Windows&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;windowsFonts()&lt;/code&gt; in your console and you‚Äôll see a list of all the fonts you can use with R. It‚Äôs not a very big list.&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;#&amp;gt; $serif
#&amp;gt; [1] &amp;quot;TT Times New Roman&amp;quot;
#&amp;gt;
#&amp;gt; $sans
#&amp;gt; [1] &amp;quot;TT Arial&amp;quot;
#&amp;gt; 
#&amp;gt; $mono
#&amp;gt; [1] &amp;quot;TT Courier New&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add Roboto Condensed to your current R session by running this in your console:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;windowsFonts(`Roboto Condensed` = windowsFont(&amp;quot;Roboto Condensed&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you run &lt;code&gt;windowsFonts()&lt;/code&gt;, you‚Äôll see it in the list:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;#&amp;gt; $serif
#&amp;gt; [1] &amp;quot;TT Times New Roman&amp;quot;
#&amp;gt;
#&amp;gt; $sans
#&amp;gt; [1] &amp;quot;TT Arial&amp;quot;
#&amp;gt; 
#&amp;gt; $mono
#&amp;gt; [1] &amp;quot;TT Courier New&amp;quot;
#&amp;gt;
#&amp;gt; $`Roboto Condensed`
#&amp;gt; [1] &amp;quot;Roboto Condensed&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This only takes effect for your current R session, so if you are knitting a document or if you ever plan on closing RStudio, you‚Äôll need to incorporate this font creation code into your script.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We‚Äôll use the font as the &lt;code&gt;base_family&lt;/code&gt; argument. Note how I make it bold with &lt;code&gt;face&lt;/code&gt; and change the size with &lt;code&gt;rel()&lt;/code&gt;. Instead of manually setting some arbitrary size, I use &lt;code&gt;rel()&lt;/code&gt; to resize the text in relation to the &lt;code&gt;base_size&lt;/code&gt; argument. Using &lt;code&gt;rel(1.7)&lt;/code&gt; means 1.7 √ó &lt;code&gt;base_size&lt;/code&gt;, or 20.4 That will rescale according to whatever &lt;code&gt;base_size&lt;/code&gt; is‚Äîif I shrink it to &lt;code&gt;base_size = 8&lt;/code&gt;, the title will scale down accordingly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_with_good_typography &amp;lt;- base_plot +
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;, base_size = 12) +
  theme(panel.grid.minor = element_blank(),
        # Bold, bigger title
        plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = rel(1.7)),
        # Plain, slightly bigger subtitle that is grey
        plot.subtitle = element_text(face = &amp;quot;plain&amp;quot;, size = rel(1.3), color = &amp;quot;grey70&amp;quot;),
        # Italic, smaller, grey caption that is left-aligned
        plot.caption = element_text(face = &amp;quot;italic&amp;quot;, size = rel(0.7), 
                                    color = &amp;quot;grey70&amp;quot;, hjust = 0),
        # Bold legend titles
        legend.title = element_text(face = &amp;quot;bold&amp;quot;),
        # Bold, slightly larger facet titles that are left-aligned for the sake of repetition
        strip.text = element_text(face = &amp;quot;bold&amp;quot;, size = rel(1.1), hjust = 0),
        # Bold axis titles
        axis.title = element_text(face = &amp;quot;bold&amp;quot;),
        # Add some space above the x-axis title and make it left-aligned
        axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
        # Add some space to the right of the y-axis title and make it top-aligned
        axis.title.y = element_text(margin = margin(r = 10), hjust = 1))
plot_with_good_typography&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/05-example_files/figure-html/theme2-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Whoa. That gets us most of the way there! We have good contrast with the typography, with the strong bold and the lighter regular font (&lt;strong&gt;‚úì contrast&lt;/strong&gt;). Everything is aligned left (&lt;strong&gt;‚úì alignment&lt;/strong&gt; and &lt;strong&gt;‚úì repetition&lt;/strong&gt;). By moving the axis titles a little bit away from the labels, we‚Äôve enhanced proximity, since they were too close together (&lt;strong&gt;‚úì proximity&lt;/strong&gt;). We repeat grey in both the caption and the subtitle (&lt;strong&gt;‚úì repetition&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;The only thing I don‚Äôt like is that the 2002 isn‚Äôt quite aligned with the title and subtitle. This is because the facet labels are in boxes along the top of each plot, and in some themes (like &lt;code&gt;theme_grey()&lt;/code&gt; and &lt;code&gt;theme_bw()&lt;/code&gt;) those facet labels have grey backgrounds. We can turn off the margin in those boxes, or we can add a background, which will then be perfectly aligned with the title and subtitle.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_with_good_typography +
  # Add a light grey background to the facet titles, with no borders
  theme(strip.background = element_rect(fill = &amp;quot;grey90&amp;quot;, color = NA),
        # Add a thin grey border around all the plots to tie in the facet titles
        panel.border = element_rect(color = &amp;quot;grey90&amp;quot;, fill = NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/05-example_files/figure-html/theme3-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;üë©‚Äçüç≥ üíã! That looks great!&lt;/p&gt;
&lt;p&gt;To save ourselves time in the future, we can store this whole thing as an object that we can then reuse on other plots:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_pretty_theme &amp;lt;- theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;, base_size = 12) +
  theme(panel.grid.minor = element_blank(),
        # Bold, bigger title
        plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = rel(1.7)),
        # Plain, slightly bigger subtitle that is grey
        plot.subtitle = element_text(face = &amp;quot;plain&amp;quot;, size = rel(1.3), color = &amp;quot;grey70&amp;quot;),
        # Italic, smaller, grey caption that is left-aligned
        plot.caption = element_text(face = &amp;quot;italic&amp;quot;, size = rel(0.7), 
                                    color = &amp;quot;grey70&amp;quot;, hjust = 0),
        # Bold legend titles
        legend.title = element_text(face = &amp;quot;bold&amp;quot;),
        # Bold, slightly larger facet titles that are left-aligned for the sake of repetition
        strip.text = element_text(face = &amp;quot;bold&amp;quot;, size = rel(1.1), hjust = 0),
        # Bold axis titles
        axis.title = element_text(face = &amp;quot;bold&amp;quot;),
        # Add some space above the x-axis title and make it left-aligned
        axis.title.x = element_text(margin = margin(t = 10), hjust = 0),
        # Add some space to the right of the y-axis title and make it top-aligned
        axis.title.y = element_text(margin = margin(r = 10), hjust = 1),
        # Add a light grey background to the facet titles, with no borders
        strip.background = element_rect(fill = &amp;quot;grey90&amp;quot;, color = NA),
        # Add a thin grey border around all the plots to tie in the facet titles
        panel.border = element_rect(color = &amp;quot;grey90&amp;quot;, fill = NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use it on any plot. Remember that first plot you made in your exercise from session 1 with the &lt;code&gt;cars&lt;/code&gt; dataset? Let‚Äôs throw this theme on it! (only here the dataset is named &lt;code&gt;mpg&lt;/code&gt; instead of &lt;code&gt;cars&lt;/code&gt;; the &lt;code&gt;mpg&lt;/code&gt; dataset is loaded invisibly whenever you load ggplot)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_example &amp;lt;- ggplot(data = mpg, 
                      mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point(size = 3) + 
  scale_color_viridis_d() +
  facet_wrap(vars(drv)) +
  labs(x = &amp;quot;Displacement&amp;quot;, y = &amp;quot;Highway MPG&amp;quot;, color = &amp;quot;Car class&amp;quot;,
       title = &amp;quot;Heavier cars get worse mileage&amp;quot;,
       subtitle = &amp;quot;Except two-seaters?&amp;quot;,
       caption = &amp;quot;Here&amp;#39;s a caption&amp;quot;) +
  my_pretty_theme

mpg_example&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/05-example_files/figure-html/mpg-example-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Super neat!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;nice-pre-built-themes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nice pre-built themes&lt;/h2&gt;
&lt;p&gt;This custom theme we just made is just one iteration of a theme. There are countless ways to tinker with a theme and have it meet the different CRAP principles. People have even published their own themes in different R packages. Check these out to see lots of different examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;&lt;strong&gt;hrbrthemes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/&#34;&gt;&lt;strong&gt;ggthemes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cttobin/ggthemr&#34;&gt;&lt;strong&gt;ggthemr&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ricardo-bion/ggtech&#34;&gt;&lt;strong&gt;ggtech&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ryo-n7.github.io/2019-05-16-introducing-tvthemes-package/&#34;&gt;&lt;strong&gt;tvthemes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.garrickadenbuie.com/project/ggpomological/&#34;&gt;&lt;strong&gt;ggpomological&lt;/strong&gt;&lt;/a&gt; (this one is incredible!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a href=&#34;https://rfortherestofus.com/2019/08/themes-to-improve-your-ggplot-figures/&#34;&gt;this blog post&lt;/a&gt; for examples of a bunch of others&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-ggthemeassist&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus: &lt;strong&gt;ggthemeassist&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you‚Äôre intimidated by constantly referring to the documentation and figuring out what little line of code affects which part of the graph, install and check out the &lt;strong&gt;ggthemeassist&lt;/strong&gt; package. It provides an interactive menu for manipulating different theme elements, and then generates all the corresponding code, which is really magical.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a brief example of how to use it.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/9ldrTCUSReM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving plots&lt;/h2&gt;
&lt;p&gt;If we want to save these plots, we can use &lt;code&gt;ggsave()&lt;/code&gt;. For that to work, we need to store the plot as an object, which I already did in the examples above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;name_of_plot_object &amp;lt;- ggplot(...)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then feed our saved plot object to &lt;code&gt;ggsave()&lt;/code&gt; and specify the filename and dimensions we want to use. If we‚Äôre using PNG, we don‚Äôt need to worry about any extra options. If we‚Äôre using PDF, &lt;a href=&#34;https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/&#34;&gt;we need to tell R to use the Cairo PDF writing engine&lt;/a&gt; instead of R‚Äôs normal one, since R‚Äôs normal one can‚Äôt deal with custom fonts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add my_pretty_theme to the gapminder base_plot and save as an object
final_gampinder_plot &amp;lt;- base_plot +
  my_pretty_theme

# Save as PNG and PDF
ggsave(&amp;quot;fancy_gapminder.png&amp;quot;, final_gampinder_plot,
       width = 8, height = 5, units = &amp;quot;in&amp;quot;)
ggsave(&amp;quot;fancy_gapminder.pdf&amp;quot;, final_gampinder_plot,
       width = 8, height = 5, units = &amp;quot;in&amp;quot;, device = cairo_pdf)

# Save the mpg plot as PNG and PDF
ggsave(&amp;quot;fancy_mpg.png&amp;quot;, mpg_example,
       width = 8, height = 5, units = &amp;quot;in&amp;quot;)
ggsave(&amp;quot;fancy_mpg.pdf&amp;quot;, mpg_example,
       width = 8, height = 5, units = &amp;quot;in&amp;quot;, device = cairo_pdf)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>/lab/05-exercise/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/05-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-the-ugliest-plot-in-the-world&#34;&gt;Task 2: The ugliest plot in the world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this assignment, you‚Äôre going to work with data compiled by &lt;a href=&#34;https://www.duncangeere.com/&#34;&gt;data journalist Duncan Greere&lt;/a&gt; related to 48 Soviet dogs who flew as test subjects in USSR‚Äôs space program in the 1950s and 60s. &lt;a href=&#34;https://airtable.com/universe/expG3z2CFykG1dZsp/sovet-space-dogs&#34;&gt;The original data can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to download one CSV file and put them somewhere on your computer or upload them to RStudio.cloud‚Äîpreferably in a folder named &lt;code&gt;data&lt;/code&gt; in your project folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/05-exercise/data/Dogs-Database.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;Dogs-Database.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To help you, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to clean up the data a little. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/05-exercise/05-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;05-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  05-exercise.Rmd
  your-project-name.Rproj
  data\
    Dogs-Database.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/05-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;05-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-the-ugliest-plot-in-the-world&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: The ugliest plot in the world&lt;/h2&gt;
&lt;p&gt;For this assignment, you‚Äôre going to forget all the wonderful CRAP design principles you just learned and try your hardest to make the ugliest plot in the world. Modify the color scale and change theme elements to make this plot truly hideous.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt; and you &lt;a href=&#34;https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/&#34;&gt;followed the instructions here for how to make Cairo fonts work with knitted PDFs&lt;/a&gt;) of your document.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Include a chunk that uses &lt;code&gt;ggsave()&lt;/code&gt; to save the plot to your computer as a PNG file.&lt;/p&gt;
&lt;p&gt;Upload the knitted document and the saved PNG file of your plot to iCollege.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Citations and bibliography</title>
      <link>/resource/citations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/resource/citations/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;You can &lt;a href=&#34;/bib/references.bib&#34;&gt;download a BibTeX file&lt;/a&gt; of all the non-web-based readings in the course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/bib/references.bib&#34;&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;code&gt;references.bib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can open the file in &lt;a href=&#34;http://bibdesk.sourceforge.net/&#34;&gt;BibDesk on macOS&lt;/a&gt;, &lt;a href=&#34;http://www.jabref.org/&#34;&gt;JabRef on Windows&lt;/a&gt;, or &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; or &lt;a href=&#34;https://www.mendeley.com/&#34;&gt;Mendeley&lt;/a&gt; online.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uncertainty</title>
      <link>/example/06-example/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/06-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-and-clean-data&#34;&gt;Load and clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#histograms&#34;&gt;Histograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#density-plots&#34;&gt;Density plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#box-violin-and-rain-cloud-plots&#34;&gt;Box, violin, and rain cloud plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre going to use historical weather data from &lt;a href=&#34;https://darksky.net/forecast/33.7546,-84.39/us12/en&#34;&gt;Dark Sky&lt;/a&gt; about wind speed and temperature trends for downtown Atlanta (&lt;a href=&#34;https://www.google.com/maps/place/33¬∞45&amp;#39;16.4%22N+84¬∞23&amp;#39;24.0%22W/@33.754557,-84.3921977,17z/&#34;&gt;specifically &lt;code&gt;33.754557, -84.390009&lt;/code&gt;&lt;/a&gt;) in 2019. I downloaded this data using Dark Sky‚Äôs (about-to-be-retired-because-they-were-bought-by-Apple) API using the &lt;a href=&#34;https://github.com/hrbrmstr/darksky&#34;&gt;&lt;strong&gt;darksky&lt;/strong&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to follow along with this example, you can download the data below (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/atl-weather-2019.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;atl-weather-2019.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/40dW63jTbsk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load and clean data&lt;/h3&gt;
&lt;p&gt;First, we load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)
library(ggridges)
library(gghalves)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we load the data with &lt;code&gt;read_csv()&lt;/code&gt;. Here I assume that the CSV file lives in a subfolder in my project named &lt;code&gt;data&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weather_atl_raw &amp;lt;- read_csv(&amp;quot;data/atl-weather-2019.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We‚Äôll add a couple columns that we can use for faceting and filling using the &lt;code&gt;month()&lt;/code&gt; and &lt;code&gt;wday()&lt;/code&gt; functions from &lt;strong&gt;lubridate&lt;/strong&gt; for extracting parts of the date:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weather_atl &amp;lt;- weather_atl_raw %&amp;gt;% 
  mutate(Month = month(time, label = TRUE, abbr = FALSE),
         Day = wday(time, label = TRUE, abbr = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we‚Äôre ready to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;histograms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Histograms&lt;/h3&gt;
&lt;p&gt;We can first make a histogram of wind speed. We‚Äôll use a bin width of 1 and color the edges of the bars white:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed)) +
  geom_histogram(binwidth = 1, color = &amp;quot;white&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/basic-histogram-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is fine enough, but we can improve it by forcing the buckets/bins to start at whole numbers instead of containing ranges like 2.5‚Äì3.5. We‚Äôll use the &lt;code&gt;boundary&lt;/code&gt; argument for that. We also add &lt;code&gt;scale_x_continuous()&lt;/code&gt; to add our own x-axis breaks instead of having things like 2.5, 5, and 7.5:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed)) +
  geom_histogram(binwidth = 1, color = &amp;quot;white&amp;quot;, boundary = 1) +
  scale_x_continuous(breaks = seq(0, 12, by = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/basic-histogram-better-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can show the distribution of wind speed by month if we map the &lt;code&gt;Month&lt;/code&gt; column we made onto the fill aesthetic:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed, fill = Month)) +
  geom_histogram(binwidth = 1, color = &amp;quot;white&amp;quot;, boundary = 1) +
  scale_x_continuous(breaks = seq(0, 12, by = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/histogram-by-month-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is colorful, but it‚Äôs impossible to actually interpret. Instead of only filling, we‚Äôll also facet by month to see separate graphs for each month. We can turn off the fill legend because it‚Äôs now redundant.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed, fill = Month)) +
  geom_histogram(binwidth = 1, color = &amp;quot;white&amp;quot;, boundary = 1) +
  scale_x_continuous(breaks = seq(0, 12, by = 1)) + 
  guides(fill = FALSE) +
  facet_wrap(vars(Month))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/histogram-by-month-facet-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat! January, March, and April appear to have the most variation in windy days, with a few wind-less days and a few very-windy days, while August was very wind-less.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;density-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Density plots&lt;/h3&gt;
&lt;p&gt;The code to create a density plot is nearly identical to what we used for the histogram‚Äîthe only thing we change is the &lt;code&gt;geom&lt;/code&gt; layer:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed)) +
  geom_density(color = &amp;quot;grey20&amp;quot;, fill = &amp;quot;grey50&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/basic-density-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we want, we can mess with some of the calculus options like the kernel and bandwidth:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed)) +
  geom_density(color = &amp;quot;grey20&amp;quot;, fill = &amp;quot;grey50&amp;quot;,
               bw = 0.1, kernel = &amp;quot;epanechnikov&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/density-kernel-bw-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also fill by month. We‚Äôll make the different layers 50% transparent so we can kind of see through the whole stack:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed, fill = Month)) +
  geom_density(alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/density-fill-by-month-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Even with the transparency, this is really hard to interpret. We can fix this by faceting, like we did with the histograms:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed, fill = Month)) +
  geom_density(alpha = 0.5) +
  guides(fill = FALSE) +
  facet_wrap(vars(Month))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/density-facet-by-month-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or we can stack the density plots behind each other with &lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&#34;&gt;&lt;strong&gt;ggridges&lt;/strong&gt;&lt;/a&gt;. For that to work, we also need to map &lt;code&gt;Month&lt;/code&gt; to the y-axis. We can reverse the y-axis so that January is at the top if we use the &lt;code&gt;fct_rev()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed, y = fct_rev(Month), fill = Month)) +
  geom_density_ridges() +
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/ggridges-basic-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can add some extra information to &lt;code&gt;geom_density_ridges()&lt;/code&gt; with some other arguments like &lt;code&gt;quantile_lines&lt;/code&gt;. We can use the &lt;code&gt;quantiles&lt;/code&gt; argument to tell the plow how many parts to be cut into. Since we just want to show the median, we‚Äôll set that to 2 so each density plot is divided in half:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = windSpeed, y = fct_rev(Month), fill = Month)) +
  geom_density_ridges(quantile_lines = TRUE, quantiles = 2) +
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/ggridges-quantile-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have good working code, we can easily substitute in other variables by changing the x mapping:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = temperatureHigh, y = fct_rev(Month), fill = Month)) +
  geom_density_ridges(quantile_lines = TRUE, quantiles = 2) +
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/ggridges-quantile-temp-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can get extra fancy if we fill by temperature instead of filling by month. To get this to work, we need to use &lt;code&gt;geom_density_ridges_gradient()&lt;/code&gt;, and we need to change the &lt;code&gt;fill&lt;/code&gt; mapping to the strange looking &lt;code&gt;..x..&lt;/code&gt;, which is a weird ggplot trick that tells it to use the variable we mapped to the x-axis. For whatever reason, &lt;code&gt;fill = temperatureHigh&lt;/code&gt; doesn‚Äôt work ü§∑:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = temperatureHigh, y = fct_rev(Month), fill = ..x..)) +
  geom_density_ridges_gradient(quantile_lines = TRUE, quantiles = 2) +
  scale_fill_viridis_c(option = &amp;quot;plasma&amp;quot;) +
  labs(x = &amp;quot;High temperature&amp;quot;, y = NULL, color = &amp;quot;Temp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/ggridges-gradient-temp-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And finally, we can get &lt;em&gt;extra&lt;/em&gt; fancy and show the distributions for both the high and low temperatures each month. To make this work, we need to manipulate the data a little. Right now there are two columns for high and low temperature: &lt;code&gt;temperatureLow&lt;/code&gt; and &lt;code&gt;temperatureHigh&lt;/code&gt;. To be able to map temperature to the x-axis and high vs.¬†low to another aesthetic (like &lt;code&gt;linetype&lt;/code&gt;), we need a column with the temperature and a column with an indicator variable for whether it is high or low. This data needs to be tidied (since right now we have a variable (high/low) encoded in the column name). We can tidy this data using &lt;code&gt;pivot_longer()&lt;/code&gt; from &lt;strong&gt;tidyr&lt;/strong&gt;, which was already loaded with &lt;code&gt;library(tidyverse)&lt;/code&gt;. In the RStudio primers, you did this same thing with &lt;code&gt;gather()&lt;/code&gt;‚Äî&lt;code&gt;pivot_longer()&lt;/code&gt; is the newer version of &lt;code&gt;gather()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weather_atl_long &amp;lt;- weather_atl %&amp;gt;% 
  pivot_longer(cols = c(temperatureLow, temperatureHigh),
               names_to = &amp;quot;temp_type&amp;quot;,
               values_to = &amp;quot;temp&amp;quot;) %&amp;gt;% 
  # Clean up the new temp_type column so that &amp;quot;temperatureHigh&amp;quot; becomes &amp;quot;High&amp;quot;, etc.
  mutate(temp_type = recode(temp_type, 
                            temperatureHigh = &amp;quot;High&amp;quot;,
                            temperatureLow = &amp;quot;Low&amp;quot;)) %&amp;gt;% 
  # This is optional‚Äîjust select a handful of columns
  select(time, temp_type, temp, Month) 

# Show the first few rows
head(weather_atl_long)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   time                temp_type  temp Month  
##   &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;  
## 1 2019-01-01 05:00:00 Low        50.6 January
## 2 2019-01-01 05:00:00 High       63.9 January
## 3 2019-01-02 05:00:00 Low        49.0 January
## 4 2019-01-02 05:00:00 High       57.4 January
## 5 2019-01-03 05:00:00 Low        53.1 January
## 6 2019-01-03 05:00:00 High       55.3 January&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a column for the temperature (&lt;code&gt;temp&lt;/code&gt;) and a column indicating if it is high or low (&lt;code&gt;temp_type&lt;/code&gt;). The dataset is also twice as long (730 rows) because each day has two rows (high and low). Let‚Äôs plot it and map high/low to the &lt;code&gt;linetype&lt;/code&gt; aesthetic to show high/low in the border of the plots:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl_long, aes(x = temp, y = fct_rev(Month), 
                             fill = ..x.., linetype = temp_type)) +
  geom_density_ridges_gradient(quantile_lines = TRUE, quantiles = 2) +
  scale_fill_viridis_c(option = &amp;quot;plasma&amp;quot;) +
  labs(x = &amp;quot;High temperature&amp;quot;, y = NULL, color = &amp;quot;Temp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/ggridges-gradient-temp-high-low-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Super neat! We can see much wider temperature disparities during the summer, with large gaps between high and low, and relatively equal high/low temperatures during the winter.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;box-violin-and-rain-cloud-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Box, violin, and rain cloud plots&lt;/h3&gt;
&lt;p&gt;Finally, we can look at the distribution of variables with box plots, violin plots, and other similar graphs. First, we‚Äôll make a box plot of windspeed, filled by the &lt;code&gt;Day&lt;/code&gt; variable we made indicating weekday:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(y = windSpeed, fill = Day)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/basic-boxplot-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can switch this to a violin plot by just changing the &lt;code&gt;geom&lt;/code&gt; layer and mapping &lt;code&gt;Day&lt;/code&gt; to the x-axis:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(y = windSpeed, x = Day, fill = Day)) +
  geom_violin()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/basic-violin-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With violin plots it‚Äôs typically good to overlay other geoms. We can add some jittered points for a strip plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(y = windSpeed, x = Day, fill = Day)) +
  geom_violin() +
  geom_point(size = 0.5, position = position_jitter(width = 0.1)) +
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/violin-strip-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also add larger points for the daily averages. We‚Äôll use a special layer for this: &lt;code&gt;stat_summary()&lt;/code&gt;. It has a slightly different syntax, since we‚Äôre not actually mapping a column from the dataset. Instead, we‚Äôre feeding a column from a dataset into a function (here &lt;code&gt;&#34;mean&#34;&lt;/code&gt;) and then plotting that result:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(y = windSpeed, x = Day, fill = Day)) +
  geom_violin() +
  stat_summary(geom = &amp;quot;point&amp;quot;, fun = &amp;quot;mean&amp;quot;, size = 5, color = &amp;quot;white&amp;quot;) +
  geom_point(size = 0.5, position = position_jitter(width = 0.1)) +
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/violin-strip-mean-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also show the mean and confidence interval at the same time by changing the summary function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(y = windSpeed, x = Day, fill = Day)) +
  geom_violin() +
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = &amp;quot;mean_se&amp;quot;, size = 1, color = &amp;quot;white&amp;quot;) +
  geom_point(size = 0.5, position = position_jitter(width = 0.1)) +
  guides(fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/violin-strip-mean-ci-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Overlaying the points directly on top of the violins shows extra information, but it‚Äôs also really crowded and hard to read. If we use &lt;a href=&#34;https://github.com/erocoar/gghalves&#34;&gt;the &lt;strong&gt;gghalves&lt;/strong&gt; package&lt;/a&gt;, we can use special halved versions of some of these geoms like so:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(x = fct_rev(Day), y = temperatureHigh)) +
  geom_half_point(aes(color = Day), side = &amp;quot;l&amp;quot;, size = 0.5) +
  geom_half_boxplot(aes(fill = Day), side = &amp;quot;r&amp;quot;) +
  guides(color = FALSE, fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/gghalves-point-boxplot-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note the &lt;code&gt;side&lt;/code&gt; argument for specifying which half of the column the geom goes. We can also use &lt;code&gt;geom_half_violin()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(x = fct_rev(Day), y = temperatureHigh)) +
  geom_half_point(aes(color = Day), side = &amp;quot;l&amp;quot;, size = 0.5) +
  geom_half_violin(aes(fill = Day), side = &amp;quot;r&amp;quot;) +
  guides(color = FALSE, fill = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/gghalves-point-violon-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we flip the plot, we can make a &lt;a href=&#34;https://micahallen.org/2018/03/15/introducing-raincloud-plots/&#34;&gt;rain cloud plot&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl,
       aes(x = fct_rev(Day), y = temperatureHigh)) +
  geom_half_boxplot(aes(fill = Day), side = &amp;quot;l&amp;quot;, width = 0.5, nudge = 0.1) +
  geom_half_point(aes(color = Day), side = &amp;quot;l&amp;quot;, size = 0.5) +
  geom_half_violin(aes(fill = Day), side = &amp;quot;r&amp;quot;) +
  guides(color = FALSE, fill = FALSE) + 
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/06-example_files/figure-html/gghalves-rain-cloud-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Uncertainty</title>
      <link>/lab/06-exercise/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/06-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-visualizing-uncertainty-with-gapminder&#34;&gt;Task 2: Visualizing uncertainty with gapminder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise you‚Äôll revisit Hans Rosling‚Äôs gapminder data on health and wealth.&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;You don‚Äôt need to download any CSV files for this assignment. If you run &lt;code&gt;library(gapminder)&lt;/code&gt; you‚Äôll have access to a data frame named &lt;code&gt;gapminder&lt;/code&gt; that contains all the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/06-exercise/06-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;06-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  06-exercise.Rmd
  your-project-name.Rproj&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/06-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;06-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-visualizing-uncertainty-with-gapminder&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Visualizing uncertainty with gapminder&lt;/h2&gt;
&lt;p&gt;Make the following plots and briefly explain what they show:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make a histogram of &lt;em&gt;logged&lt;/em&gt; GDP per capita for 1997 only, across all five continents&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a ridge plot of global life expectancy over time, from 1952 to 2007. You‚Äôll need to use the full gapminder data, not the 1997-only data. Each ridge should show the distribution of the world‚Äôs life expectancy for each given year (similar to the &lt;a href=&#34;/example/06-example/#density-plots&#34;&gt;temperature ridge plot in the example&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Important note: &lt;code&gt;year&lt;/code&gt; will be on the y-axis, but it must be a categorical variable to work with &lt;strong&gt;ggridges&lt;/strong&gt;, so you‚Äôll either need to wrap it in &lt;code&gt;as.factor()&lt;/code&gt; like &lt;code&gt;aes(..., y = as.factor(year))&lt;/code&gt;, or add a new categorical/factor year column to the gapminder dataset with &lt;code&gt;mutate()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a filtered dataset that selects data from only 2007 &lt;em&gt;and&lt;/em&gt; removes Oceania. Show the distribution of &lt;em&gt;logged&lt;/em&gt; GDP per capita across the &lt;em&gt;four&lt;/em&gt; continents using some combination of boxplots and/or violin plots and/or strip plots, either overlaid on top of each other, or using their &lt;code&gt;geom_half_*()&lt;/code&gt; counterparts from &lt;strong&gt;gghalves&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;/example/06-example/&#34;&gt;The example for today‚Äôs session&lt;/a&gt; will be &lt;em&gt;incredibly&lt;/em&gt; helpful for this exercise. Reference it.&lt;/p&gt;
&lt;p&gt;You don‚Äôt need to make these super fancy, but if you‚Äôre feeling brave, experiment with adding a &lt;code&gt;labs()&lt;/code&gt; layer or changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relationships</title>
      <link>/example/07-example/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/07-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-and-clean-data&#34;&gt;Load and clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#legal-dual-y-axes&#34;&gt;Legal dual y-axes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-plots&#34;&gt;Combining plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scatterplot-matrices&#34;&gt;Scatterplot matrices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#correlograms&#34;&gt;Correlograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simple-regression&#34;&gt;Simple regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#coefficient-plots&#34;&gt;Coefficient plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#marginal-effects-plots&#34;&gt;Marginal effects plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre again going to use historical weather data from &lt;a href=&#34;https://darksky.net/forecast/33.7546,-84.39/us12/en&#34;&gt;Dark Sky&lt;/a&gt; about wind speed and temperature trends for downtown Atlanta (&lt;a href=&#34;https://www.google.com/maps/place/33¬∞45&amp;#39;16.4%22N+84¬∞23&amp;#39;24.0%22W/@33.754557,-84.3921977,17z/&#34;&gt;specifically &lt;code&gt;33.754557, -84.390009&lt;/code&gt;&lt;/a&gt;) in 2019. I downloaded this data using Dark Sky‚Äôs (about-to-be-retired-because-they-were-bought-by-Apple) API using the &lt;a href=&#34;https://github.com/hrbrmstr/darksky&#34;&gt;&lt;strong&gt;darksky&lt;/strong&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to follow along with this example, you can download the data below (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/atl-weather-2019.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;atl-weather-2019.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/zfEAmJzfbkE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load and clean data&lt;/h3&gt;
&lt;p&gt;First, we load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(patchwork)  # For combining ggplot plots
library(GGally)     # For scatterplot matrices
library(broom)      # For converting model objects to data frames&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we load the data with &lt;code&gt;read_csv()&lt;/code&gt;. Here I assume that the CSV file lives in a subfolder in my project named &lt;code&gt;data&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weather_atl &amp;lt;- read_csv(&amp;quot;data/atl-weather-2019.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;legal-dual-y-axes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Legal dual y-axes&lt;/h3&gt;
&lt;p&gt;It is fine (and often helpful!) to use two y-axes if the two different scales measure the same thing, like counts and percentages, Fahrenheit and Celsius, pounds and kilograms, inches and centimeters, etc.&lt;/p&gt;
&lt;p&gt;To do this, you need to add an argument (&lt;code&gt;sec.axis&lt;/code&gt;) to &lt;code&gt;scale_y_continuous()&lt;/code&gt; to tell it to use a second axis. This &lt;code&gt;sec.axis&lt;/code&gt; argument takes a &lt;code&gt;sec_axis()&lt;/code&gt; function that tells ggplot how to transform the scale. You need to specify a formula or function that defines how the original axis gets transformed. This formula uses a special syntax. It needs to start with a &lt;code&gt;~&lt;/code&gt;, which indicates that it‚Äôs a function, and it needs to use &lt;code&gt;.&lt;/code&gt; to stand in for the original value in the original axis.&lt;/p&gt;
&lt;p&gt;Since the equation for converting Fahrenheit to Celsius is this‚Ä¶&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{C} = (32 - \text{F}) \times -\frac{5}{9}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;‚Ä¶we can specify this with code like so (where &lt;code&gt;.&lt;/code&gt; stands for the Fahrenheit value):&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;~ (32 - .) * -5 / 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here‚Äôs a plot of daily high temperatures in Atlanta throughout 2019, with a second axis:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = time, y = temperatureHigh)) +
  geom_line() +
  scale_y_continuous(sec.axis = sec_axis(trans = ~ (32 - .) * -5/9,
                                         name = &amp;quot;Celsius&amp;quot;)) +
  labs(x = NULL, y = &amp;quot;Fahrenheit&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/atl-weather-dual-axes-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For fun, we could also convert it to Kelvin, which uses this formula:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{K} = (\text{F} - 32) \times \frac{5}{9} + 273.15
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl, aes(x = time, y = temperatureHigh)) +
  geom_line() +
  scale_y_continuous(sec.axis = sec_axis(trans = ~ (. - 32) * 5/9 + 273.15,
                                         name = &amp;quot;Kelvin&amp;quot;)) +
  labs(x = NULL, y = &amp;quot;Fahrenheit&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/atl-weather-dual-axes-kelvin-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combining-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining plots&lt;/h3&gt;
&lt;p&gt;A good alternative to using two y-axes is to use two plots instead. The &lt;a href=&#34;https://github.com/thomasp85/patchwork&#34;&gt;&lt;strong&gt;patchwork&lt;/strong&gt; package&lt;/a&gt; makes this &lt;em&gt;really&lt;/em&gt; easy to do with R. There are other similar packages that do this, like &lt;strong&gt;cowplot&lt;/strong&gt; and &lt;strong&gt;gridExtra&lt;/strong&gt;, but I‚Äôve found that &lt;strong&gt;patchwork&lt;/strong&gt; is the easiest to use &lt;em&gt;and&lt;/em&gt; it actually aligns the different plot elements like axis lines and legends (yay alignment in CRAP!). The &lt;a href=&#34;https://patchwork.data-imaginist.com/articles/guides/assembly.html&#34;&gt;documentation for &lt;strong&gt;patchwork&lt;/strong&gt;&lt;/a&gt; is really great and full of examples‚Äîyou should check it out to see all the things you can do with it!&lt;/p&gt;
&lt;p&gt;To use &lt;strong&gt;patchwork&lt;/strong&gt;, we need to (1) save our plots as objects and (2) add them together with &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, is there a relationship between temperature and humidity in Atlanta? We can plot both:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Temperature in Atlanta
temp_plot &amp;lt;- ggplot(weather_atl, aes(x = time, y = temperatureHigh)) +
  geom_line() +
  geom_smooth() +
  scale_y_continuous(sec.axis = sec_axis(trans = ~ (32 - .) * -5/9,
                                         name = &amp;quot;Celsius&amp;quot;)) +
  labs(x = NULL, y = &amp;quot;Fahrenheit&amp;quot;) +
  theme_minimal()
temp_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/create-temp-humid-plots-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Humidity in Atlanta
humidity_plot &amp;lt;- ggplot(weather_atl, aes(x = time, y = humidity)) +
  geom_line() +
  geom_smooth() +
  labs(x = NULL, y = &amp;quot;Humidity&amp;quot;) +
  theme_minimal()
humidity_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/create-temp-humid-plots-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Right now, these are two separate plots, but we can combine them with &lt;code&gt;+&lt;/code&gt; if we load &lt;strong&gt;patchwork&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(patchwork)

temp_plot + humidity_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/patchwork-first-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By default, &lt;strong&gt;patchwork&lt;/strong&gt; will put these side-by-side, but we can change that with the &lt;code&gt;plot_layout()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_plot + humidity_plot +
  plot_layout(ncol = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/patchwork-vertical-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also play with other arguments in &lt;code&gt;plot_layout()&lt;/code&gt;. If we want to make the temperature plot taller and shrink the humidity section, we can specify the proportions for the plot heights. Here, the temperature plot is 70% of the height and the humidity plot is 30%:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_plot + humidity_plot +
  plot_layout(ncol = 1, heights = c(0.7, 0.3))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/patchwork-vertical-resized-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scatterplot-matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scatterplot matrices&lt;/h3&gt;
&lt;p&gt;We can visualize the correlations between pairs of variables with the &lt;code&gt;ggpairs()&lt;/code&gt; function in the &lt;strong&gt;GGally&lt;/strong&gt; package. For instance, how correlated are high and low temperatures, humidity, wind speed, and the chance of precipitation? We first make a smaller dataset with just those columns, and then we feed that dataset into &lt;code&gt;ggpairs()&lt;/code&gt; to see all the correlation information:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GGally)

weather_correlations &amp;lt;- weather_atl %&amp;gt;% 
  select(temperatureHigh, temperatureLow, humidity, windSpeed, precipProbability)

ggpairs(weather_correlations)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/ggpairs-1.png&#34; width=&#34;864&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It looks like high and low temperatures are extremely highly positively correlated (r = 0.92). Wind spped and temperature are moderately negatively correlated, with low temperatures having a stronger negative correlation (r = -0.45). There‚Äôs no correlation whatsoever between low temperatures and the precipitation probability (r = -0.03) or humidity and high temperatures (r = -0.03).&lt;/p&gt;
&lt;p&gt;Even though &lt;code&gt;ggpairs()&lt;/code&gt; doesn‚Äôt use the standard &lt;code&gt;ggplot(...) + geom_whatever()&lt;/code&gt; syntax we‚Äôre familiar with, it does behind the scenes, so you can add regular ggplot layers to it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggpairs(weather_correlations) +
  labs(title = &amp;quot;Correlations!&amp;quot;) +
  theme_dark()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;correlograms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Correlograms&lt;/h3&gt;
&lt;p&gt;Scatterplot matrices typically include way too much information to be used in actual publications. I use them when doing my own analysis just to see how different variables are related, but I rarely polish them up for public consumption. In the readings for today, Claus Wilke showed a type of plot called a &lt;a href=&#34;https://serialmentor.com/dataviz/visualizing-associations.html#associations-correlograms&#34;&gt;&lt;em&gt;correlogram&lt;/em&gt;&lt;/a&gt; which &lt;em&gt;is&lt;/em&gt; more appropriate for publication.&lt;/p&gt;
&lt;p&gt;These are essentially heatmaps of the different correlation coefficients. To make these with ggplot, we need to do a little bit of extra data processing, mostly to reshape data into a long, tidy format that we can plot. Here‚Äôs how.&lt;/p&gt;
&lt;p&gt;First we need to build a correlation matrix of the main variables we care about. Ordinarily the &lt;code&gt;cor()&lt;/code&gt; function in R takes two arguments‚Äîx and y‚Äîand it will return a single correlation value. If you feed a data frame into &lt;code&gt;cor()&lt;/code&gt; though, it‚Äôll calculate the correlation between each pair of columns&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a correlation matrix
things_to_correlate &amp;lt;- weather_atl %&amp;gt;% 
  select(temperatureHigh, temperatureLow, humidity, windSpeed, precipProbability) %&amp;gt;% 
  cor()

things_to_correlate&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   temperatureHigh temperatureLow humidity windSpeed precipProbability
## temperatureHigh              1.00          0.920   -0.030    -0.377            -0.124
## temperatureLow               0.92          1.000    0.112    -0.450            -0.026
## humidity                    -0.03          0.112    1.000     0.011             0.722
## windSpeed                   -0.38         -0.450    0.011     1.000             0.196
## precipProbability           -0.12         -0.026    0.722     0.196             1.000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two halves of this matrix (split along the diagonal line) are identical, so we can remove the lower triangle with this code (which will set all the cells in the lower triangle to &lt;code&gt;NA&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get rid of the lower triangle
things_to_correlate[lower.tri(things_to_correlate)] &amp;lt;- NA
things_to_correlate&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   temperatureHigh temperatureLow humidity windSpeed precipProbability
## temperatureHigh                 1           0.92    -0.03    -0.377            -0.124
## temperatureLow                 NA           1.00     0.11    -0.450            -0.026
## humidity                       NA             NA     1.00     0.011             0.722
## windSpeed                      NA             NA       NA     1.000             0.196
## precipProbability              NA             NA       NA        NA             1.000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, in order to plot this, the data needs to be in tidy (or long) format. Here we convert the &lt;code&gt;things_to_correlate&lt;/code&gt; matrix into a data frame, add a column for the row names, take all the columns and put them into a single column named &lt;code&gt;measure1&lt;/code&gt;, and take all the correlation numbers and put them in a column named &lt;code&gt;cor&lt;/code&gt; In the end, we make sure the measure variables are ordered by their order of appearance (otherwise they plot alphabetically and don‚Äôt make a triangle)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;things_to_correlate_long &amp;lt;- things_to_correlate %&amp;gt;% 
  # Convert from a matrix to a data frame
  as.data.frame() %&amp;gt;% 
  # Matrixes have column names that don&amp;#39;t get converted to columns when using
  # as.data.frame(), so this adds those names as a column
  rownames_to_column(&amp;quot;measure2&amp;quot;) %&amp;gt;% 
  # Make this long. Take all the columns except measure2 and put their names in
  # a column named measure1 and their values in a column named cor
  pivot_longer(cols = -measure2,
               names_to = &amp;quot;measure1&amp;quot;,
               values_to = &amp;quot;cor&amp;quot;) %&amp;gt;% 
  # Make a new column with the rounded version of the correlation value
  mutate(nice_cor = round(cor, 2)) %&amp;gt;% 
  # Remove rows where the two measures are the same (like the correlation
  # between humidity and humidity)
  filter(measure2 != measure1) %&amp;gt;%
  # Get rid of the empty triangle
  filter(!is.na(cor)) %&amp;gt;% 
  # Put these categories in order
  mutate(measure1 = fct_inorder(measure1),
         measure2 = fct_inorder(measure2))

things_to_correlate_long&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 4
##    measure2        measure1              cor nice_cor
##    &amp;lt;fct&amp;gt;           &amp;lt;fct&amp;gt;               &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 temperatureHigh temperatureLow     0.920      0.92
##  2 temperatureHigh humidity          -0.0301    -0.03
##  3 temperatureHigh windSpeed         -0.377     -0.38
##  4 temperatureHigh precipProbability -0.124     -0.12
##  5 temperatureLow  humidity           0.112      0.11
##  6 temperatureLow  windSpeed         -0.450     -0.45
##  7 temperatureLow  precipProbability -0.0255    -0.03
##  8 humidity        windSpeed          0.0108     0.01
##  9 humidity        precipProbability  0.722      0.72
## 10 windSpeed       precipProbability  0.196      0.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew. With the data all tidied like that, we can make a correlogram with a heatmap. This is just like &lt;a href=&#34;https://datavizm20.classes.andrewheiss.com/example/04-example/#heatmap&#34;&gt;the heatmap you made in session 4&lt;/a&gt;, but here we manipulate the fill scale a little so that it‚Äôs diverging with three colors: a high value, a midpoint value, and a low value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(things_to_correlate_long, 
       aes(x = measure2, y = measure1, fill = cor)) +
  geom_tile() +
  geom_text(aes(label = nice_cor)) +
  scale_fill_gradient2(low = &amp;quot;#E16462&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#0D0887&amp;quot;,
                       limits = c(-1, 1)) +
  labs(x = NULL, y = NULL) +
  coord_equal() +
  theme_minimal() +
  theme(panel.grid = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/cor-heatmap-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Instead of using a heatmap, we can also use points, which encode the correlation information both as color &lt;em&gt;and&lt;/em&gt; as size. To do that, we just need to switch &lt;code&gt;geom_tile()&lt;/code&gt; to &lt;code&gt;geom_point()&lt;/code&gt; and set the &lt;code&gt;size = cor&lt;/code&gt; mapping:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(things_to_correlate_long, 
       aes(x = measure2, y = measure1, color = cor)) +
  # Size by the absolute value so that -0.7 and 0.7 are the same size
  geom_point(aes(size = abs(cor))) +
  scale_color_gradient2(low = &amp;quot;#E16462&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#0D0887&amp;quot;,
                        limits = c(-1, 1)) +
  scale_size_area(max_size = 15, limits = c(-1, 1), guide = FALSE) +
  labs(x = NULL, y = NULL) +
  coord_equal() +
  theme_minimal() +
  theme(panel.grid = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/cor-points-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-regression&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Simple regression&lt;/h3&gt;
&lt;p&gt;We can also visualize the relationships between variables using regression. Simple regression is easy to visualize, since you‚Äôre only working with an X and a Y. For instance, what‚Äôs the relationship between humidity and high temperatures during the summer?&lt;/p&gt;
&lt;p&gt;First, let‚Äôs filter the data to only look at the summer. We also add a column to scale up the humidity value‚Äîright now it‚Äôs on a scale of 0-1 (for percentages), but when interpreting regression we talk about increases in whole units, so we‚Äôd talk about moving from 0% humidity to 100% humidity, which isn‚Äôt helpful, so instead we multiply everything by 100 so we can talk about moving from 50% humidity to 51% humidity. We also scale up a couple other variables that we‚Äôll use in the larger model later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weather_atl_summer &amp;lt;- weather_atl %&amp;gt;% 
  filter(time &amp;gt;= &amp;quot;2019-05-01&amp;quot;, time &amp;lt;= &amp;quot;2019-09-30&amp;quot;) %&amp;gt;% 
  mutate(humidity_scaled = humidity * 100,
         moonPhase_scaled = moonPhase * 100,
         precipProbability_scaled = precipProbability * 100,
         cloudCover_scaled = cloudCover * 100)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can build a simple regression model:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_simple &amp;lt;- lm(temperatureHigh ~ humidity_scaled, 
                   data = weather_atl_summer)

tidy(model_simple, conf.int = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 7
##   term            estimate std.error statistic  p.value conf.low conf.high
##   &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 (Intercept)      104.       2.35       44.3  1.88e-88   99.5     109.   
## 2 humidity_scaled   -0.241    0.0358     -6.74 3.21e-10   -0.312    -0.170&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can interpret these coefficients like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The intercept shows that the average temperature when there‚Äôs 0% humidity is 104¬∞. There are no days with 0% humidity though, so we can ignore the intercept‚Äîit‚Äôs really just here so that we can draw the line.&lt;/li&gt;
&lt;li&gt;The coefficient for &lt;code&gt;humidity_scaled&lt;/code&gt; shows that a one percent increase in humidity is associated with a 0.241¬∞ decrease in temperature, on average.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visualizing this model is simple, since there are only two variables:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(weather_atl_summer,
       aes(x = humidity_scaled, y = temperatureHigh)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/plot-simple-model-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And indeed, as humidity increases, temperatures decrease.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;coefficient-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Coefficient plots&lt;/h3&gt;
&lt;p&gt;But if we use multiple variables in the model, it gets really hard to visualize the results since we‚Äôre working with multiple dimensions. Instead, we can use coefficient plots to see the individual coefficients in the model.&lt;/p&gt;
&lt;p&gt;First, let‚Äôs build a more complex model:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_complex &amp;lt;- lm(temperatureHigh ~ humidity_scaled + moonPhase_scaled + 
                      precipProbability_scaled + windSpeed + pressure + cloudCover_scaled,
                    data = weather_atl_summer)
tidy(model_complex, conf.int = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 7
##   term                     estimate std.error statistic   p.value conf.low conf.high
##   &amp;lt;chr&amp;gt;                       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 (Intercept)              262.      125.         2.09  0.0380    14.8      510.    
## 2 humidity_scaled           -0.111     0.0757    -1.47  0.143     -0.261      0.0381
## 3 moonPhase_scaled           0.0116    0.0126     0.917 0.360     -0.0134     0.0366
## 4 precipProbability_scaled   0.0356    0.0203     1.75  0.0820    -0.00458    0.0758
## 5 windSpeed                 -1.78      0.414     -4.29  0.0000326 -2.59      -0.958 
## 6 pressure                  -0.157     0.122     -1.28  0.203     -0.398      0.0854
## 7 cloudCover_scaled         -0.0952    0.0304    -3.14  0.00207   -0.155     -0.0352&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can interpret these coefficients like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Holding everything else constant, a 1% increase in humidity is associated with a 0.11¬∞ decrease in the high temperature, on average, but the effect is not statistically significant&lt;/li&gt;
&lt;li&gt;Holding everything else constant, a 1% increase in moon visibility is associated with a 0.01¬∞ increase in the high temperature, on average, and the effect is not statistically significant&lt;/li&gt;
&lt;li&gt;Holding everything else constant, a 1% increase in the probability of precipitation is associated with a 0.04¬∞ increase in the high temperature, on average, and the effect is not statistically significant&lt;/li&gt;
&lt;li&gt;Holding everything else constant, a 1 mph increase in the wind speed is associated with a 1.8¬∞ decrease in the high temperature, on average, and the effect &lt;em&gt;is&lt;/em&gt; statistically significant&lt;/li&gt;
&lt;li&gt;Holding everything else constant, a 1 unit increase in barometric pressure is associated with a 0.15¬∞ decrease in the high temperature, on average, and the effect is not statistically significant&lt;/li&gt;
&lt;li&gt;Holding everything else constant, a 1% increase in cloud cover is associated with a 0.01¬∞ decrease in the high temperature, on average, and the effect &lt;em&gt;is&lt;/em&gt; statistically significant&lt;/li&gt;
&lt;li&gt;The intercept is pretty useless. It shows that the predicted temperature will be 262¬∞ when humidity is 0%, the moon is invisible, there‚Äôs no chance of precipitation, no wind, no barometric pressure, and no cloud cover. Yikes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To plot all these things at once, we‚Äôll store the results of &lt;code&gt;tidy(model_complex)&lt;/code&gt; as a data frame, remove the useless intercept, and plot it using &lt;code&gt;geom_pointrange()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_tidied &amp;lt;- tidy(model_complex, conf.int = TRUE) %&amp;gt;% 
  filter(term != &amp;quot;(Intercept)&amp;quot;)

ggplot(model_tidied,
       aes(x = estimate, y = term)) +
  geom_vline(xintercept = 0, color = &amp;quot;red&amp;quot;, linetype = &amp;quot;dotted&amp;quot;) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high)) + 
  labs(x = &amp;quot;Coefficient estimate&amp;quot;, y = NULL) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/coef-plot-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat! Now we can see how big these different coefficients are and how close they are to zero. Wind speed has a big significant effect on temperature. The others are all very close to zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;marginal-effects-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Marginal effects plots&lt;/h3&gt;
&lt;p&gt;Instead of just looking at the coefficients, we can also see the effect of moving different variables up and down like sliders and switches. Remember that regression coefficients allow us to build actual mathematical formulas that predict the value of Y. The coefficients from &lt;code&gt;model_compex&lt;/code&gt; yield the following big hairy ugly equation:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\hat{\text{High temperature}} =&amp;amp; 262 - 0.11 \times \text{humidity_scaled } \\
&amp;amp; + 0.01 \times \text{moonPhase_scaled } + 0.04 \times \text{precipProbability_scaled } \\
&amp;amp; - 1.78 \times \text{windSpeed} - 0.16 \times \text{pressure} - 0.095 \times \text{cloudCover_scaled}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If we plug in values for each of the explanatory variables, we can get the predicted value of high temperature, or &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;augment()&lt;/code&gt; function in the &lt;strong&gt;broom&lt;/strong&gt; library allows us to take a data frame of explanatory variable values, plug them into the model equation, and get predictions out. For example, let‚Äôs set each of the variables to some arbitrary values (50% for humidity, moon phase, chance of rain, and cloud cover; 1000 for pressure, and 1 MPH for wind speed).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;newdata_example &amp;lt;- tibble(humidity_scaled = 50, moonPhase_scaled = 50, 
                          precipProbability_scaled = 50, windSpeed = 1, 
                          pressure = 1000, cloudCover_scaled = 50)
newdata_example&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   humidity_scaled moonPhase_scaled precipProbability_scaled windSpeed pressure cloudCover_scaled
##             &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;                    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
## 1              50               50                       50         1     1000                50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plug these values into the model with &lt;code&gt;augment()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I use select() here because augment() returns columns for all the explanatory
# variables, and the .fitted column with the predicted value is on the far right
# and gets cut off
augment(model_complex, newdata = newdata_example) %&amp;gt;% 
  select(.fitted, .se.fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   .fitted .se.fit
##     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1    96.2    3.19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given these weather conditions, the predicted high temperature is 96.2¬∞. Now you‚Äôre an armchair meteorologist!&lt;/p&gt;
&lt;p&gt;We can follow the same pattern to show how the predicted temperature changes as specific variables change across a whole range. Here, we create a data frame of possible wind speeds and keep all the other explanatory variables at their means:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;newdata &amp;lt;- tibble(windSpeed = seq(0, 8, 0.5),
                  pressure = mean(weather_atl_summer$pressure),
                  precipProbability_scaled = mean(weather_atl_summer$precipProbability_scaled),
                  moonPhase_scaled = mean(weather_atl_summer$moonPhase_scaled),
                  humidity_scaled = mean(weather_atl_summer$humidity_scaled),
                  cloudCover_scaled = mean(weather_atl_summer$cloudCover_scaled))
newdata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 17 x 6
##    windSpeed pressure precipProbability_scaled moonPhase_scaled humidity_scaled cloudCover_scaled
##        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;                    &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
##  1       0      1016.                     40.2             50.7            64.8              29.5
##  2       0.5    1016.                     40.2             50.7            64.8              29.5
##  3       1      1016.                     40.2             50.7            64.8              29.5
##  4       1.5    1016.                     40.2             50.7            64.8              29.5
##  5       2      1016.                     40.2             50.7            64.8              29.5
##  6       2.5    1016.                     40.2             50.7            64.8              29.5
##  7       3      1016.                     40.2             50.7            64.8              29.5
##  8       3.5    1016.                     40.2             50.7            64.8              29.5
##  9       4      1016.                     40.2             50.7            64.8              29.5
## 10       4.5    1016.                     40.2             50.7            64.8              29.5
## 11       5      1016.                     40.2             50.7            64.8              29.5
## 12       5.5    1016.                     40.2             50.7            64.8              29.5
## 13       6      1016.                     40.2             50.7            64.8              29.5
## 14       6.5    1016.                     40.2             50.7            64.8              29.5
## 15       7      1016.                     40.2             50.7            64.8              29.5
## 16       7.5    1016.                     40.2             50.7            64.8              29.5
## 17       8      1016.                     40.2             50.7            64.8              29.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we feed this big data frame into &lt;code&gt;augment()&lt;/code&gt;, we can get the predicted high temperature for each row. We can also use the &lt;code&gt;.se.fit&lt;/code&gt; column to calculate the 95% confidence interval for each predicted value. We take the standard error, multiply it by -1.96 and 1.96 (or the quantile of the normal distribution at 2.5% and 97.5%), and add that value to the estimate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predicted_values &amp;lt;- augment(model_complex, newdata = newdata) %&amp;gt;% 
  mutate(conf.low = .fitted + (-1.96 * .se.fit),
         conf.high = .fitted + (1.96 * .se.fit))

predicted_values %&amp;gt;% 
  select(windSpeed, .fitted, .se.fit, conf.low, conf.high) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   windSpeed .fitted .se.fit conf.low conf.high
##       &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1       0      95.3   1.63      92.2      98.5
## 2       0.5    94.5   1.42      91.7      97.2
## 3       1      93.6   1.22      91.2      96.0
## 4       1.5    92.7   1.03      90.7      94.7
## 5       2      91.8   0.836     90.1      93.4
## 6       2.5    90.9   0.653     89.6      92.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool! Just looking at the data in the table, we can see that predicted temperature drops as windspeed increases. We can plot this to visualize the effect:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(predicted_values, aes(x = windSpeed, y = .fitted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
              fill = &amp;quot;#BF3984&amp;quot;, alpha = 0.5) + 
  geom_line(size = 1, color = &amp;quot;#BF3984&amp;quot;) +
  labs(x = &amp;quot;Wind speed (MPH)&amp;quot;, y = &amp;quot;Predicted high temperature (F)&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/mfx-plot-simple-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We just manipulated one of the model coefficients and held everything else at its mean. We can manipulate multiple variables too and encode them all on the graph. For instance, what is the effect of windspeed &lt;em&gt;and&lt;/em&gt; cloud cover on the temperature?&lt;/p&gt;
&lt;p&gt;We‚Äôll follow the same process, but vary both &lt;code&gt;windSpeed&lt;/code&gt; and &lt;code&gt;cloudCover_scaled&lt;/code&gt;. Instead of using &lt;code&gt;tibble()&lt;/code&gt;, we use &lt;code&gt;exapnd_grid()&lt;/code&gt;, which creates every combination of the variables we specify. Instead of varying cloud cover by every possible value (like from 0 to 100), we‚Äôll choose four possible cloud cover types: 0%, 33%, 66%, and 100%. Everything else will be at its mean.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;newdata_fancy &amp;lt;- expand_grid(windSpeed = seq(0, 8, 0.5),
                             pressure = mean(weather_atl_summer$pressure),
                             precipProbability_scaled = mean(weather_atl_summer$precipProbability_scaled),
                             moonPhase_scaled = mean(weather_atl_summer$moonPhase_scaled),
                             humidity_scaled = mean(weather_atl_summer$humidity_scaled),
                             cloudCover_scaled = c(0, 33, 66, 100))
newdata_fancy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 68 x 6
##    windSpeed pressure precipProbability_scaled moonPhase_scaled humidity_scaled cloudCover_scaled
##        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;                    &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
##  1       0      1016.                     40.2             50.7            64.8                 0
##  2       0      1016.                     40.2             50.7            64.8                33
##  3       0      1016.                     40.2             50.7            64.8                66
##  4       0      1016.                     40.2             50.7            64.8               100
##  5       0.5    1016.                     40.2             50.7            64.8                 0
##  6       0.5    1016.                     40.2             50.7            64.8                33
##  7       0.5    1016.                     40.2             50.7            64.8                66
##  8       0.5    1016.                     40.2             50.7            64.8               100
##  9       1      1016.                     40.2             50.7            64.8                 0
## 10       1      1016.                     40.2             50.7            64.8                33
## # ‚Ä¶ with 58 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice now that &lt;code&gt;windSpeed&lt;/code&gt; repeats four times (0, 0, 0, 0, 0.5, 0.5, etc.), since there are four possible &lt;code&gt;cloudCover_scaled&lt;/code&gt; values (0, 33, 66, 100).&lt;/p&gt;
&lt;p&gt;We can plot this now, just like before, with wind speed on the x-axis, the predicted temperature on the y-axis, and colored and faceted by cloud cover:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predicted_values_fancy &amp;lt;- augment(model_complex, newdata = newdata_fancy) %&amp;gt;% 
  mutate(conf.low = .fitted + (-1.96 * .se.fit),
         conf.high = .fitted + (1.96 * .se.fit)) %&amp;gt;% 
  # Make cloud cover a categorical variable
  mutate(cloudCover_scaled = factor(cloudCover_scaled))

ggplot(predicted_values_fancy, aes(x = windSpeed, y = .fitted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = cloudCover_scaled),
              alpha = 0.5) + 
  geom_line(aes(color = cloudCover_scaled), size = 1) +
  labs(x = &amp;quot;Wind speed (MPH)&amp;quot;, y = &amp;quot;Predicted high temperature (F)&amp;quot;) +
  theme_minimal() +
  guides(fill = FALSE, color = FALSE) +
  facet_wrap(vars(cloudCover_scaled), nrow = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/07-example_files/figure-html/mfx-complex-1.png&#34; width=&#34;864&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs so neat! Temperatures go down slightly as cloud cover increases. If we wanted to improve the model, we‚Äôd add an interaction term between cloud cover and windspeed so that each line would have a different slope in addition to a different intercept, but that‚Äôs beyond the scope of this class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relationships</title>
      <link>/lab/07-exercise/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/07-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-combining-plots&#34;&gt;Task 2: Combining plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-3-visualizing-regression&#34;&gt;Task 3: Visualizing regression&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coefficient-plot&#34;&gt;Coefficient plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#marginal-effects&#34;&gt;Marginal effects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bonus-task-correlograms&#34;&gt;Bonus task! Correlograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise you‚Äôll use precinct-level data from the 2016 presidential election to visualize relationships between variables. This data comes from the &lt;a href=&#34;https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/VOQCHQ&#34;&gt;MIT Election Data and Science Lab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/07-exercise/data/results_2016.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;results_2016.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/07-exercise/07-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;07-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  07-exercise.Rmd
  your-project-name.Rproj
  data\
    results_2016.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/07-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;07-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;/example/07-example/&#34;&gt;The example for today‚Äôs session&lt;/a&gt; will be &lt;strong&gt;&lt;em&gt;incredibly&lt;/em&gt;&lt;/strong&gt; helpful for this exercise. Reference it.&lt;/p&gt;
&lt;p&gt;Again, you don‚Äôt need to make your plots super fancy, but if you‚Äôre feeling brave, experiment with adding a &lt;code&gt;labs()&lt;/code&gt; layer or changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-combining-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Combining plots&lt;/h2&gt;
&lt;p&gt;Make 2‚Äì3 plots of anything you want from the &lt;code&gt;results_2016&lt;/code&gt; data (histogram, density, boxplot, scatterplot, whatever) and combine them with &lt;strong&gt;patchwork&lt;/strong&gt;. Look at &lt;a href=&#34;https://patchwork.data-imaginist.com/articles/guides/assembly.html&#34;&gt;the documentation&lt;/a&gt; to see fancy ways of combining them, like having two rows inside a column.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-3-visualizing-regression&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 3: Visualizing regression&lt;/h2&gt;
&lt;div id=&#34;coefficient-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Coefficient plot&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;results_2016&lt;/code&gt; data to create a model that predicts the percent of Democratic votes in a precinct based on age, race, income, rent, and state (hint: the formula will look like this: &lt;code&gt;percent_dem ~ median_age + percent_white + per_capita_income + median_rent + state&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;tidy()&lt;/code&gt; in the &lt;strong&gt;broom&lt;/strong&gt; package and &lt;code&gt;geom_pointrange()&lt;/code&gt; to create a coefficient plot for the model estimates. You‚Äôll have 50 rows for all the states, and that‚Äôs excessive for a plot like this, so you‚Äôll want to filter out the state rows. You can do that by adding this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy(...) %&amp;gt;%
  filter(!str_detect(term, &amp;quot;state&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;str_detect()&lt;/code&gt; function looks for the characters ‚Äústate‚Äù in the term column. The &lt;code&gt;!&lt;/code&gt; negates it. This is thus saying ‚Äúonly keep rows where the word ‚Äòstate‚Äô is not in the term name‚Äù.&lt;/p&gt;
&lt;p&gt;You should also get rid of the intercept (&lt;code&gt;filter(term != &#34;(Intercept)&#34;)&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;marginal-effects&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Marginal effects&lt;/h3&gt;
&lt;p&gt;Create a new data frame with &lt;code&gt;tibble()&lt;/code&gt; that contains a column for the average value for each variable in your model &lt;em&gt;except for one&lt;/em&gt;, which you vary. For state, you‚Äôll need to choose a single state. The new dataset should look something like this (though this is incomplete! You‚Äôll need to include all the variables in your model, and you‚Äôll need to vary one using &lt;code&gt;seq()&lt;/code&gt;) (like &lt;code&gt;seq(9000, 60000, by = 100)&lt;/code&gt; for &lt;code&gt;per_capita_income&lt;/code&gt;). The &lt;code&gt;na.rm&lt;/code&gt; argument in &lt;code&gt;mean()&lt;/code&gt; here makes it so missing values are removed‚Äîwithout it, R can‚Äôt calculate the mean and will return &lt;code&gt;NA&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_to_predict &amp;lt;- tibble(median_age = mean(results_2016$median_age, na.rm = TRUE),
                          percent_white = mean(results_2016$percent_white,  na.rm = TRUE),
                          state = &amp;quot;Georgia&amp;quot;)  # Or whatever&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;augment()&lt;/code&gt; to generate predictions from this dataset using the model you created before. Plot your varied variable on the x-axis, the fitted values (&lt;code&gt;.fitted&lt;/code&gt;) on the y-axis, show the relationship with a line, and add a ribbon to show the 95% confidence interval.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-task-correlograms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus task! Correlograms&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This is entirely optional but might be fun.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For extra fun times, if you feel like it, create a correlogram heatmap, either with &lt;code&gt;geom_tile()&lt;/code&gt; or with points sized by the correlation. Use any variables you want from &lt;code&gt;results_2016&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Comparisons</title>
      <link>/example/08-example/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/08-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-and-clean-data&#34;&gt;Load and clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#small-multiples&#34;&gt;Small multiples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sparklines&#34;&gt;Sparklines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slopegraphs&#34;&gt;Slopegraphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bump-charts&#34;&gt;Bump charts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre going to use cross-national data, but instead of using the typical &lt;code&gt;gapminder&lt;/code&gt; dataset, we‚Äôre going to collect data directly from the &lt;a href=&#34;https://data.worldbank.org/&#34;&gt;World Bank‚Äôs Open Data portal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to skip the data downloading, you can download the data below (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/wdi_raw.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;wdi_raw.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/tCnfTLHtMs8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load and clean data&lt;/h3&gt;
&lt;p&gt;First, we load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(WDI)        # For getting data from the World Bank
library(geofacet)   # For map-shaped facets
library(scales)     # For helpful scale functions like dollar()
library(ggrepel)    # For non-overlapping labels&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The World Bank has a ton of country-level data at &lt;a href=&#34;https://data.worldbank.org/&#34;&gt;data.worldbank.org&lt;/a&gt;. We can use &lt;a href=&#34;https://cran.r-project.org/package=WDI&#34;&gt;a package named &lt;strong&gt;WDI&lt;/strong&gt;&lt;/a&gt; (&lt;strong&gt;w&lt;/strong&gt;orld &lt;strong&gt;d&lt;/strong&gt;evelopment &lt;strong&gt;i&lt;/strong&gt;ndicators) to access their servers and download the data directly into R.&lt;/p&gt;
&lt;p&gt;To do this, we need to find the special World Bank codes for specific variables we want to get. These codes come from the URLs of the World Bank‚Äôs website. For instance, if you search for ‚Äúaccess to electricity‚Äù at the World Bank‚Äôs website, you‚Äôll find &lt;a href=&#34;https://data.worldbank.org/indicator/EG.ELC.ACCS.ZS&#34;&gt;this page&lt;/a&gt;. If you look at the end of the URL, you‚Äôll see a cryptic code: &lt;code&gt;EG.ELC.ACCS.ZS&lt;/code&gt;. That‚Äôs the World Bank‚Äôs ID code for the ‚ÄúAccess to electricity (% of population)‚Äù indicator.&lt;/p&gt;
&lt;p&gt;We can feed a list of ID codes to the &lt;code&gt;WDI()&lt;/code&gt; function to download data for those specific indicators. We want data from 1995-2015, so we set the start and end years accordingly. The &lt;code&gt;extra=TRUE&lt;/code&gt; argument means that it‚Äôll also include other helpful details like region, aid status, etc. Without it, it would only download the indicators we listed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;indicators &amp;lt;- c(&amp;quot;SP.DYN.LE00.IN&amp;quot;,  # Life expectancy
                &amp;quot;EG.ELC.ACCS.ZS&amp;quot;,  # Access to electricity
                &amp;quot;EN.ATM.CO2E.PC&amp;quot;,  # CO2 emissions
                &amp;quot;NY.GDP.PCAP.KD&amp;quot;)  # GDP per capita

wdi_raw &amp;lt;- WDI(country = &amp;quot;all&amp;quot;, indicators, extra = TRUE, 
               start = 1995, end = 2015)

head(wdi_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Downloading data from the World Bank every time you knit will get tedious and take a long time (plus if their servers are temporarily down, you won‚Äôt be able to get the data). It‚Äôs good practice to save this raw data as a CSV file and then work with that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(wdi_raw, &amp;quot;data/wdi_raw.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we care about reproducibility, we still want to include the code we used to get data from the World Bank, we just don‚Äôt want it to actually run. You can include chunks but not run them by setting &lt;code&gt;eval=FALSE&lt;/code&gt; in the chunk options. In this little example, we show the code for downloading the data, but we don‚Äôt evaluate the chunk. We then include a chunk that loads the data from a CSV file with &lt;code&gt;read_csv()&lt;/code&gt;, but we don‚Äôt include it (&lt;code&gt;include=FALSE&lt;/code&gt;). That way, in the knitted file we see the &lt;code&gt;WDI()&lt;/code&gt; code, but in reality it‚Äôs loading the data from CSV. Super tricky.&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;I first download data from the World Bank:

```{r get-wdi-data, eval=FALSE}
wdi_raw &amp;lt;- WDI(...)

write_csv(wdi_raw, &amp;quot;data/wdi_raw.csv&amp;quot;)
```

```{r load-wdi-data-real, include=FALSE}
wdi_raw &amp;lt;- read_csv(&amp;quot;data/wdi_raw.csv&amp;quot;)
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we clean up the data a little, filtering out rows that aren‚Äôt actually countries and renaming the ugly World Bank code columns to actual words:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_clean &amp;lt;- wdi_raw %&amp;gt;% 
  filter(region != &amp;quot;Aggregates&amp;quot;) %&amp;gt;% 
  select(iso2c, country, year, 
         life_expectancy = SP.DYN.LE00.IN, 
         access_to_electricity = EG.ELC.ACCS.ZS, 
         co2_emissions = EN.ATM.CO2E.PC, 
         gdp_per_cap = NY.GDP.PCAP.KD, 
         region, income)

head(wdi_clean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 9
##   iso2c country  year life_expectancy access_to_electricity co2_emissions gdp_per_cap region                income     
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;                 &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      
## 1 AD    Andorra  2015              NA                   100         NA         41768. Europe &amp;amp; Central Asia High income
## 2 AD    Andorra  2004              NA                   100          7.36      47033. Europe &amp;amp; Central Asia High income
## 3 AD    Andorra  2001              NA                   100          7.79      41421. Europe &amp;amp; Central Asia High income
## 4 AD    Andorra  2002              NA                   100          7.59      42396. Europe &amp;amp; Central Asia High income
## 5 AD    Andorra  2014              NA                   100          5.83      40790. Europe &amp;amp; Central Asia High income
## 6 AD    Andorra  1995              NA                   100          6.66      32918. Europe &amp;amp; Central Asia High income&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;small-multiples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Small multiples&lt;/h3&gt;
&lt;p&gt;First we can make some small multiples plots and show life expectancy over time for a handful of countries. We‚Äôll make a list of some countries chosen at random while I scrolled through the data, and then filter our data to include only those rows. We then plot life expectancy, faceting by country.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;life_expectancy_small &amp;lt;- wdi_clean %&amp;gt;%
  filter(country %in% c(&amp;quot;Argentina&amp;quot;, &amp;quot;Bolivia&amp;quot;, &amp;quot;Brazil&amp;quot;, 
                        &amp;quot;Belize&amp;quot;, &amp;quot;Canada&amp;quot;, &amp;quot;Chile&amp;quot;))

ggplot(data = life_expectancy_small, 
       mapping = aes(x = year, y = life_expectancy)) +
  geom_line(size = 1) +
  facet_wrap(vars(country))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/life-expectancy-small-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Small multiples! That‚Äôs all we need to do.&lt;/p&gt;
&lt;p&gt;We can do some fancier things, though. We can make this plot hyper minimalist:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = life_expectancy_small, 
       mapping = aes(x = year, y = life_expectancy)) +
  geom_line(size = 1) +
  facet_wrap(vars(country), scales = &amp;quot;free_y&amp;quot;) +
  theme_void() +
  theme(strip.text = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/life-expectancy-small-minimalist-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can do a whole part of a continent (poor Iraq and Syria üò≠)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;life_expectancy_mena &amp;lt;- wdi_clean %&amp;gt;% 
  filter(region == &amp;quot;Middle East &amp;amp; North Africa&amp;quot;)

ggplot(data = life_expectancy_mena, 
       mapping = aes(x = year, y = life_expectancy)) +
  geom_line(size = 1) +
  facet_wrap(vars(country), scales = &amp;quot;free_y&amp;quot;, nrow = 3) +
  theme_void() +
  theme(strip.text = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/life-expectancy-mena-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can use the &lt;a href=&#34;https://hafen.github.io/geofacet/&#34;&gt;&lt;strong&gt;geofacet&lt;/strong&gt; package&lt;/a&gt; to arrange these facets by geography:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;life_expectancy_eu &amp;lt;- wdi_clean %&amp;gt;% 
  filter(region == &amp;quot;Europe &amp;amp; Central Asia&amp;quot;)

ggplot(life_expectancy_eu, aes(x = year, y = life_expectancy)) +
  geom_line(size = 1) +
  facet_geo(vars(country), grid = &amp;quot;eu_grid1&amp;quot;, scales = &amp;quot;free_y&amp;quot;) +
  labs(x = NULL, y = NULL, title = &amp;quot;Life expectancy from 1995‚Äì2015&amp;quot;,
       caption = &amp;quot;Source: The World Bank (SP.DYN.LE00.IN)&amp;quot;) +
  theme_minimal() +
  theme(strip.text = element_text(face = &amp;quot;bold&amp;quot;),
        plot.title = element_text(face = &amp;quot;bold&amp;quot;),
        axis.text.x = element_text(angle = 45, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/life-expectancy-eu-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sparklines&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sparklines&lt;/h3&gt;
&lt;p&gt;Sparklines are just line charts (or bar charts) that are really really small.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;india_co2 &amp;lt;- wdi_clean %&amp;gt;% 
  filter(country == &amp;quot;India&amp;quot;)

plot_india &amp;lt;- ggplot(india_co2, aes(x = year, y = co2_emissions)) +
  geom_line() +
  theme_void()
plot_india&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/india-spark-1.png&#34; width=&#34;96&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(&amp;quot;india_co2.pdf&amp;quot;, plot_india, width = 1, height = 0.15, units = &amp;quot;in&amp;quot;)
ggsave(&amp;quot;india_co2.png&amp;quot;, plot_india, width = 1, height = 0.15, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;china_co2 &amp;lt;- wdi_clean %&amp;gt;% 
  filter(country == &amp;quot;China&amp;quot;)

plot_china &amp;lt;- ggplot(china_co2, aes(x = year, y = co2_emissions)) +
  geom_line() +
  theme_void()
plot_china&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/china-spark-1.png&#34; width=&#34;96&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(&amp;quot;china_co2.pdf&amp;quot;, plot_china, width = 1, heighlt = 0.15, units = &amp;quot;in&amp;quot;)
ggsave(&amp;quot;china_co2.png&amp;quot;, plot_china, width = 1, height = 0.15, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then use those saved tiny plots in your text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both India &lt;img class=&#34;img-inline&#34; src=&#34;/example/08-example_files/figure-html/india-spark-1.png&#34; width = &#34;100&#34;/&gt; and China &lt;img class=&#34;img-inline&#34; src=&#34;/example/08-example_files/figure-html/china-spark-1.png&#34; width = &#34;100&#34;/&gt; have seen increased CO&lt;sub&gt;2&lt;/sub&gt; emissions over the past 20 years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;slopegraphs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Slopegraphs&lt;/h3&gt;
&lt;p&gt;We can make a slopegraph to show changes in GDP per capita between two time periods. We need to first filter our WDI to include only the start and end years (here 1995 and 2015). Then, to make sure that we‚Äôre using complete data, we‚Äôll get rid of any country that has missing data for either 1995 or 2015. The &lt;code&gt;group_by(...) %&amp;gt;% filter(...) %&amp;gt;% ungroup()&lt;/code&gt; pipeline does this, with the &lt;code&gt;!any(is.na(gdp_per_cap))&lt;/code&gt; test keeping any rows where any of the &lt;code&gt;gdp_per_cap&lt;/code&gt; values are not missing for the whole country.&lt;/p&gt;
&lt;p&gt;We then add a couple special columns for labels. The &lt;code&gt;paste0()&lt;/code&gt; function concatenates strings and variables together, so that &lt;code&gt;paste0(&#34;2 + 2 = &#34;, 2 + 2)&lt;/code&gt; would show ‚Äú2 + 2 = 4‚Äù. Here we make labels that say either ‚ÄúCountry name: $GDP‚Äù or ‚Äú$GDP‚Äù depending on the year.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gdp_south_asia &amp;lt;- wdi_clean %&amp;gt;% 
  filter(region == &amp;quot;South Asia&amp;quot;) %&amp;gt;% 
  filter(year %in% c(1995, 2015)) %&amp;gt;% 
  # Look at each country individually
  group_by(country) %&amp;gt;%
  # Remove the country if any of its gdp_per_cap values are missing
  filter(!any(is.na(gdp_per_cap))) %&amp;gt;%
  ungroup() %&amp;gt;%
  # Make year a factor
  mutate(year = factor(year)) %&amp;gt;% 
  # Make some nice label columns
  # If the year is 1995, format it like &amp;quot;Country name: $GDP&amp;quot;. If the year is
  # 2015, format it like &amp;quot;$GDP&amp;quot;
  mutate(label_first = ifelse(year == 1995, paste0(country, &amp;quot;: &amp;quot;, dollar(round(gdp_per_cap))), NA),
         label_last = ifelse(year == 2015, dollar(round(gdp_per_cap, 0)), NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the data filtered like this, we can plot it by mapping year to the x-axis, GDP per capita to the y-axis, and coloring by country. To make the lines go across the two categorical labels in the x-axis (since we made year a factor/category), we need to also specify the &lt;code&gt;group&lt;/code&gt; aesthetic.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +
  geom_line(size = 1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/slopegraph-sa-simple-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cool! We‚Äôre getting closer. We can definitely see different slopes, but with 7 different colors, it‚Äôs hard to see exactly which country is which. Instead, we can directly label each of these lines with &lt;code&gt;geom_text()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +
  geom_line(size = 1.5) +
  geom_text(aes(label = country)) +
  guides(color = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/slopegraph-sa-simple-text-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That gets us a &lt;em&gt;little&lt;/em&gt; closer, but the country labels are hard to see, and we could include more information, like the actual values. Remember those &lt;code&gt;label_first&lt;/code&gt; and &lt;code&gt;label_last&lt;/code&gt; columns we made? Let‚Äôs use those instead:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +
  geom_line(size = 1.5) +
  geom_text(aes(label = label_first)) +
  geom_text(aes(label = label_last)) +
  guides(color = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/slopegraph-sa-simple-text-fancier-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have dollar amounts and country names, but the labels are still overlapping and really hard to read. To fix this, we can make the labels repel away from each other and randomly position in a way that makes them not overlap. The &lt;a href=&#34;https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html&#34;&gt;&lt;strong&gt;ggrepel&lt;/strong&gt; package&lt;/a&gt; lets us do this with &lt;code&gt;geom_text_repel()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +
  geom_line(size = 1.5) +
  geom_text_repel(aes(label = label_first)) +
  geom_text_repel(aes(label = label_last)) +
  guides(color = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/slopegraph-sa-getting-warmer-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now none of the labels are on top of each other, but the labels are still on top of the lines. Also, some of the labels moved inward and outward along the x-axis, but they don‚Äôt need to do that‚Äîthey just need to shift up and down. We can force the labels to only move up and down by setting the &lt;code&gt;direction = &#34;y&#34;&lt;/code&gt; argument, and we can move all the labels to the left or right with the &lt;code&gt;nudge_x&lt;/code&gt; argument. The &lt;code&gt;seed&lt;/code&gt; argument makes sure that the random label placement is the same every time we run this. It can be whatever number you want‚Äîit just has to be a number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +
  geom_line(size = 1.5) +
  geom_text_repel(aes(label = label_first), direction = &amp;quot;y&amp;quot;, nudge_x = -1, seed = 1234) +
  geom_text_repel(aes(label = label_last), direction = &amp;quot;y&amp;quot;, nudge_x = 1, seed = 1234) +
  guides(color = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/slopegraph-sa-fancier-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs it! Let‚Äôs take the theme off completely, change the colors a little, and it should be perfect.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_south_asia, aes(x = year, y = gdp_per_cap, group = country, color = country)) +
  geom_line(size = 1.5) +
  geom_text_repel(aes(label = label_first), direction = &amp;quot;y&amp;quot;, nudge_x = -1, seed = 1234) +
  geom_text_repel(aes(label = label_last), direction = &amp;quot;y&amp;quot;, nudge_x = 1, seed = 1234) +
  guides(color = FALSE) +
  scale_color_viridis_d(option = &amp;quot;magma&amp;quot;, end = 0.9) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/slopegraph-sa-done-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bump-charts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bump charts&lt;/h3&gt;
&lt;p&gt;Finally, we can make a bump chart that shows changes in rankings over time. We‚Äôll look at CO&lt;sub&gt;2&lt;/sub&gt; emissions in South Asia. First we need to calculate a new variable that shows the rank of each country within each year. We can do this if we group by year and then use the &lt;code&gt;rank()&lt;/code&gt; function to rank countries by the &lt;code&gt;co2_emissions&lt;/code&gt; column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sa_co2 &amp;lt;- wdi_clean %&amp;gt;% 
  filter(region == &amp;quot;South Asia&amp;quot;) %&amp;gt;% 
  filter(year &amp;gt;= 2004, year &amp;lt; 2015) %&amp;gt;% 
  group_by(year) %&amp;gt;% 
  mutate(rank = rank(co2_emissions))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then plot this with points and lines, reversing the y-axis so 1 is at the top:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(sa_co2, aes(x = year, y = rank, color = country)) +
  geom_line() +
  geom_point() +
  scale_y_reverse(breaks = 1:8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/make-bump-plot-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Afghanistan and Nepal switched around for the number 1 spot, while India dropped from 4 to 6, switching places with Pakistan.&lt;/p&gt;
&lt;p&gt;As with the slopegraph, there are 8 different colors in the legend and it‚Äôs hard to line them all up with the different lines, so we can plot the text directly instead. We‚Äôll use &lt;code&gt;geom_text()&lt;/code&gt; again. We don‚Äôt need to repel anything, since the text should fit in each row just fine. We need to change the &lt;code&gt;data&lt;/code&gt; argument in &lt;code&gt;geom_text()&lt;/code&gt; though and filter the data to only include one year, otherwise we‚Äôll get labels on every point, which is excessive. We can also adjust the theme and colors to make it cleaner.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(sa_co2, aes(x = year, y = rank, color = country)) +
  geom_line(size = 2) +
  geom_point(size = 4) +
  geom_text(data = filter(sa_co2, year == 2004),
            aes(label = iso2c, x = 2003.25),
            fontface = &amp;quot;bold&amp;quot;) +
  geom_text(data = filter(sa_co2, year == 2014),
            aes(label = iso2c, x = 2014.75),
            fontface = &amp;quot;bold&amp;quot;) +
  guides(color = FALSE) +
  scale_y_reverse(breaks = 1:8) +
  scale_x_continuous(breaks = 2004:2014) +
  scale_color_viridis_d(option = &amp;quot;magma&amp;quot;, begin = 0.2, end = 0.9) +
  labs(x = NULL, y = &amp;quot;Rank&amp;quot;) +
  theme_minimal() +
  theme(panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.minor.x = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/08-example_files/figure-html/bump-plot-fancier-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want to be &lt;em&gt;super&lt;/em&gt; fancy, you can use flags instead of country codes, but that‚Äôs a little more complicated (you need to install the &lt;a href=&#34;https://github.com/rensa/ggflags&#34;&gt;&lt;strong&gt;ggflags&lt;/strong&gt; package&lt;/a&gt;. &lt;a href=&#34;https://dominikkoch.github.io/Bump-Chart/&#34;&gt;See here for an example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Comparisons</title>
      <link>/lab/08-exercise/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/08-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-small-multiples&#34;&gt;Task 2: Small multiples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-3-slopegraphs&#34;&gt;Task 3: Slopegraphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bonus-task-bump-charts&#34;&gt;Bonus task! Bump charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#postscript-how-i-got-this-unemployment-data&#34;&gt;Postscript: how I got this unemployment data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise you‚Äôll use state-level unemployment data from 2006 to 2016 that comes from the US Bureau of Labor Statistics (if you‚Äôre curious, &lt;a href=&#34;#postscript-how-i-got-this-unemployment-data&#34;&gt;I describe how I built this dataset down below&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/08-exercise/data/unemployment.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;unemployment.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/08-exercise/08-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;08-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  08-exercise.Rmd
  your-project-name.Rproj
  data\
    unemployment.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/08-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;08-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;/example/08-example/&#34;&gt;The example for today‚Äôs session&lt;/a&gt; will be &lt;strong&gt;&lt;em&gt;incredibly&lt;/em&gt;&lt;/strong&gt; helpful for this exercise. Reference it.&lt;/p&gt;
&lt;p&gt;Again, you don‚Äôt need to make your plots super fancy, but if you‚Äôre feeling brave, experiment with adding a &lt;code&gt;labs()&lt;/code&gt; layer or changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-small-multiples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Small multiples&lt;/h2&gt;
&lt;p&gt;Use data from the US Bureau of Labor Statistics (BLS) to show the trends in employment rate for all 50 states between 2006 and 2016. What stories does this plot tell? Which states struggled to recover from the 2008‚Äì09 recession?&lt;/p&gt;
&lt;p&gt;Some hints/tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You won‚Äôt need to filter out any missing rows because the data here is complete‚Äîthere are no state-year combinations with missing unemployment data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You‚Äôll be plotting 51 facets. You can filter out DC if you want to have a better grid (like 5 √ó 10), or you can try using &lt;code&gt;facet_geo()&lt;/code&gt; from the &lt;strong&gt;geofacet&lt;/strong&gt; package to lay out the plots like a map of the US (try this!).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plot the &lt;code&gt;date&lt;/code&gt; column along the x-axis, &lt;em&gt;not&lt;/em&gt; the &lt;code&gt;year&lt;/code&gt; column. If you plot by year, you‚Äôll get weird looking lines (try it for fun?), since these observations are monthly. If you really want to plot by year only, you‚Äôll need to create a different data frame where you group by year and state and calculate the average unemployment rate for each year/state combination (i.e.¬†&lt;code&gt;group_by(year, state) %&amp;gt;% summarize(avg_unemployment = mean(unemployment))&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try mapping other aesthetics onto the graph too. You‚Äôll notice there are columns for region and division‚Äîplay with those as colors, for instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This plot might be big, so make sure you adjust &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt; in the chunk options so that it‚Äôs visible when you knit it. You might also want to used &lt;code&gt;ggsave()&lt;/code&gt; to save it with extra large dimensions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;task-3-slopegraphs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 3: Slopegraphs&lt;/h2&gt;
&lt;p&gt;Use data from the BLS to create a slopegraph that compares the unemployment rate in January 2006 with the unemployment rate in January 2009, either for all 50 states at once (good luck with that!) or for a specific region or division. Make sure the plot doesn‚Äôt look too busy or crowded in the end.&lt;/p&gt;
&lt;p&gt;What story does this plot tell? Which states in the US (or in the specific region you selected) were the most/least affected the Great Recession?&lt;/p&gt;
&lt;p&gt;Some hints/tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should use &lt;code&gt;filter()&lt;/code&gt; to only select rows where the year is 2006 or 2009 (i.e.¬†&lt;code&gt;filter(year %in% c(2006, 2009)&lt;/code&gt;) and to select rows where the month is January (&lt;code&gt;filter(month == 1)&lt;/code&gt; or &lt;code&gt;filter(month_name == &#34;January&#34;)&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order for the year to be plotted as separate categories on the x-axis, it needs to be a factor, so use &lt;code&gt;mutate(year = factor(year))&lt;/code&gt; to convert it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make ggplot draw lines between the 2006 and 2009 categories, you need to include &lt;code&gt;group = state&lt;/code&gt; in the aesthetics.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-task-bump-charts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus task! Bump charts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This is entirely optional but might be fun.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For extra fun times, if you feel like it, create a bump chart showing something from the unemployment data (perhaps the top 10 states or bottom 10 states in unemployment?) Adapt the code in the &lt;a href=&#34;/example/08-example/&#34;&gt;example for today‚Äôs session&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you do this, plotting 51 lines is going to be a huge mess. But filtering the data is also a bad idea, because states could drop in and out of the top/bottom 10 over time, and we don‚Äôt want to get rid of them. Instead, you can zoom in on a specific range of data in your plot with &lt;code&gt;coord_cartesian(ylim = c(1, 10))&lt;/code&gt;, for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;postscript-how-i-got-this-unemployment-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Postscript: how I got this unemployment data&lt;/h2&gt;
&lt;p&gt;For the curious, &lt;a href=&#34;/files/get_bls_data.R&#34;&gt;here‚Äôs the code I used&lt;/a&gt; to download the unemployment data from the BLS.&lt;/p&gt;
&lt;p&gt;And to pull the curtain back and show how much googling is involved in data visualization (and data analysis and programming in general), here was my process for getting this data:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I thought ‚ÄúI want to have students show variation in something domestic over time‚Äù and then I googled ‚Äúus data by state‚Äù. Nothing really came up (since it was an exceedingly vague search in the first place), but some results mentioned unemployment rates, so I figured that could be cool.&lt;/li&gt;
&lt;li&gt;I googled ‚Äúunemployment statistics by state over time‚Äù and found that the BLS keeps statistics on this. I clicked on the &lt;a href=&#34;https://www.bls.gov/data/&#34;&gt;‚ÄúData Tools‚Äù link in their main navigation bar&lt;/a&gt;, clicked on ‚ÄúUnemployment‚Äù, and then clicked on the ‚ÄúMulti-screen data search‚Äù button for the Local Area Unemployment Statistics (LAUS).&lt;/li&gt;
&lt;li&gt;I walked through the multiple screens and got excited that I‚Äôd be able to download all unemployment stats for all states for a ton of years, BUT THEN the final page had links to 51 individual Excel files, which was dumb.&lt;/li&gt;
&lt;li&gt;So I went back to Google and searched for ‚Äúdownload bls data r‚Äù and found a few different packages people have written to do this. The first one I clicked on was &lt;a href=&#34;https://github.com/keberwein/blscrapeR&#34;&gt;&lt;code&gt;blscrapeR&lt;/code&gt; at GitHub&lt;/a&gt;, and it looked like it had been updated recently, so I went with it.&lt;/li&gt;
&lt;li&gt;I followed the examples in the &lt;code&gt;blscrapeR&lt;/code&gt; package and downloaded data for every state.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another day in the life of doing modern data science. I had no idea people had written R packages to access BLS data, but there are like 3 packages out there! After a few minutes of tinkering, I got it working and it‚Äôs super magic.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>/example/09-example/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/09-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-data&#34;&gt;Load data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clean-and-reshape-data&#34;&gt;Clean and reshape data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plot-the-data-and-annotate&#34;&gt;Plot the data and annotate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre again going to use cross-national data from the &lt;a href=&#34;https://data.worldbank.org/&#34;&gt;World Bank‚Äôs Open Data portal&lt;/a&gt;. We‚Äôll download the data with the &lt;a href=&#34;https://cran.r-project.org/web/packages/WDI/index.html&#34;&gt;&lt;strong&gt;WDI&lt;/strong&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to skip the data downloading, you can download the data below (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/wdi_co2.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;wdi_co2.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/gMSMsOy7KF0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load data&lt;/h3&gt;
&lt;p&gt;First, we load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(WDI)        # Get data from the World Bank
library(ggrepel)    # For non-overlapping labels

# You need to install ggtext from GitHub. Follow the instructions at 
# https://github.com/wilkelab/ggtext
library(ggtext)     # For fancier text handling&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;indicators &amp;lt;- c(&amp;quot;SP.POP.TOTL&amp;quot;,     # Population
                &amp;quot;EN.ATM.CO2E.PC&amp;quot;,  # CO2 emissions
                &amp;quot;NY.GDP.PCAP.KD&amp;quot;)  # GDP per capita

wdi_co2_raw &amp;lt;- WDI(country = &amp;quot;all&amp;quot;, indicators, extra = TRUE, 
                   start = 1995, end = 2015)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we clean the data by removing non-country countries and renaming some of the columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_clean &amp;lt;- wdi_co2_raw %&amp;gt;% 
  filter(region != &amp;quot;Aggregates&amp;quot;) %&amp;gt;% 
  select(iso2c, iso3c, country, year, 
         population = SP.POP.TOTL,
         co2_emissions = EN.ATM.CO2E.PC, 
         gdp_per_cap = NY.GDP.PCAP.KD, 
         region, income)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;clean-and-reshape-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Clean and reshape data&lt;/h3&gt;
&lt;p&gt;Next we‚Äôll do some substantial filtering and reshaping so that we can end up with the rankings of CO&lt;sub&gt;2&lt;/sub&gt; emissions in 1995 and 2014. I annotate as much as possible below so you can see what‚Äôs happening in each step.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;co2_rankings &amp;lt;- wdi_clean %&amp;gt;% 
  # Get rid of smaller countries
  filter(population &amp;gt; 200000) %&amp;gt;% 
  # Only look at two years
  filter(year %in% c(1995, 2014)) %&amp;gt;% 
  # Get rid of all the rows that have missing values in co2_emissions
  drop_na(co2_emissions) %&amp;gt;% 
  # Look at each year individually and rank countries based on their emissions that year
  group_by(year) %&amp;gt;% 
  mutate(ranking = rank(co2_emissions)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  # Only select a handful of columns, mostly just the newly created &amp;quot;ranking&amp;quot;
  # column and some country identifiers
  select(iso3c, country, year, region, income, ranking) %&amp;gt;% 
  # Right now the data is tidy and long, but we want to widen it and create
  # separate columns for emissions in 1995 and in 2014. pivot_wider() will make
  # new columns based on the existing &amp;quot;year&amp;quot; column (that&amp;#39;s what `names_from`
  # does), and it will add &amp;quot;rank_&amp;quot; as the prefix, so that the new columns will
  # be &amp;quot;rank_1995&amp;quot; and &amp;quot;rank_2014&amp;quot;. The values that go in those new columns will
  # come from the existing &amp;quot;ranking&amp;quot; column
  pivot_wider(names_from = year, names_prefix = &amp;quot;rank_&amp;quot;, values_from = ranking) %&amp;gt;% 
  # Find the difference in ranking between 2014 and 1995
  mutate(rank_diff = rank_2014 - rank_1995) %&amp;gt;% 
  # Remove all rows where there&amp;#39;s a missing value in the rank_diff column
  drop_na(rank_diff) %&amp;gt;% 
  # Make an indicator variable that is true of the absolute value of the
  # difference in rankings is greater than 25. 25 is arbitrary here‚Äîthat just
  # felt like a big change in rankings
  mutate(big_change = ifelse(abs(rank_diff) &amp;gt;= 25, TRUE, FALSE)) %&amp;gt;% 
  # Make another indicator variable that indicates if the rank improved by a
  # lot, worsened by a lot, or didn&amp;#39;t change much. We use the case_when()
  # function, which is like a fancy version of ifelse() that takes multiple
  # conditions. This is how it generally works:
  #
  # case_when(
  #  some_test ~ value_if_true,
  #  some_other_test ~ value_if_true,
  #  TRUE ~ value_otherwise
  #)
  mutate(better_big_change = case_when(
    rank_diff &amp;lt;= -25 ~ &amp;quot;Rank improved&amp;quot;,
    rank_diff &amp;gt;= 25 ~ &amp;quot;Rank worsened&amp;quot;,
    TRUE ~ &amp;quot;Rank changed a little&amp;quot;
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here‚Äôs what that reshaped data looked like before:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(wdi_clean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 9
##   iso2c iso3c country  year population co2_emissions gdp_per_cap region                income     
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      
## 1 AD    AND   Andorra  2015      78011         NA         41768. Europe &amp;amp; Central Asia High income
## 2 AD    AND   Andorra  2004      76244          7.36      47033. Europe &amp;amp; Central Asia High income
## 3 AD    AND   Andorra  2001      67341          7.79      41421. Europe &amp;amp; Central Asia High income
## 4 AD    AND   Andorra  2002      70049          7.59      42396. Europe &amp;amp; Central Asia High income
## 5 AD    AND   Andorra  2014      79213          5.83      40790. Europe &amp;amp; Central Asia High income
## 6 AD    AND   Andorra  1995      63850          6.66      32918. Europe &amp;amp; Central Asia High income&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here‚Äôs what it looks like now:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(co2_rankings)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 9
##   iso3c country              region                     income              rank_1995 rank_2014 rank_diff big_change better_big_change    
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                &amp;lt;chr&amp;gt;                      &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;      &amp;lt;chr&amp;gt;                
## 1 ARE   United Arab Emirates Middle East &amp;amp; North Africa High income               167       171         4 FALSE      Rank changed a little
## 2 AFG   Afghanistan          South Asia                 Low income                  8        24        16 FALSE      Rank changed a little
## 3 ALB   Albania              Europe &amp;amp; Central Asia      Upper middle income        54        78        24 FALSE      Rank changed a little
## 4 ARM   Armenia              Europe &amp;amp; Central Asia      Upper middle income        71        76         5 FALSE      Rank changed a little
## 5 AGO   Angola               Sub-Saharan Africa         Lower middle income        59        61         2 FALSE      Rank changed a little
## 6 ARG   Argentina            Latin America &amp;amp; Caribbean  High income               103       119        16 FALSE      Rank changed a little&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-data-and-annotate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot the data and annotate&lt;/h3&gt;
&lt;p&gt;I use IBM Plex Sans in this plot. You can &lt;a href=&#34;https://fonts.google.com/specimen/IBM+Plex+Sans&#34;&gt;download it from Google Fonts&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# These three functions make it so all geoms that use text, label, and
# label_repel will use IBM Plex Sans as the font. Those layers are *not*
# influenced by whatever you include in the base_family argument in something
# like theme_bw(), so ordinarily you&amp;#39;d need to specify the font in each
# individual annotate(geom = &amp;quot;text&amp;quot;) layer or geom_label() layer, and that&amp;#39;s
# tedious! This removes that tediousness.
update_geom_defaults(&amp;quot;text&amp;quot;, list(family = &amp;quot;IBM Plex Sans&amp;quot;))
update_geom_defaults(&amp;quot;label&amp;quot;, list(family = &amp;quot;IBM Plex Sans&amp;quot;))
update_geom_defaults(&amp;quot;label_repel&amp;quot;, list(family = &amp;quot;IBM Plex Sans&amp;quot;))

ggplot(co2_rankings,
       aes(x = rank_1995, y = rank_2014)) +
  # Add a reference line that goes from the bottom corner to the top corner
  annotate(geom = &amp;quot;segment&amp;quot;, x = 0, xend = 175, y = 0, yend = 175) +
  # Add points and color them by the type of change in rankings
  geom_point(aes(color = better_big_change)) +
  # Add repelled labels. Only use data where big_change is TRUE. Fill them by
  # the type of change (so they match the color in geom_point() above) and use
  # white text
  geom_label_repel(data = filter(co2_rankings, big_change == TRUE),
                   aes(label = country, fill = better_big_change),
                   color = &amp;quot;white&amp;quot;) +
  # Add notes about what the outliers mean in the bottom left and top right
  # corners. These are italicized and light grey. The text in the bottom corner
  # is justified to the right with hjust = 1, and the text in the top corner is
  # justified to the left with hjust = 0
  annotate(geom = &amp;quot;text&amp;quot;, x = 170, y = 6, label = &amp;quot;Outliers improving&amp;quot;, 
           fontface = &amp;quot;italic&amp;quot;, hjust = 1, color = &amp;quot;grey50&amp;quot;) +
  annotate(geom = &amp;quot;text&amp;quot;, x = 2, y = 170, label = &amp;quot;Outliers worsening&amp;quot;, 
           fontface = &amp;quot;italic&amp;quot;, hjust = 0, color = &amp;quot;grey50&amp;quot;) +
  # Add mostly transparent rectangles in the bottom right and top left corners
  annotate(geom = &amp;quot;rect&amp;quot;, xmin = 0, xmax = 25, ymin = 0, ymax = 25, 
           fill = &amp;quot;#2ECC40&amp;quot;, alpha = 0.25) +
  annotate(geom = &amp;quot;rect&amp;quot;, xmin = 150, xmax = 175, ymin = 150, ymax = 175, 
           fill = &amp;quot;#FF851B&amp;quot;, alpha = 0.25) +
  # Add text to define what the rectangles abovee actually mean. The \n in
  # &amp;quot;highest\nemitters&amp;quot; will put a line break in the label
  annotate(geom = &amp;quot;text&amp;quot;, x = 40, y = 6, label = &amp;quot;Lowest emitters&amp;quot;, 
           hjust = 0, color = &amp;quot;#2ECC40&amp;quot;) +
  annotate(geom = &amp;quot;text&amp;quot;, x = 162.5, y = 135, label = &amp;quot;Highest\nemitters&amp;quot;, 
           hjust = 0.5, vjust = 1, lineheight = 1, color = &amp;quot;#FF851B&amp;quot;) +
  # Add arrows between the text and the rectangles. These use the segment geom,
  # and the arrows are added with the arrow() function, which lets us define the
  # angle of the arrowhead and the length of the arrowhead pieces. Here we use
  # 0.5 lines, which is a unit of measurement that ggplot uses internally (think
  # of how many lines of text fit in the plot). We could also use unit(1, &amp;quot;cm&amp;quot;)
  # or unit(0.25, &amp;quot;in&amp;quot;) or anything else
  annotate(geom = &amp;quot;segment&amp;quot;, x = 38, xend = 20, y = 6, yend = 6, color = &amp;quot;#2ECC40&amp;quot;, 
           arrow = arrow(angle = 15, length = unit(0.5, &amp;quot;lines&amp;quot;))) +
  annotate(geom = &amp;quot;segment&amp;quot;, x = 162.5, xend = 162.5, y = 140, yend = 155, color = &amp;quot;#FF851B&amp;quot;, 
           arrow = arrow(angle = 15, length = unit(0.5, &amp;quot;lines&amp;quot;))) +
  # Use three different colors for the points
  scale_color_manual(values = c(&amp;quot;grey50&amp;quot;, &amp;quot;#0074D9&amp;quot;, &amp;quot;#FF4136&amp;quot;)) +
  # Use two different colors for the filled labels. There are no grey labels, so
  # we don&amp;#39;t have to specify that color
  scale_fill_manual(values = c(&amp;quot;#0074D9&amp;quot;, &amp;quot;#FF4136&amp;quot;)) +
  # Make the x and y axes expand all the way to the edges of the plot area and
  # add breaks every 25 units from 0 to 175
  scale_x_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +
  scale_y_continuous(expand = c(0, 0), breaks = seq(0, 175, 25)) +
  # Add labels! There are a couple fancy things here.
  # 1. In the title we wrap the 2 of CO2 in the HTML &amp;lt;sub&amp;gt;&amp;lt;/sub&amp;gt; tag so that the
  #    number gets subscripted. The only way this will actually get parsed as 
  #    HTML is if we tell the plot.title to use element_markdown() in the 
  #    theme() function, and element_markdown() comes from the ggtext package.
  # 2. In the subtitle we bold the two words **improved** and **worsened** using
  #    Markdown asterisks. We also wrap these words with HTML span tags with 
  #    inline CSS to specify the color of the text. Like the title, this will 
  #    only be processed and parsed as HTML and Markdown if we tell the p
  #    lot.subtitle to use element_markdown() in the theme() function.
  labs(x = &amp;quot;Rank in 1995&amp;quot;, y = &amp;quot;Rank in 2014&amp;quot;,
       title = &amp;quot;Changes in CO&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt; emission rankings between 1995 and 2014&amp;quot;,
       subtitle = &amp;quot;Countries that &amp;lt;span style=&amp;#39;color: #0074D9&amp;#39;&amp;gt;**improved**&amp;lt;/span&amp;gt; or &amp;lt;span style=&amp;#39;color: #FF4136&amp;#39;&amp;gt;**worsened**&amp;lt;/span&amp;gt; more than 25 positions in the rankings highlighted&amp;quot;,
       caption = &amp;quot;Source: The World Bank.\nCountries with populations of less than 200,000 excluded.&amp;quot;) +
  # Turn off the legends for color and fill, since the subtitle includes that
  guides(color = FALSE, fill = FALSE) +
  # Use theme_bw() with IBM Plex Sans
  theme_bw(base_family = &amp;quot;IBM Plex Sans&amp;quot;) +
  # Tell the title and subtitle to be treated as Markdown/HTML, make the title
  # 1.6x the size of the base font, and make the subtitle 1.3x the size of the
  # base font. Also add a little larger margin on the right of the plot so that
  # the 175 doesn&amp;#39;t get cut off.
  theme(plot.title = element_markdown(face = &amp;quot;bold&amp;quot;, size = rel(1.6)),
        plot.subtitle = element_markdown(size = rel(1.3)),
        plot.margin = unit(c(0.5, 1, 0.5, 0.5), units = &amp;quot;lines&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/09-example_files/figure-html/build-pretty-plot-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>/lab/09-exercise/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/09-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-annotations&#34;&gt;Task 2: Annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise, you‚Äôll use whatever data you want to make a plot and add annotations to it. Use a dataset from a past exercise, use one of the built-in datasets like &lt;code&gt;mpg&lt;/code&gt; or &lt;code&gt;gapminder&lt;/code&gt; from the &lt;strong&gt;gapminder&lt;/strong&gt; package, download stuff from the World Bank using the &lt;strong&gt;WDI&lt;/strong&gt; package, or use something from &lt;a href=&#34;/resource/data/&#34;&gt;this list of datasets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/09-exercise/09-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;09-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  09-exercise.Rmd
  your-project-name.Rproj
  data\
    WHATEVER.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/09-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;09-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/annotate.html&#34;&gt;documentation for &lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/geom_text.html&#34;&gt;&lt;code&gt;geom_text()&lt;/code&gt; and &lt;code&gt;geom_label()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html&#34;&gt;&lt;code&gt;geom_text_repel()&lt;/code&gt; and &lt;code&gt;geom_label_repel()&lt;/code&gt;&lt;/a&gt; will be incredibly helpful for this exercise. &lt;a href=&#34;/example/09-example/&#34;&gt;The example for today‚Äôs session&lt;/a&gt; is also helpful for seeing annotations in real life.&lt;/p&gt;
&lt;p&gt;Again, you don‚Äôt need to make your plots super fancy (except for these annotations), but if you‚Äôre feeling brave, experiment with changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-annotations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Annotations&lt;/h2&gt;
&lt;p&gt;Do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Make a plot. Any kind of plot will do (though it might be easiest to work with &lt;code&gt;geom_point()&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Label (some or all of) the points using one of &lt;code&gt;geom_text()&lt;/code&gt;, &lt;code&gt;geom_label()&lt;/code&gt;, &lt;code&gt;geom_text_repel()&lt;/code&gt;, or &lt;code&gt;geom_label_repel()&lt;/code&gt;. You might need to make a new indicator variable so that you only highlight a few of the points instead of all of them. &lt;a href=&#34;hslides/09-slides.html#29&#34;&gt;See this slide for an example&lt;/a&gt;, as well as &lt;a href=&#34;/example/09-example/&#34;&gt;the complete example plot on the example page&lt;/a&gt; for today‚Äôs session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add *at least two each** the following annotations somewhere on the plot using &lt;code&gt;annotate()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;An arrow&lt;/strong&gt; (look at &lt;a href=&#34;https://www.r-graph-gallery.com/233-add-annotations-on-ggplot2-chart.html&#34;&gt;this page&lt;/a&gt;, or search for ‚Äúarrow‚Äù &lt;a href=&#34;https://ggplot2-book.org/annotations.html&#34;&gt;on this page&lt;/a&gt; for examples). Make a curved arrow for bonus fun.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A rectangle&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can add more if you want, but those three are the minimum. Try to incorporate the annotations into the design of the plot rather than just placing them wherever.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interactivity</title>
      <link>/example/10-example/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/10-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#get-and-clean-data&#34;&gt;Get and clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-basic-interactive-chart&#34;&gt;Creating a basic interactive chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifying-the-tooltip&#34;&gt;Modifying the tooltip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#including-more-information-in-the-tooltip&#34;&gt;Including more information in the tooltip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-a-dashboard-with-flexdashboard&#34;&gt;Making a dashboard with &lt;strong&gt;flexdashboard&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example we‚Äôll use data from the &lt;a href=&#34;https://data.worldbank.org/&#34;&gt;World Bank&lt;/a&gt; once again, which we download using the &lt;a href=&#34;https://cran.r-project.org/web/packages/WDI/index.html&#34;&gt;&lt;strong&gt;WDI&lt;/strong&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to skip the data downloading, you can download the data below (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/wdi_parl.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;wdi_parl.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;p&gt;There is no video for this one, since it really only involves feeding a few ggplot plots fed into &lt;code&gt;ggplotly()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;div id=&#34;get-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get and clean data&lt;/h3&gt;
&lt;p&gt;First, we load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(WDI)        # Get data from the World Bank
library(scales)     # For nicer label formatting
library(plotly)     # For easy interactive plots&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;indicators &amp;lt;- c(&amp;quot;SP.POP.TOTL&amp;quot;,     # Population
                &amp;quot;SG.GEN.PARL.ZS&amp;quot;,  # Proportion of seats held by women in national parliaments (%)
                &amp;quot;NY.GDP.PCAP.KD&amp;quot;)  # GDP per capita

wdi_parl_raw &amp;lt;- WDI(country = &amp;quot;all&amp;quot;, indicators, extra = TRUE, 
                    start = 2000, end = 2019)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we clean the data by removing non-country countries and renaming some of the columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_clean &amp;lt;- wdi_parl_raw %&amp;gt;% 
  filter(region != &amp;quot;Aggregates&amp;quot;) %&amp;gt;% 
  select(iso2c, iso3c, country, year, 
         population = SP.POP.TOTL,
         prop_women_parl = SG.GEN.PARL.ZS, 
         gdp_per_cap = NY.GDP.PCAP.KD, 
         region, income)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-basic-interactive-chart&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a basic interactive chart&lt;/h3&gt;
&lt;p&gt;Let‚Äôs make a chart that shows the distribution of the proportion of women in national parliaments in 2019, by continent. We‚Äôll use a strip plot with jittered points.&lt;/p&gt;
&lt;p&gt;First we need to make a regular static plot with ggplot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_2019 &amp;lt;- wdi_clean %&amp;gt;% 
  filter(year == 2019) %&amp;gt;% 
  drop_na(prop_women_parl) %&amp;gt;% 
  # Scale this down from 0-100 to 0-1 so that scales::percent() can format it as
  # an actual percent
  mutate(prop_women_parl = prop_women_parl / 100)

static_plot &amp;lt;- ggplot(wdi_2019, 
                      aes(y = fct_rev(region), x = prop_women_parl, color = region)) +
  geom_point(position = position_jitter(width = 0, height = 0.15, seed = 1234)) +
  guides(color = FALSE) +
  scale_x_continuous(labels = percent) +
  # I used https://medialab.github.io/iwanthue/ to generate these colors
  scale_color_manual(values = c(&amp;quot;#425300&amp;quot;, &amp;quot;#e680ff&amp;quot;, &amp;quot;#01bd71&amp;quot;, &amp;quot;#ff3aad&amp;quot;,
                                &amp;quot;#9f3e00&amp;quot;, &amp;quot;#0146bf&amp;quot;, &amp;quot;#671d56&amp;quot;)) +
  labs(x = &amp;quot;% women in parliament&amp;quot;, y = NULL, caption = &amp;quot;Source: The World Bank&amp;quot;) +
  theme_bw()
static_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/10-example_files/figure-html/strip-plot-basic-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great! That looks pretty good.&lt;/p&gt;
&lt;p&gt;To make it interactive, &lt;em&gt;all we have to do&lt;/em&gt; is feed the &lt;code&gt;static_plot&lt;/code&gt; object into &lt;code&gt;ggplotly()&lt;/code&gt;. That‚Äôs it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(static_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/example/10-example_files/figure-html//widgets/widget_strip-plot-basic-interactive-real.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Not &lt;em&gt;everything&lt;/em&gt; translates over to JavaScript‚Äîthe caption is gone now, and the legend is back (which is fine, I guess, since the legend is interactive). But still, this is magic.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modifying-the-tooltip&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Modifying the tooltip&lt;/h3&gt;
&lt;p&gt;Right now, the default tooltip you see when you hover over the points includes the actual proportion of women in parliament for each point, along with the continent, which is neat, but it‚Äôd be great if we could see the country name too. The tooltip picks up the information to include from the variables we use in &lt;code&gt;aes()&lt;/code&gt;, and we never map the &lt;code&gt;country&lt;/code&gt; column to any aesthetic, so it doesn‚Äôt show up.&lt;/p&gt;
&lt;p&gt;To get around this, we can add a new aesthetic for country to the points. Instead of using one of the real ggplot aesthetics like &lt;code&gt;color&lt;/code&gt; or &lt;code&gt;fill&lt;/code&gt;, we‚Äôll use a fake one called &lt;code&gt;text&lt;/code&gt; (we can call it whatever we want! &lt;code&gt;asdf&lt;/code&gt; would also work). ggplot has no idea how to do anything with the &lt;code&gt;text&lt;/code&gt; aesthetic, and it‚Äôll give you a warning, but that‚Äôs okay. The static plot looks the same:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;static_plot_toolip &amp;lt;- ggplot(wdi_2019, 
                             aes(y = fct_rev(region), x = prop_women_parl, color = region)) +
  geom_point(aes(text = country),
             position = position_jitter(width = 0, height = 0.15, seed = 1234)) +
  guides(color = FALSE) +
  scale_x_continuous(labels = percent) +
  # I used https://medialab.github.io/iwanthue/ to generate these colors
  scale_color_manual(values = c(&amp;quot;#425300&amp;quot;, &amp;quot;#e680ff&amp;quot;, &amp;quot;#01bd71&amp;quot;, &amp;quot;#ff3aad&amp;quot;,
                                &amp;quot;#9f3e00&amp;quot;, &amp;quot;#0146bf&amp;quot;, &amp;quot;#671d56&amp;quot;)) +
  labs(x = &amp;quot;% women in parliament&amp;quot;, y = NULL, caption = &amp;quot;Source: The World Bank&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Ignoring unknown aesthetics: text&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;static_plot_toolip&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/10-example_files/figure-html/strip-plot-text-aes-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we can tell plotly to use this fake &lt;code&gt;text&lt;/code&gt; aesthetic for the tooltip:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(static_plot_toolip, tooltip = &amp;quot;text&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/example/10-example_files/figure-html//widgets/widget_strip-plot-text-interactive-real.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Now we should just see the country names in the tooltips!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;including-more-information-in-the-tooltip&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Including more information in the tooltip&lt;/h3&gt;
&lt;p&gt;We have country names, but we lost the values in the x-axis. Rwanda has the highest proportion of women in parliament, but what‚Äôs the exact number? It‚Äôs somewhere above 60%, but that‚Äôs all we can see now.&lt;/p&gt;
&lt;p&gt;To fix this, we can make a new column in the data with all the text we want to include in the tooltip. We‚Äôll use &lt;code&gt;paste0()&lt;/code&gt; to combine text and variable values to make the tooltip follow this format:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;Name of country
X% women in parliament&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs add a new column with &lt;code&gt;mutate()&lt;/code&gt;. A couple things to note here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; is HTML code for a line break&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We use the &lt;code&gt;percent()&lt;/code&gt; function to format numbers as percents. The &lt;code&gt;accuracy&lt;/code&gt; argument tells R how many decimal points to use. If we used &lt;code&gt;1&lt;/code&gt;, it would say 12%; if we used &lt;code&gt;0.01&lt;/code&gt;, it would say 12.08%; etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_2019 &amp;lt;- wdi_clean %&amp;gt;% 
  filter(year == 2019) %&amp;gt;% 
  drop_na(prop_women_parl) %&amp;gt;% 
  # Scale this down from 0-100 to 0-1 so that scales::percent() can format it as
  # an actual percent
  mutate(prop_women_parl = prop_women_parl / 100) %&amp;gt;% 
  mutate(fancy_label = paste0(country, &amp;quot;&amp;lt;br&amp;gt;&amp;quot;, 
                              percent(prop_women_parl, accuracy = 0.1), 
                              &amp;quot; women in parliament&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs check to see if it worked:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_2019 %&amp;gt;% select(country, prop_women_parl, fancy_label) %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   country              prop_women_parl fancy_label                                      
##   &amp;lt;chr&amp;gt;                          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                                            
## 1 Andorra                        0.5   Andorra&amp;lt;br&amp;gt;50.0% women in parliament             
## 2 United Arab Emirates           0.225 United Arab Emirates&amp;lt;br&amp;gt;22.5% women in parliament
## 3 Afghanistan                    0.279 Afghanistan&amp;lt;br&amp;gt;27.9% women in parliament         
## 4 Antigua and Barbuda            0.111 Antigua and Barbuda&amp;lt;br&amp;gt;11.1% women in parliament 
## 5 Albania                        0.295 Albania&amp;lt;br&amp;gt;29.5% women in parliament             
## 6 Armenia                        0.242 Armenia&amp;lt;br&amp;gt;24.2% women in parliament&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now instead of using &lt;code&gt;text = country&lt;/code&gt; we‚Äôll use &lt;code&gt;text = fancy_label&lt;/code&gt; to map that new column onto the plot. Again, this won‚Äôt be visible in the static plot (and you‚Äôll get a warning), but it will show up in the interactive plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;static_plot_toolip_fancy &amp;lt;- ggplot(wdi_2019, 
                                   aes(y = fct_rev(region), 
                                       x = prop_women_parl, 
                                       color = region)) +
  geom_point(aes(text = fancy_label),
             position = position_jitter(width = 0, height = 0.15, seed = 1234)) +
  guides(color = FALSE) +
  scale_x_continuous(labels = percent) +
  # I used https://medialab.github.io/iwanthue/ to generate these colors
  scale_color_manual(values = c(&amp;quot;#425300&amp;quot;, &amp;quot;#e680ff&amp;quot;, &amp;quot;#01bd71&amp;quot;, &amp;quot;#ff3aad&amp;quot;,
                                &amp;quot;#9f3e00&amp;quot;, &amp;quot;#0146bf&amp;quot;, &amp;quot;#671d56&amp;quot;)) +
  labs(x = &amp;quot;% women in parliament&amp;quot;, y = NULL, caption = &amp;quot;Source: The World Bank&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Ignoring unknown aesthetics: text&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(static_plot_toolip_fancy, tooltip = &amp;quot;text&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/example/10-example_files/figure-html//widgets/widget_strip-plot-text-interactive-fancy-real.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Perfect!&lt;/p&gt;
&lt;p&gt;Finally, if we want to save this plot as a standalone self-contained HTML file, we can use the &lt;code&gt;saveWidget()&lt;/code&gt; function from the &lt;strong&gt;htmlwidgets&lt;/strong&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is like ggsave, but for interactive HTML plots
interactive_plot &amp;lt;- static_plot_toolip_fancy

htmlwidgets::saveWidget(interactive_plot, &amp;quot;fancy_plot.html&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;making-a-dashboard-with-flexdashboard&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Making a dashboard with &lt;strong&gt;flexdashboard&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/&#34;&gt;documentation for &lt;strong&gt;flexdashboard&lt;/strong&gt; is so great and complete&lt;/a&gt; that I‚Äôm not going to include a full example here. There is also a brief overview in &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/dashboards.html&#34;&gt;chapter 5 of the official R Markdown book&lt;/a&gt;. You can also watch &lt;a href=&#34;https://www.youtube.com/watch?v=_oDfBVr9wmQ&#34;&gt;this really quick video here&lt;/a&gt;. She uses a package called &lt;strong&gt;dimple&lt;/strong&gt; instead of &lt;strong&gt;plotly&lt;/strong&gt;, which doesn‚Äôt work with ggplot like &lt;code&gt;ggplotly()&lt;/code&gt;, so &lt;em&gt;ignore her code&lt;/em&gt; about &lt;code&gt;dimple()&lt;/code&gt; and use your &lt;code&gt;ggplotly()&lt;/code&gt; skills instead. You can search YouTube for a bunch of other short tutorial videos, too.&lt;/p&gt;
&lt;p&gt;The quickest and easiest way to get started is to install the &lt;strong&gt;flexdashboard&lt;/strong&gt; package and then in RStudio go to File &amp;gt; New File‚Ä¶ &amp;gt; R Markdown‚Ä¶ &amp;gt; From Template &amp;gt; Flexdashboard:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/examples/flexdashboard-template.png&#34; width=&#34;60%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That will give you an empty dashboard with three chart areas spread across two columns. Put static or dynamic graphs in the different chart areas, knit, and you‚Äôll be good to go!&lt;/p&gt;
&lt;p&gt;If you‚Äôre interested in making the dashboard reactive with Shiny-like elements, &lt;a href=&#34;https://www.andrewheiss.com/blog/2020/01/01/flexdashboard-dynamic-data/&#34;&gt;check out this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interactivity</title>
      <link>/lab/10-exercise/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/10-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-interactive-plots&#34;&gt;Task 2: Interactive plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-3-dashboard&#34;&gt;Task 3: Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;This exercise is a little different from past ones because you will not knit to PDF or Word. &lt;em&gt;Pay attention to the instructions below.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise, you‚Äôll use whatever data you want to create an interactive HTML plot and a dashboard. Use a dataset from a past exercise, use one of the built-in datasets like &lt;code&gt;mpg&lt;/code&gt; or &lt;code&gt;gapminder&lt;/code&gt; from the &lt;strong&gt;gapminder&lt;/strong&gt; package, download stuff from the World Bank using the &lt;strong&gt;WDI&lt;/strong&gt; package, or use something from &lt;a href=&#34;/resource/data/&#34;&gt;this list of datasets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/10-exercise/10-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;10-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  10-exercise.Rmd
  your-project-name.Rproj
  data\
    WHATEVER.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/10-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;10-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;/example/10-example/&#34;&gt;The example for today‚Äôs session&lt;/a&gt; will be helpful as you tinker with &lt;code&gt;ggplotly()&lt;/code&gt;, and &lt;a href=&#34;/example/10-example/#making-a-dashboard-with-flexdashboard&#34;&gt;the resources listed at the bottom of the example&lt;/a&gt; will be helpful for making a dashboard.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-interactive-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Interactive plots&lt;/h2&gt;
&lt;p&gt;In the R Markdown file with your reflection, create an interactive plot with &lt;code&gt;ggplotly()&lt;/code&gt; from the &lt;strong&gt;plotly&lt;/strong&gt; package. Modify the tooltip to show something more useful than every single mapped aesthetic.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-3-dashboard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 3: Dashboard&lt;/h2&gt;
&lt;p&gt;Install the &lt;strong&gt;flexdashboard&lt;/strong&gt; package and create a new R Markdown file in your project by going to File &amp;gt; New File‚Ä¶ &amp;gt; R Markdown‚Ä¶ &amp;gt; From Template &amp;gt; Flexdashboard.&lt;/p&gt;
&lt;p&gt;Using the documentation for &lt;strong&gt;flexdashboard&lt;/strong&gt; online, create a super basic dashboard that shows a plot (static or interactive) in at least two chart areas. Play with the layout if you‚Äôre feeling brave.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Here‚Äôs where this is all different this time.&lt;/em&gt; You will &lt;em&gt;not&lt;/em&gt; upload a knitted PDF or Word file to iCollege, since those can‚Äôt handle interactivity. Instead, do this:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Knit the document with Tasks 1 and 2 in it to HTML and publish it to RPubs using the ‚ÄúPublish document‚Äù menu in the preview of the knitted file. Take note of the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/slides/img/10/publish-document.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knit the dashboard from Task 3 to HTML and publish it to RPubs using the same menu. Take note of the URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In iCollege, paste the two URLs into the submission form for exercise 10 following this template:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;Task 1 and 2: URL HERE
Task 3 dashboard: URL HERE&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>/example/11-example/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/11-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#get-data&#34;&gt;Get data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#look-at-and-clean-data&#34;&gt;Look at and clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting-time&#34;&gt;Plotting time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#improving-graphics&#34;&gt;Improving graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decomposition&#34;&gt;Decomposition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre going to use economic data from the US Federal Reserve (the Fed). The St.¬†Louis Fed is in charge of publishing Fed economic data, and they host it all at an online portal named &lt;a href=&#34;https://fred.stlouisfed.org/&#34;&gt;FRED&lt;/a&gt;. Instead of downloading individual time series data from the FRED website, we‚Äôll do what with did with the World Bank WDI data and download it directly from the internet with the &lt;a href=&#34;https://business-science.github.io/tidyquant/&#34;&gt;&lt;strong&gt;tidyquant&lt;/strong&gt; package&lt;/a&gt;, which includes a function for working with the FRED API/website.&lt;/p&gt;
&lt;p&gt;If you want to skip the data downloading, you can download the data below (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/fred_raw.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;fred_raw.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/ObnRqO4zTY8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;get-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get data&lt;/h3&gt;
&lt;p&gt;First, we load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(tidyquant)  # For accessing FRED data
library(scales)     # For nicer labels&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The US Federal Reserve provides thousands of economic datasets at &lt;a href=&#34;https://fred.stlouisfed.org/&#34;&gt;FRED&lt;/a&gt;. We can use the &lt;a href=&#34;https://business-science.github.io/tidyquant/&#34;&gt;&lt;strong&gt;tidyquant&lt;/strong&gt; R package&lt;/a&gt; to access their servers and download the data directly into R.&lt;/p&gt;
&lt;p&gt;Like we did with the &lt;a href=&#34;/example/08-example/&#34;&gt;WDI indicators in session 8&lt;/a&gt;, we need to find the special internal code for the variables we want to get. We need to pay close attention to the details of each variable, since the same measure can be offered with different combinations of real (adjusted for inflation) or nominal (not adjusted for inflation); monthly, quarterly, or annually; and seasonally adjusted or not seasonally adjusted. For instance, if you want to see US GDP, here are some possibilities (all the possible GDP measures are &lt;a href=&#34;https://fred.stlouisfed.org/categories/106&#34;&gt;listed here&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fred.stlouisfed.org/series/GDPC1&#34;&gt;&lt;code&gt;GDPC1&lt;/code&gt;: Real (2012 dollars), quarterly, seasonally adjusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fred.stlouisfed.org/series/ND000334Q&#34;&gt;&lt;code&gt;ND000334Q&lt;/code&gt;: Real (2012 dollars), quarterly, not seasonally adjusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fred.stlouisfed.org/series/GDPCA&#34;&gt;&lt;code&gt;GDPCA&lt;/code&gt;: Real (2012 dollars), annual, not seasonally adjusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fred.stlouisfed.org/series/GDP&#34;&gt;&lt;code&gt;GDP&lt;/code&gt;: Nominal, quarterly, seasonally adjusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fred.stlouisfed.org/series/GDPA&#34;&gt;&lt;code&gt;GDPA&lt;/code&gt;: Nominal, annual, not seasonally adjusted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for getting data from FRED works a little differently than &lt;code&gt;WDI()&lt;/code&gt;, and the output is a little different too, but it‚Äôs hopefully not too complicated. We need to feed the &lt;code&gt;tq_get()&lt;/code&gt; function (1) a list of indicators we want, (2) a source for those indicators, and (3) a starting and/or ending date.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tq_get()&lt;/code&gt; can actually get data from a ton of different sources like stocks from Yahoo Finance and general financial data from &lt;a href=&#34;https://www.bloomberg.com/professional/solution/bloomberg-terminal&#34;&gt;Bloomberg&lt;/a&gt;, &lt;a href=&#34;https://www.quandl.com/&#34;&gt;Quandl&lt;/a&gt;, and &lt;a href=&#34;https://api.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt;. Most of those other sources require a subscription and a fancy API key that logs you into their servers when getting data, but FRED is free (yay public goods!).&lt;/p&gt;
&lt;p&gt;We‚Äôll first make a new dataset named &lt;code&gt;fred_raw&lt;/code&gt; that gets a bunch of interesting variables from FRED from January 1, 1990 until today.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fred_raw &amp;lt;- tq_get(c(&amp;quot;RSXFSN&amp;quot;,  # Advance retail sales
                     &amp;quot;GDPC1&amp;quot;,  # GDP
                     &amp;quot;ICSA&amp;quot;,  # Initial unemployment claims
                     &amp;quot;FPCPITOTLZGUSA&amp;quot;,  # Inflation
                     &amp;quot;UNRATE&amp;quot;,  # Unemployment rate
                     &amp;quot;USREC&amp;quot;),  # Recessions
                   get = &amp;quot;economic.data&amp;quot;,  # Use FRED
                   from = &amp;quot;1990-01-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Downloading data from FRED every time you knit will get tedious and take a long time (plus if their servers are temporarily down, you won‚Äôt be able to get the data). As with the World Bank data we used, it‚Äôs good practice to save this raw data as a CSV file and then work with that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(fred_raw, &amp;quot;data/fred_raw.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we care about reproducibility, we still want to include the code we used to get data from FRED, we just don‚Äôt want it to actually run. You can include chunks but not run them by setting &lt;code&gt;eval=FALSE&lt;/code&gt; in the chunk options. In this little example, we show the code for downloading the data, but we don‚Äôt evaluate the chunk. We then include a chunk that loads the data from a CSV file with &lt;code&gt;read_csv()&lt;/code&gt;, but we don‚Äôt include it (&lt;code&gt;include=FALSE&lt;/code&gt;). That way, in the knitted file we see the &lt;code&gt;WDI()&lt;/code&gt; code, but in reality it‚Äôs loading the data from CSV. Super tricky.&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;I first download data from FRED:

```{r get-fred-data, eval=FALSE}
fred_raw &amp;lt;- tq_get(...)

write_csv(fred_raw, &amp;quot;data/fred_raw.csv&amp;quot;)
```

```{r load-fred-data-real, include=FALSE}
fred_raw &amp;lt;- read_csv(&amp;quot;data/fred_raw.csv&amp;quot;)
```&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;look-at-and-clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Look at and clean data&lt;/h3&gt;
&lt;p&gt;The data we get from FRED is in a slightly different format than we‚Äôre used to with &lt;code&gt;WDI()&lt;/code&gt;, but with good reason. With World Bank data, you get data for every country and every year, so there are rows for Afghanistan 2000, Afghanistan 2001, etc. You then get a column for each of the variables you want (population, life expectancy, GDP/capita, etc.)&lt;/p&gt;
&lt;p&gt;With FRED data, that kind of format doesn‚Äôt work for every possible time series variable because time is spaced differently. If you want to work with annual GDP, you should have a row for each year. If you want quarterly GDP, you should have a row for every quarter. If you put these in the same dataset, you‚Äôll end up with all sorts of missing data issues:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;code&gt;time&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;annual_gdp&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;quarterly_gdp&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;2019, Q1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2019, Q2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;2019, Q3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2019, Q4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;2020, Q1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;2020, Q2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To fix this, the &lt;strong&gt;tidyquant&lt;/strong&gt; package gives you data in tidy (or long) form and only provides three columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fred_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   symbol date        price
##   &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 RSXFSN 1992-01-01 130683
## 2 RSXFSN 1992-02-01 131244
## 3 RSXFSN 1992-03-01 142488
## 4 RSXFSN 1992-04-01 147175
## 5 RSXFSN 1992-05-01 152420
## 6 RSXFSN 1992-06-01 151849&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;symbol&lt;/code&gt; column is the ID of the variable from FRED , &lt;code&gt;date&lt;/code&gt; is‚Ä¶ the date, and &lt;code&gt;price&lt;/code&gt; is the value. These columns are called symbol and price because the &lt;strong&gt;tidyquant&lt;/strong&gt; package was designed to get and process stock data, so you‚Äôd typically see stock symbols (like AAPL or MSFT) and stock prices. When working with FRED data, the &lt;code&gt;price&lt;/code&gt; column shows the value of whatever you‚Äôre interested in‚Äîit‚Äôs not technically a price (so unemployment claims, inflation rates, and GDP values are still called &lt;code&gt;price&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Right now, our &lt;code&gt;fred_raw&lt;/code&gt; dataset has only 3 columns, but nearly 3,000 rows since the six indicators we got from the server are all stacked on top of each other. To actually work with these, we need to filter the raw data so that it only includes the indicators we‚Äôre interested in. For instance, if we want to plot retail sales, we need to select only the rows where the symbol is &lt;code&gt;RSXFSN&lt;/code&gt;. Make a smaller dataset with &lt;code&gt;filter()&lt;/code&gt; to do that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;retail_sales &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;RSXFSN&amp;quot;)

retail_sales&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 340 x 3
##    symbol date        price
##    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 RSXFSN 1992-01-01 130683
##  2 RSXFSN 1992-02-01 131244
##  3 RSXFSN 1992-03-01 142488
##  4 RSXFSN 1992-04-01 147175
##  5 RSXFSN 1992-05-01 152420
##  6 RSXFSN 1992-06-01 151849
##  7 RSXFSN 1992-07-01 152586
##  8 RSXFSN 1992-08-01 152476
##  9 RSXFSN 1992-09-01 148158
## 10 RSXFSN 1992-10-01 155987
## # ‚Ä¶ with 330 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If multiple variables have the same spacing (annual, quarterly, monthly, weekly), you can use filter to select all of them and then the use &lt;code&gt;pivot_wider()&lt;/code&gt; or &lt;code&gt;spread()&lt;/code&gt; to make separate columns for each. Inflation, unemployment, and retail sales are all monthly, so we can make a dataset for just those:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fred_monthly_things &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol %in% c(&amp;quot;FPCPITOTLZGUSA&amp;quot;, &amp;quot;UNRATE&amp;quot;, &amp;quot;RSXFSN&amp;quot;)) %&amp;gt;% 
  # Convert the symbol column into multiple columns, using the &amp;quot;prices&amp;quot; for values
  pivot_wider(names_from = symbol, values_from = price)

fred_monthly_things&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 364 x 4
##    date       RSXFSN FPCPITOTLZGUSA UNRATE
##    &amp;lt;date&amp;gt;      &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 1992-01-01 130683           3.03    7.3
##  2 1992-02-01 131244          NA       7.4
##  3 1992-03-01 142488          NA       7.4
##  4 1992-04-01 147175          NA       7.4
##  5 1992-05-01 152420          NA       7.6
##  6 1992-06-01 151849          NA       7.8
##  7 1992-07-01 152586          NA       7.7
##  8 1992-08-01 152476          NA       7.6
##  9 1992-09-01 148158          NA       7.6
## 10 1992-10-01 155987          NA       7.3
## # ‚Ä¶ with 354 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait! There‚Äôs a problem! The inflation rate we got isn‚Äôt actually monthly‚Äîit seems to be annual, which explains all the &lt;code&gt;NA&lt;/code&gt;s. Let‚Äôs fix it by not including it. We‚Äôll also rename the columns so they‚Äôre easier to work with&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fred_monthly_things &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol %in% c(&amp;quot;UNRATE&amp;quot;, &amp;quot;RSXFSN&amp;quot;)) %&amp;gt;% 
  # Convert the symbol column into multiple columns, using the &amp;quot;prices&amp;quot; for values
  pivot_wider(names_from = symbol, values_from = price) %&amp;gt;% 
  rename(unemployment = UNRATE, retail_sales = RSXFSN)

fred_monthly_things&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 364 x 3
##    date       retail_sales unemployment
##    &amp;lt;date&amp;gt;            &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
##  1 1992-01-01       130683          7.3
##  2 1992-02-01       131244          7.4
##  3 1992-03-01       142488          7.4
##  4 1992-04-01       147175          7.4
##  5 1992-05-01       152420          7.6
##  6 1992-06-01       151849          7.8
##  7 1992-07-01       152586          7.7
##  8 1992-08-01       152476          7.6
##  9 1992-09-01       148158          7.6
## 10 1992-10-01       155987          7.3
## # ‚Ä¶ with 354 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All better.&lt;/p&gt;
&lt;p&gt;We can make as many subsets of the long, tidy, raw data as we want.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting time&lt;/h3&gt;
&lt;p&gt;Let‚Äôs plot some of these and see what the trends look like. We‚Äôll just use &lt;code&gt;geom_line()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here‚Äôs GDP:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get just GDP data from the raw FRED data
gdp_only &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;GDPC1&amp;quot;)

ggplot(gdp_only, aes(x = date, y = price)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/gdp-basic-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here‚Äôs retail sales:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get just GDP data from the raw FRED data
retail_sales_only &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;RSXFSN&amp;quot;)

ggplot(retail_sales_only, aes(x = date, y = price)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/retail-sales-basic-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here‚Äôs unemployment claims:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unemployment_claims_only &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;ICSA&amp;quot;)

ggplot(unemployment_claims_only, aes(x = date, y = price)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/unemp-claims-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Yikes COVID-19.&lt;/p&gt;
&lt;p&gt;There, we visualized time. ‚úÖ&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;improving-graphics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Improving graphics&lt;/h3&gt;
&lt;p&gt;These were simple graphs and they‚Äôre kind of helpful, but they‚Äôre not incredibly informative. We can clean these up a little. First we can change the labels and themes and colors:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_only, aes(x = date, y = price)) +
  geom_line(color = &amp;quot;#0074D9&amp;quot;, size = 1) +
  scale_y_continuous(labels = dollar) +
  labs(y = &amp;quot;Billions of 2012 dollars&amp;quot;,
       x = NULL,
       title = &amp;quot;US Gross Domestic Product&amp;quot;,
       subtitle = &amp;quot;Quarterly data; real 2012 dollars&amp;quot;,
       caption = &amp;quot;Source: US Bureau of Economic Analysis and FRED&amp;quot;) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/gdp-better-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs great and almost good enough to publish! We can add one additional layer of information onto the plot and highlight when recessions start and end. We included a recessions variable (&lt;code&gt;USREC&lt;/code&gt;) when we got data from FRED, so let‚Äôs see what it looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;USREC&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 364 x 3
##    symbol date       price
##    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 USREC  1990-01-01     0
##  2 USREC  1990-02-01     0
##  3 USREC  1990-03-01     0
##  4 USREC  1990-04-01     0
##  5 USREC  1990-05-01     0
##  6 USREC  1990-06-01     0
##  7 USREC  1990-07-01     0
##  8 USREC  1990-08-01     1
##  9 USREC  1990-09-01     1
## 10 USREC  1990-10-01     1
## # ‚Ä¶ with 354 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is monthly data that shows a 1 if we were in a recession that month and a 0 if we weren‚Äôt. The Fed doesn‚Äôt decide when recessions happen‚Äîthe &lt;a href=&#34;https://www.nber.org/&#34;&gt;National Bureau of Economic Research (NBER)&lt;/a&gt; does, and they have &lt;a href=&#34;https://en.wikipedia.org/wiki/Recession#Definition&#34;&gt;specific guidelines&lt;/a&gt; for defining one. We‚Äôre probably in one right now, but there‚Äôs not enough data for NBER to formally declare it yet.&lt;/p&gt;
&lt;p&gt;This data is long and tidy, but that makes it harder to work with given our GDP. We want the start and end dates for each recession so that we can shade those areas on the plot. To find those dates, we need to do a little data reshaping. First, we‚Äôll create a temporary variable that marks if there was a switch from 0 to 1 or 1 to 0 in a given row by looking at the previous row&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recessions_tidy &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;USREC&amp;quot;) %&amp;gt;% 
  mutate(recession_change = price - lag(price))
recessions_tidy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 364 x 4
##    symbol date       price recession_change
##    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
##  1 USREC  1990-01-01     0               NA
##  2 USREC  1990-02-01     0                0
##  3 USREC  1990-03-01     0                0
##  4 USREC  1990-04-01     0                0
##  5 USREC  1990-05-01     0                0
##  6 USREC  1990-06-01     0                0
##  7 USREC  1990-07-01     0                0
##  8 USREC  1990-08-01     1                1
##  9 USREC  1990-09-01     1                0
## 10 USREC  1990-10-01     1                0
## # ‚Ä¶ with 354 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the new column we have that is mostly 0s, but 1 when there‚Äôs a switch, like in August 1990. 1 means we went from 0 to 1 (no recession ‚Üí recession), while -1 means we went from 1 to 0 (recession ‚Üí no recession).&lt;/p&gt;
&lt;p&gt;We can see all the start and end dates if we filter:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recessions_start_end &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;USREC&amp;quot;) %&amp;gt;% 
  mutate(recession_change = price - lag(price)) %&amp;gt;% 
  filter(recession_change != 0)
recessions_start_end&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   symbol date       price recession_change
##   &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1 USREC  1990-08-01     1                1
## 2 USREC  1991-04-01     0               -1
## 3 USREC  2001-04-01     1                1
## 4 USREC  2001-12-01     0               -1
## 5 USREC  2008-01-01     1                1
## 6 USREC  2009-07-01     0               -1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can use &lt;code&gt;tibble()&lt;/code&gt; to create a brand new little dataset that includes columns for the start and end dates:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recessions &amp;lt;- tibble(start = filter(recessions_start_end, recession_change == 1)$date,
                     end = filter(recessions_start_end, recession_change == -1)$date)
recessions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   start      end       
##   &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
## 1 1990-08-01 1991-04-01
## 2 2001-04-01 2001-12-01
## 3 2008-01-01 2009-07-01&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now add this tiny dataset to our plot using &lt;code&gt;geom_rect()&lt;/code&gt;. Notice how we put &lt;code&gt;geom_rect()&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; &lt;code&gt;geom_line()&lt;/code&gt;‚Äîthat‚Äôs so the recession rectangles go under the line instead of on top of it. Also notice that we have to specify 4 new aesthetics for &lt;code&gt;geom_rect()&lt;/code&gt;: min and max values for both x and y. We use the recession start and end dates for &lt;code&gt;xmin&lt;/code&gt; and &lt;code&gt;xmax&lt;/code&gt;, and then use ‚àí‚àû and ‚àû for &lt;code&gt;ymin&lt;/code&gt; and &lt;code&gt;ymax&lt;/code&gt; to make the rectangles stretch from the bottom of the plot to the top.&lt;/p&gt;
&lt;p&gt;The last odd/new thing here is that we also use &lt;code&gt;inherit.aes = FALSE&lt;/code&gt; in &lt;code&gt;geom_rect()&lt;/code&gt;. That‚Äôs because we specified a global &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; aesthetic in &lt;code&gt;ggplot()&lt;/code&gt;, which applies to all the other layers we add. &lt;code&gt;geom_rect()&lt;/code&gt; doesn‚Äôt use &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;, though, and it‚Äôll complain that those columns are missing. The &lt;code&gt;inherit.aes&lt;/code&gt; argument tells ggplot that the &lt;code&gt;geom_rect()&lt;/code&gt; layer should not get any of the global aesthetics like &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gdp_only, aes(x = date, y = price)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = &amp;quot;#B10DC9&amp;quot;, alpha = 0.3) +
  geom_line(color = &amp;quot;#0074D9&amp;quot;, size = 1) +
  scale_y_continuous(labels = dollar) +
  labs(y = &amp;quot;Billions of 2012 dollars&amp;quot;,
       x = NULL,
       title = &amp;quot;US Gross Domestic Product&amp;quot;,
       subtitle = &amp;quot;Quarterly data; real 2012 dollars&amp;quot;,
       caption = &amp;quot;Source: US Bureau of Economic Analysis and FRED&amp;quot;) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/gdp-fancy-awesom-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that‚Äôs it!&lt;/p&gt;
&lt;p&gt;Now that we have the tiny recessions data frame, we can add it to any plot we want. Here‚Äôs initial unemployment claims with some extra annotations for fun:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(unemployment_claims_only, aes(x = date, y = price)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = &amp;quot;#B10DC9&amp;quot;, alpha = 0.3) +
  geom_line(color = &amp;quot;#FF4136&amp;quot;, size = 0.5) +
  annotate(geom = &amp;quot;label&amp;quot;, x = as.Date(&amp;quot;2010-01-01&amp;quot;), y = 1000000, 
           label = &amp;quot;The Great Recession&amp;quot;, size = 3, family = &amp;quot;Roboto Condensed&amp;quot;) +
  annotate(geom = &amp;quot;label&amp;quot;, x = as.Date(&amp;quot;2020-01-01&amp;quot;), y = 6000000, 
           label = &amp;quot;COVID-19&amp;quot;, size = 3, family = &amp;quot;Roboto Condensed&amp;quot;, hjust = 1) +
  scale_y_continuous(labels = comma) +
  labs(y = &amp;quot;Initial unemployment claims&amp;quot;,
       x = NULL,
       title = &amp;quot;Initial unemployment claims&amp;quot;,
       subtitle = &amp;quot;Weekly data&amp;quot;,
       caption = &amp;quot;Source: US Employment and Training Administration and FRED&amp;quot;) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/unemployment-fancy-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;decomposition&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Decomposition&lt;/h3&gt;
&lt;p&gt;The mechanics of decomposing and forecasting time series goes beyond the scope of this class, but there are lots of resources you can use to learn more, including &lt;a href=&#34;https://otexts.com/fpp3/&#34;&gt;this phenomenal free textbook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There‚Äôs a whole ecosystem of time-related packages that make working with time and decomposing trends easy (named &lt;a href=&#34;https://tidyverts.org/&#34;&gt;&lt;strong&gt;tidyverts&lt;/strong&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lubridate.tidyverse.org/&#34;&gt;&lt;strong&gt;lubridate&lt;/strong&gt;&lt;/a&gt;: Helpful functions for manipulating dates (you‚Äôve used this before)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tsibble.tidyverts.org/&#34;&gt;&lt;strong&gt;tsibble&lt;/strong&gt;&lt;/a&gt;: Add fancy support for time variables to data frames&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://feasts.tidyverts.org/&#34;&gt;&lt;strong&gt;feasts&lt;/strong&gt;&lt;/a&gt;: Decompose time series and do other statistical things with time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fable.tidyverts.org/&#34;&gt;&lt;strong&gt;fable&lt;/strong&gt;&lt;/a&gt;: Make forecasts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here‚Äôs a super short example of how these all work.&lt;/p&gt;
&lt;p&gt;The retail sales data we got from FRED was not seasonally adjusted, so it looks like it has a heartbeat embedded in it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;retail_sales &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;RSXFSN&amp;quot;)

ggplot(retail_sales, aes(x = date, y = price)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/retail-sales-full-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can divide this trend into its main components: the trend, the seasonality, and stuff that‚Äôs not explained by either the trend or the seasonality. To do that, we need to first modify our little dataset and tell it to be a time-enabled data frame (a &lt;code&gt;tsibble&lt;/code&gt;) that is indexed by the year+month for each row. We‚Äôll create a new column called &lt;code&gt;year_month&lt;/code&gt; and then use &lt;code&gt;as_tsibble()&lt;/code&gt; to tell R that this is really truly dealing with time:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tsibble)  # For embedding time things into data frames

retail_sales &amp;lt;- fred_raw %&amp;gt;% 
  filter(symbol == &amp;quot;RSXFSN&amp;quot;) %&amp;gt;% 
  mutate(year_month = yearmonth(date)) %&amp;gt;% 
  as_tsibble(index = year_month)
retail_sales&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tsibble: 340 x 4 [1M]
##    symbol date        price year_month
##    &amp;lt;chr&amp;gt;  &amp;lt;date&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;mth&amp;gt;
##  1 RSXFSN 1992-01-01 130683   1992 Jan
##  2 RSXFSN 1992-02-01 131244   1992 Feb
##  3 RSXFSN 1992-03-01 142488   1992 Mar
##  4 RSXFSN 1992-04-01 147175   1992 Apr
##  5 RSXFSN 1992-05-01 152420   1992 May
##  6 RSXFSN 1992-06-01 151849   1992 Jun
##  7 RSXFSN 1992-07-01 152586   1992 Jul
##  8 RSXFSN 1992-08-01 152476   1992 Aug
##  9 RSXFSN 1992-09-01 148158   1992 Sep
## 10 RSXFSN 1992-10-01 155987   1992 Oct
## # ‚Ä¶ with 330 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the &lt;code&gt;year_month&lt;/code&gt; column is now just the year+month. Neato.&lt;/p&gt;
&lt;p&gt;Next we need to create a time series model using that data. There are lots of different ways to model time series, and distinguishing between the different types is &lt;em&gt;way&lt;/em&gt; beyond the scope of this class. &lt;a href=&#34;https://otexts.com/fpp3/&#34;&gt;Rob Hyndman‚Äôs free books covers them all&lt;/a&gt;. We‚Äôll do this with &lt;a href=&#34;https://otexts.com/fpp2/stl.html&#34;&gt;STL decomposition&lt;/a&gt; (‚Äú&lt;strong&gt;S&lt;/strong&gt;easonal and &lt;strong&gt;T&lt;/strong&gt;rend decomposition using &lt;strong&gt;L&lt;/strong&gt;oess‚Äù) There are other models we can use, like ETS or ARIMA, but again, that‚Äôs all beyond this class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(feasts)  # For decomposition things like STL()

retail_model &amp;lt;- retail_sales %&amp;gt;% 
  model(stl = STL(price))
retail_model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A mable: 1 x 1
##   stl    
##   &amp;lt;model&amp;gt;
## 1 &amp;lt;STL&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The decomposition model we create is kind of boring and useless‚Äîit‚Äôs all stored in a single cell.&lt;/p&gt;
&lt;p&gt;We can extract the different components of the decomposition with the &lt;code&gt;components()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;retail_components &amp;lt;- components(retail_model)
retail_components&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A dable:           340 x 7 [1M]
## # Key:               .model [1]
## # STL Decomposition: price = trend + season_year + remainder
##    .model year_month  price   trend season_year remainder season_adjust
##    &amp;lt;chr&amp;gt;       &amp;lt;mth&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 stl      1992 Jan 130683 148453.    -22505.      4735.       153188.
##  2 stl      1992 Feb 131244 148960.    -23009.      5292.       154253.
##  3 stl      1992 Mar 142488 149468.     -1326.     -5654.       143814.
##  4 stl      1992 Apr 147175 149976.     -2978.       177.       150153.
##  5 stl      1992 May 152420 150513.      5927.     -4020.       146493.
##  6 stl      1992 Jun 151849 151051.      3205.     -2407.       148644.
##  7 stl      1992 Jul 152586 151589.       294.       703.       152292.
##  8 stl      1992 Aug 152476 152155.      4343.     -4022.       148133.
##  9 stl      1992 Sep 148158 152722.     -6162.      1598.       154320.
## 10 stl      1992 Oct 155987 153289.       -33.3     2732.       156020.
## # ‚Ä¶ with 330 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can use the &lt;code&gt;autoplot()&lt;/code&gt; function from the &lt;strong&gt;feasts&lt;/strong&gt; package to quickly plot all the components. The plot that &lt;code&gt;autoplot()&lt;/code&gt; creates is made with ggplot, so any normal ggplot layers work with it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(retail_components) +
  labs(x = NULL) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/auto-plot-theme-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also plot individual components on their own using the &lt;code&gt;retail_components&lt;/code&gt; dataset we made. Here‚Äôs seasonality by itself:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(retail_components, 
       aes(x = year_month, y = season_year)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = &amp;quot;#B10DC9&amp;quot;, alpha = 0.3) +
  geom_line() + 
  scale_y_continuous(labels = dollar) +
  labs(x = NULL, y = &amp;quot;Difference from trend, millions of dollars&amp;quot;,
       title = &amp;quot;Seasonal trends in retail sales&amp;quot;,
       subtitle = &amp;quot;Nominal US dollars&amp;quot;) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/retail-season-only-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here‚Äôs the trend by itself:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(retail_components, 
       aes(x = year_month, y = trend)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = &amp;quot;#B10DC9&amp;quot;, alpha = 0.3) +
  geom_line() + 
  scale_y_continuous(labels = dollar) +
  labs(x = NULL, y = &amp;quot;Trend, millions of dollars&amp;quot;,
       title = &amp;quot;Seasonally adjusted trends in retail sales&amp;quot;,
       subtitle = &amp;quot;Nominal US dollars&amp;quot;) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/retail-trend-only-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want more control over the combined decomposed plot you can either (1) make individual plots for each of the components and then stitch them together with &lt;a href=&#34;https://patchwork.data-imaginist.com/&#34;&gt;&lt;strong&gt;patchwork&lt;/strong&gt;&lt;/a&gt;, or (2) make the components dataset tidy and facet by component. Here‚Äôs what that looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;retail_components_tidy &amp;lt;- retail_components %&amp;gt;% 
  # Get rid of this column
  select(-season_adjust) %&amp;gt;% 
  # Take all these component columns and put them into a long column
  pivot_longer(cols = c(price, trend, season_year, remainder),
               names_to = &amp;quot;component&amp;quot;, values_to = &amp;quot;value&amp;quot;) %&amp;gt;% 
  # Recode this values so they&amp;#39;re nicer
  mutate(component = recode(component, 
                            price = &amp;quot;Actual data&amp;quot;,
                            trend = &amp;quot;Trend&amp;quot;,
                            season_year = &amp;quot;Seasonality&amp;quot;,
                            remainder = &amp;quot;Remainder&amp;quot;)) %&amp;gt;% 
  # Make the component categories follow the order they&amp;#39;re in in the data so
  # that &amp;quot;Actual data&amp;quot; is first, etc.
  mutate(component = fct_inorder(component))

retail_components_tidy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,360 x 4
##    .model year_month component     value
##    &amp;lt;chr&amp;gt;       &amp;lt;mth&amp;gt; &amp;lt;fct&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 stl      1992 Jan Actual data 130683 
##  2 stl      1992 Jan Trend       148453.
##  3 stl      1992 Jan Seasonality -22505.
##  4 stl      1992 Jan Remainder     4735.
##  5 stl      1992 Feb Actual data 131244 
##  6 stl      1992 Feb Trend       148960.
##  7 stl      1992 Feb Seasonality -23009.
##  8 stl      1992 Feb Remainder     5292.
##  9 stl      1992 Mar Actual data 142488 
## 10 stl      1992 Mar Trend       149468.
## # ‚Ä¶ with 1,350 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a long dataset, we can facet by component:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(retail_components_tidy, 
       aes(x = year_month, y = value)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = &amp;quot;#B10DC9&amp;quot;, alpha = 0.3) +
  geom_line() + 
  scale_y_continuous(labels = dollar) +
  labs(x = NULL, y = &amp;quot;Millions of dollars&amp;quot;,
       title = &amp;quot;Decomposed US Advance Retail Sales&amp;quot;,
       subtitle = &amp;quot;Nominal US dollars&amp;quot;,
       caption = &amp;quot;Source: US Census Bureau and FRED (RSXFSN)&amp;quot;) +
  facet_wrap(vars(component), ncol = 1, scales = &amp;quot;free_y&amp;quot;) +
  theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;),
        plot.title.position = &amp;quot;plot&amp;quot;,
        strip.text = element_text(face = &amp;quot;bold&amp;quot;, hjust = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/11-example_files/figure-html/plot-seasonality-fancy-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Beautiful!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>/lab/11-exercise/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/11-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-visualizing-time&#34;&gt;Task 2: Visualizing time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise, you‚Äôll visualize something over time. You can use whatever data you want. Use a dataset from a past exercise, use one of the built-in datasets like &lt;code&gt;gapminder&lt;/code&gt; from the &lt;strong&gt;gapminder&lt;/strong&gt; package, download stuff from the World Bank with the &lt;strong&gt;WDI&lt;/strong&gt; package, or download stuff from FRED using the &lt;strong&gt;tidyquant&lt;/strong&gt; package.&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/11-exercise/11-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;11-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  11-exercise.Rmd
  your-project-name.Rproj
  data\
    WHATEVER.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/11-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;11-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;/example/11-example/&#34;&gt;example from today‚Äôs session&lt;/a&gt; shows how to get data from FRED, and the examples from sessions &lt;a href=&#34;/example/08-example/&#34;&gt;8&lt;/a&gt; and &lt;a href=&#34;/example/09-example/&#34;&gt;9&lt;/a&gt; show. You can also use gapminder, or any other dataset that includes a time-related column (so not &lt;code&gt;mpg&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;There‚Äôs no specific way you should visualize time. Show it as a line, or as bars, or with a heatmap, or with ridgeplots, or with whatever is most appropriate for the story you‚Äôre telling. You do not have to recreate the example from today. You‚Äôre free to do whatever you want!&lt;/p&gt;
&lt;p&gt;This can be as simple or as complex as you want. You don‚Äôt need to make your plot super fancy, but if you‚Äôre feeling brave, experiment with changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-visualizing-time&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Visualizing time&lt;/h2&gt;
&lt;p&gt;Do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Load some time-related data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a plot to show how that data changes over time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain why you chose to visualize the data the way you did.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Space</title>
      <link>/example/12-example/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/12-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shapefiles&#34;&gt;Shapefiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#projections-and-coordinate-reference-systems&#34;&gt;Projections and coordinate reference systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shapefiles-to-download&#34;&gt;Shapefiles to download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-and-look-at-data&#34;&gt;Load and look at data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basic-plotting&#34;&gt;Basic plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#world-map-with-different-projections&#34;&gt;World map with different projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#us-map-with-different-projections&#34;&gt;US map with different projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#individual-states&#34;&gt;Individual states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting-multiple-shapefile-layers&#34;&gt;Plotting multiple shapefile layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting-multiple-shapefile-layers-when-some-are-bigger-than-the-parent-shape&#34;&gt;Plotting multiple shapefile layers when some are bigger than the parent shape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting-schools-in-georgia&#34;&gt;Plotting schools in Georgia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-your-own-geoencoded-data&#34;&gt;Making your own geoencoded data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plotting-other-data-on-maps&#34;&gt;Plotting other data on maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;shapefiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shapefiles&lt;/h2&gt;
&lt;p&gt;Shapefiles are special types of data that include information about geography, such as points (latitude, longitude), paths (a bunch of connected latitudes and longitudes) and areas (a bunch of connected latitudes and longitudes that form a complete shape). Nowadays, most government agencies provide shapefiles for their jurisdictions. For global mapping data, you can use the Natural Earth project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.naturalearthdata.com/&#34;&gt;Natural Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html&#34;&gt;US Census Bureau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://data.georgiaspatial.org/&#34;&gt;Georgia GIS Clearinghouse&lt;/a&gt; (requires a free account; the interface is &lt;em&gt;incredibly&lt;/em&gt; clunky)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opendata.atlantaregional.com/&#34;&gt;Atlanta Regional Council&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gisdata.fultoncountyga.gov/&#34;&gt;Fulton County GIS Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dcp-coaplangis.opendata.arcgis.com/&#34;&gt;City of Atlanta, Department of City Planning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;projections-and-coordinate-reference-systems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Projections and coordinate reference systems&lt;/h2&gt;
&lt;p&gt;As you read in this week‚Äôs readings, projections matter a lot for maps. You can convert your geographic data between different coordinate systems (or projections)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; fairly easily with &lt;strong&gt;sf&lt;/strong&gt;. You can use &lt;code&gt;coord_sf(crs = XXXX)&lt;/code&gt; to convert coordinate reference systems (CRS) as you plot, or use &lt;code&gt;st_transform()&lt;/code&gt; to convert data frames to a different CRS.&lt;/p&gt;
&lt;p&gt;There are standard indexes of more than 4,000 of these projections (!!!) at &lt;a href=&#34;http://spatialreference.org/&#34;&gt;spatialreference.org&lt;/a&gt; or at &lt;a href=&#34;https://epsg.io/&#34;&gt;epsg.io&lt;/a&gt;. Here are some common ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/esri/54002/&#34;&gt;54002&lt;/a&gt;: Equidistant cylindrical projection for the world&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/esri/54004/&#34;&gt;54004&lt;/a&gt;: Mercator projection for the world&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/esri/54008/&#34;&gt;54008&lt;/a&gt;: Sinusoidal projection for the world&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/esri/54009/&#34;&gt;54009&lt;/a&gt;: Mollweide projection for the world&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/esri/54030/&#34;&gt;54030&lt;/a&gt;: Robinson projection for the world&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/epsg/4326/&#34;&gt;4326&lt;/a&gt;: WGS 84: DOD GPS coordinates (standard -180 to 180 system)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/epsg/4269/&#34;&gt;4269&lt;/a&gt;: NAD 83: Relatively common projection for North America&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatialreference.org/ref/esri/102003/&#34;&gt;102003&lt;/a&gt;: Albers projection specifically for the contiguous United States&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, instead of using these index numbers, you can use any of the names listed &lt;a href=&#34;https://proj.org/operations/projections/index.html&#34;&gt;here&lt;/a&gt;, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;+proj=merc&#34;&lt;/code&gt;: Mercator&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#34;+proj=robin&#34;&lt;/code&gt;: Robinson&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#34;+proj=moll&#34;&lt;/code&gt;: Mollweide&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#34;+proj=aeqd&#34;&lt;/code&gt;: Azimuthal Equidistant&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#34;+proj=cass&#34;&lt;/code&gt;: Cassini-Soldner&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;shapefiles-to-download&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shapefiles to download&lt;/h2&gt;
&lt;p&gt;I use a lot of different shapefiles in this example. To save you from having to go find and download each individual one, you can download this zip file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://datavizm20.s3.amazonaws.com/shapefiles.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;shapefiles.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unzip this and put all the contained folders in a folder named &lt;code&gt;data&lt;/code&gt; if you want to follow along. &lt;strong&gt;You don‚Äôt need to follow along!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your project should be structured like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  some-name.Rmd
  your-project-name.Rproj
  data\
    cb_2018_us_county_5m\
      ...
      cb_2018_us_county_5m.shp
      ...
    cb_2018_us_state_20m\
    ne_10m_admin_1_states_provinces\
    ne_10m_lakes\
    ne_10m_rivers_lake_centerlines\
    ne_10m_rivers_north_america\
    ne_110m_admin_0_countries\
    schools_2009\&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These shapefiles all came from these sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;World map&lt;/strong&gt;: &lt;a href=&#34;https://www.naturalearthdata.com/downloads/110m-cultural-vectors/&#34;&gt;110m ‚ÄúAdmin 0 - Countries‚Äù from Natural Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;US states&lt;/strong&gt;: &lt;a href=&#34;https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html&#34;&gt;20m 2018 state boundaries from the US Census Bureau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;US counties&lt;/strong&gt;: &lt;a href=&#34;https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html&#34;&gt;5m 2018 county boundaries from the US Census Bureau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;US states high resolution&lt;/strong&gt;: &lt;a href=&#34;https://www.naturalearthdata.com/downloads/10m-cultural-vectors/&#34;&gt;10m ‚ÄúAdmin 1 ‚Äì States, Provinces‚Äù from Natural Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;Global rivers&lt;/strong&gt;: &lt;a href=&#34;https://www.naturalearthdata.com/downloads/10m-cultural-vectors/&#34;&gt;10m ‚ÄúRivers + lake centerlines‚Äù from Natural Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;North American rivers&lt;/strong&gt;: &lt;a href=&#34;https://www.naturalearthdata.com/downloads/10m-physical-vectors/&#34;&gt;10m ‚ÄúRivers + lake centerlines, North America supplement‚Äù from Natural Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;Global lakes&lt;/strong&gt;: &lt;a href=&#34;https://www.naturalearthdata.com/downloads/10m-physical-vectors/&#34;&gt;10m ‚ÄúLakes + Reservoirs‚Äù from Natural Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-map&#34;&gt;&lt;/i&gt; &lt;strong&gt;Georgia K‚Äì12 schools, 2009&lt;/strong&gt;: &lt;a href=&#34;https://data.georgiaspatial.org/index.asp?body=preview&amp;amp;dataId=41516&#34;&gt;‚ÄúGeorgia K-12 Schools‚Äù from the Georgia Department of Education&lt;/a&gt; &lt;em&gt;(you must be logged in to access this)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/Opzwtegvuv4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a slightly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;load-and-look-at-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load and look at data&lt;/h3&gt;
&lt;p&gt;First we‚Äôll load the libraries we‚Äôre going to use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  # For ggplot, dplyr, and friends
library(sf)         # For GIS magic&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we‚Äôll load all the different shapefiles we downloaded using &lt;code&gt;read_sf()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Download &amp;quot;Admin 0 ‚Äì Countries&amp;quot; from
# https://www.naturalearthdata.com/downloads/110m-cultural-vectors/
world_map &amp;lt;- read_sf(&amp;quot;data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp&amp;quot;)

# Download cb_2018_us_state_20m.zip under &amp;quot;States&amp;quot; from
# https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html
us_states &amp;lt;- read_sf(&amp;quot;data/cb_2018_us_state_20m/cb_2018_us_state_20m.shp&amp;quot;)

# Download cb_2018_us_county_5m.zip under &amp;quot;County&amp;quot; from
# https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html
us_counties &amp;lt;- read_sf(&amp;quot;data/cb_2018_us_county_5m/cb_2018_us_county_5m.shp&amp;quot;)

# Download &amp;quot;Admin 1 ‚Äì States, Provinces&amp;quot; from
# https://www.naturalearthdata.com/downloads/10m-cultural-vectors/
us_states_hires &amp;lt;- read_sf(&amp;quot;data/ne_10m_admin_1_states_provinces/ne_10m_admin_1_states_provinces.shp&amp;quot;)

# Download &amp;quot;Rivers + lake centerlines&amp;quot; from
# https://www.naturalearthdata.com/downloads/10m-physical-vectors/
rivers_global &amp;lt;- read_sf(&amp;quot;data/ne_10m_rivers_lake_centerlines/ne_10m_rivers_lake_centerlines.shp&amp;quot;)

# Download &amp;quot;Rivers + lake centerlines, North America supplement&amp;quot; from
# https://www.naturalearthdata.com/downloads/10m-physical-vectors/
rivers_na &amp;lt;- read_sf(&amp;quot;data/ne_10m_rivers_north_america/ne_10m_rivers_north_america.shp&amp;quot;)

# Download &amp;quot;Lakes + Reservoirs&amp;quot; from
# https://www.naturalearthdata.com/downloads/10m-physical-vectors/
lakes &amp;lt;- read_sf(&amp;quot;data/ne_10m_lakes/ne_10m_lakes.shp&amp;quot;)

# Download from https://data.georgiaspatial.org/index.asp?body=preview&amp;amp;dataId=41516
# after creating an account and logging in
ga_schools &amp;lt;- read_sf(file.path(&amp;quot;data&amp;quot;, &amp;quot;schools_2009&amp;quot;, &amp;quot;DOE Schools 2009.shp&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-plotting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic plotting&lt;/h3&gt;
&lt;p&gt;If you look at the &lt;code&gt;world_map&lt;/code&gt; dataset in RStudio, you‚Äôll see it‚Äôs just a standard data frame with 177 rows and 95 columns. The last column is the magical &lt;code&gt;geometry&lt;/code&gt; column with the latitude/longitude details for the borders for every country. RStudio only shows you 50 columns at a time in the RStudio viewer, so you‚Äôll need to move to the next page of columns with the ¬ª button in the top left corner.&lt;/p&gt;
&lt;p&gt;Because this is just a data frame, we can do all our normal dplyr things to it. Let‚Äôs get rid of Antarctica, since it takes up a big proportion of the southern hemisphere:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world_sans_antarctica &amp;lt;- world_map %&amp;gt;% 
  filter(ISO_A3 != &amp;quot;ATA&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ready to plot a map? Here‚Äôs all you need to do:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_sans_antarctica)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/map-super-basic-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you couldn‚Äôt tell from the lecture, I‚Äôm completely blown away by how amazingly easy this every time I plot a map :)&lt;/p&gt;
&lt;p&gt;Because this a regular ggplot geom, all our regular aesthetics and themes and everything work:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_sans_antarctica, 
          fill = &amp;quot;#669438&amp;quot;, color = &amp;quot;#32481B&amp;quot;, size = 0.25) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/map-super-basic-filled-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Natural Earth dataset happens to come with some columns with a coloring scheme with 7‚Äì13 colors (&lt;code&gt;MAPCOLOR7&lt;/code&gt;, &lt;code&gt;MAPCOLOR9&lt;/code&gt;, etc.) so that no countries with a shared border share a color. We can fill by that column:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_sans_antarctica, 
          aes(fill = as.factor(MAPCOLOR7)),
          color = &amp;quot;#401D16&amp;quot;, size = 0.25) +
  scale_fill_viridis_d(option = &amp;quot;plasma&amp;quot;) +
  guides(fill = FALSE) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/map-super-basic-filled-7-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;world-map-with-different-projections&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;World map with different projections&lt;/h3&gt;
&lt;p&gt;Changing projections is trivial: add a &lt;code&gt;coord_sf()&lt;/code&gt; layer where you specify the CRS you want to use.&lt;/p&gt;
&lt;p&gt;Here‚Äôs Robinson (yay):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_sans_antarctica, 
          fill = &amp;quot;#669438&amp;quot;, color = &amp;quot;#32481B&amp;quot;, size = 0.25) +
  coord_sf(crs = 54030) +  # Robinson
  # Or use the name instead of the number
  # coord_sf(crs = &amp;quot;+proj=robin&amp;quot;)
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/map-basic-robinson-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here‚Äôs sinusoidal:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_sans_antarctica, 
          fill = &amp;quot;#669438&amp;quot;, color = &amp;quot;#32481B&amp;quot;, size = 0.25) +
  coord_sf(crs = 54008) +  # Sinusoidal
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/map-basic-sinusoidal-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here‚Äôs Mercator (ewww):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_sans_antarctica, 
          fill = &amp;quot;#669438&amp;quot;, color = &amp;quot;#32481B&amp;quot;, size = 0.25) +
  coord_sf(crs = 3785) +  # Mercator
  # Or use the name instead of the number
  # coord_sf(crs = &amp;quot;+proj=merc&amp;quot;)
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/map-basic-mercator-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Sometimes Windows doesn‚Äôt like using the raw number like &lt;code&gt;coord_sf(crs = 54030)&lt;/code&gt;. If you get an error about a missing or unknown CRS, there are two workarounds: find and look up the name abbreviation like &lt;code&gt;coord_sf(crs = &#34;+proj=robin&#34;)&lt;/code&gt;, or add the prefix ‚ÄúESRI‚Äù like &lt;code&gt;coord_sf(crs = &#34;ESRI:54030&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;us-map-with-different-projections&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;US map with different projections&lt;/h3&gt;
&lt;p&gt;This same process works for any shapefile. The map of the US can also be projected differently‚Äîtwo common projections are NAD83 and Albers. We‚Äôll take the &lt;code&gt;us_states&lt;/code&gt; dataset, remove Alaska, Hawaii, and Puerto Rico (they‚Äôre so far from the rest of the lower 48 states that they make an unusable map‚Äîif you want to include them, it‚Äôs easiest to plot them as separate plots and use &lt;strong&gt;patchwork&lt;/strong&gt; to stitch them together), and plot it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_48 &amp;lt;- us_states %&amp;gt;% 
  filter(!(NAME %in% c(&amp;quot;Alaska&amp;quot;, &amp;quot;Hawaii&amp;quot;, &amp;quot;Puerto Rico&amp;quot;)))

ggplot() + 
  geom_sf(data = lower_48, fill = &amp;quot;#192DA1&amp;quot;, color = &amp;quot;white&amp;quot;, size = 0.25) +
  coord_sf(crs = 4269) +  # NAD83
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/us-nad83-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = lower_48, fill = &amp;quot;#192DA1&amp;quot;, color = &amp;quot;white&amp;quot;, size = 0.25) +
  coord_sf(crs = 102003) +  # Albers
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/us-albers-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;individual-states&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Individual states&lt;/h3&gt;
&lt;p&gt;Again, because these shapefiles are really just fancy data frames, we can filter them with normal dplyr functions. Let‚Äôs plot just Georgia:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;only_georgia &amp;lt;- lower_48 %&amp;gt;% 
  filter(NAME == &amp;quot;Georgia&amp;quot;)

ggplot() +
  geom_sf(data = only_georgia, fill = &amp;quot;#EC8E55&amp;quot;) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/georgia-only-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also use a different projection. If we look at &lt;a href=&#34;https://spatialreference.org/ref/epsg/&#34;&gt;spatialreference.org&lt;/a&gt;, there‚Äôs &lt;a href=&#34;https://spatialreference.org/ref/epsg/2239/&#34;&gt;a version of NAD83 that‚Äôs focused specifically on Georgia&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia, fill = &amp;quot;#EC8E55&amp;quot;) +
  theme_void() +
  coord_sf(crs = 2239)  # NAD83 focused on Georgia&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/georgia-only-projection-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There‚Äôs one small final issue though: we‚Äôre missing all the Atlantic islands in the southeast like Cumberland Island and Amelia Island. That‚Äôs because we‚Äôre using the Census‚Äôs low resolution (20m) data. That‚Äôs fine for the map of the whole country, but if we‚Äôre looking at a single state, we probably want better detail in the borders. We can use the Census‚Äôs high resolution (500k) data, but even then it doesn‚Äôt include the islands for whatever reason, but &lt;a href=&#34;https://www.naturalearthdata.com/downloads/10m-cultural-vectors/10m-admin-1-states-provinces/&#34;&gt;Natural Earth has high resolution US state data&lt;/a&gt; that &lt;em&gt;does&lt;/em&gt; have the islands, so we can use that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;only_georgia_high &amp;lt;- us_states_hires %&amp;gt;% 
  filter(iso_3166_2 == &amp;quot;US-GA&amp;quot;)

ggplot() +
  geom_sf(data = only_georgia_high, fill = &amp;quot;#EC8E55&amp;quot;) +
  theme_void() +
  coord_sf(crs = 2239)  # NAD83 focused on Georgia&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/georgia-only-hires-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Perfect.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-multiple-shapefile-layers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting multiple shapefile layers&lt;/h3&gt;
&lt;p&gt;The state shapefiles from the Census Bureau only include state boundaries. If we want to see counties in Georgia, we need to download and load the Census‚Äôs county shapefiles (which we did above). We can then add a second &lt;code&gt;geom_sf()&lt;/code&gt; layer for the counties.&lt;/p&gt;
&lt;p&gt;First we need to filter the county data to only include Georgia counties. The counties data doesn‚Äôt include a column with the state name or state abbreviation, but it does include a column named &lt;code&gt;STATEFP&lt;/code&gt;, which is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code&#34;&gt;state FIPS code&lt;/a&gt;. Looking at &lt;code&gt;lower_48&lt;/code&gt; we can see that the state FIPS code for Georgia is 13, so we use that to filter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_counties &amp;lt;- us_counties %&amp;gt;% 
  filter(STATEFP == 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can plot just the counties:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = ga_counties) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-counties-only-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Technically we can just draw the county boundaries instead of layer the state boundary + the counties, since the borders of the counties make up the border of the state. But there‚Äôs an advantage to including both: we can use different aesthetics on each, like adding a thicker border on the state:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia_high, color = &amp;quot;#EC8E55&amp;quot;, size = 3) +
  geom_sf(data = ga_counties, fill = &amp;quot;#A5D46A&amp;quot;, color = &amp;quot;white&amp;quot;) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-counties-in-state-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs also useful if we want to only show some counties, like metropolitan Atlanta:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;atl_counties &amp;lt;- ga_counties %&amp;gt;% 
  filter(NAME %in% c(&amp;quot;Cherokee&amp;quot;, &amp;quot;Clayton&amp;quot;, &amp;quot;Cobb&amp;quot;, &amp;quot;DeKalb&amp;quot;, &amp;quot;Douglas&amp;quot;,
                     &amp;quot;Fayette&amp;quot;, &amp;quot;Fulton&amp;quot;, &amp;quot;Gwinnett&amp;quot;, &amp;quot;Henry&amp;quot;, &amp;quot;Rockdale&amp;quot;))
ggplot() +
  geom_sf(data = only_georgia_high, fill = &amp;quot;#EC8E55&amp;quot;) +
  geom_sf(data = atl_counties, fill = &amp;quot;#A5D46A&amp;quot;, color = &amp;quot;white&amp;quot;) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/atl-counties-in-state-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-multiple-shapefile-layers-when-some-are-bigger-than-the-parent-shape&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting multiple shapefile layers when some are bigger than the parent shape&lt;/h3&gt;
&lt;p&gt;So far we‚Äôve been able to filter out states and counties that we don‚Äôt want to plot using &lt;code&gt;filter()&lt;/code&gt;, which works because the shapefiles have geometry data for each state or county. But what if you‚Äôre plotting stuff that doesn‚Äôt follow state or county boundaries, like freeways, roads, rivers, or lakes?&lt;/p&gt;
&lt;p&gt;At the beginning we loaded a shapefile for all large and small rivers in the US. Look at the first few rows of &lt;code&gt;rivers_na&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(rivers_na)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 37 fields
## geometry type:  MULTILINESTRING
## dimension:      XY
## bbox:           xmin: -100 ymin: 29 xmax: -86 ymax: 36
## CRS:            4326
## # A tibble: 6 x 38
##   featurecla scalerank rivernum dissolve name  name_alt note  name_full min_zoom strokeweig uident min_label label wikidataid name_ar name_bn name_de
##   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  
## 1 River             10    22360 22360Ri‚Ä¶ Colo‚Ä¶ &amp;lt;NA&amp;gt;     ID i‚Ä¶ Colorado‚Ä¶      6         0.3  1.99e6       7   Colo‚Ä¶ Q847785    &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;    Colora‚Ä¶
## 2 River             10    22572 22572Ri‚Ä¶ Cima‚Ä¶ &amp;lt;NA&amp;gt;     ID i‚Ä¶ Cimarron‚Ä¶      6         0.25 2.15e6       7   Cima‚Ä¶ Q1092055   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;    Cimarr‚Ä¶
## 3 River             10    22519 22519Ri‚Ä¶ Wash‚Ä¶ &amp;lt;NA&amp;gt;     ID i‚Ä¶ Washita ‚Ä¶      6         0.25 1.95e6       7   Wash‚Ä¶ Q2993598   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;    Washita
## 4 River             10    22519 22519Ri‚Ä¶ Wash‚Ä¶ &amp;lt;NA&amp;gt;     ID i‚Ä¶ Washita ‚Ä¶      6         0.15 1.95e6       7   Wash‚Ä¶ Q2993598   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;    Washita
## 5 River             11    22422 22422Ri‚Ä¶ Cone‚Ä¶ &amp;lt;NA&amp;gt;     ID i‚Ä¶ Conecuh ‚Ä¶      6.7       0.15 2.17e6       7.7 Cone‚Ä¶ Q5159475   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;   
## 6 River             10    22421 22421Ri‚Ä¶ Pea   &amp;lt;NA&amp;gt;     ID i‚Ä¶ Pea River      6         0.15 1.96e6       7   Pea   Q7157190   &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;    &amp;lt;NA&amp;gt;   
## # ‚Ä¶ with 21 more variables: name_en &amp;lt;chr&amp;gt;, name_es &amp;lt;chr&amp;gt;, name_fr &amp;lt;chr&amp;gt;, name_el &amp;lt;chr&amp;gt;, name_hi &amp;lt;chr&amp;gt;, name_hu &amp;lt;chr&amp;gt;, name_id &amp;lt;chr&amp;gt;, name_it &amp;lt;chr&amp;gt;,
## #   name_ja &amp;lt;chr&amp;gt;, name_ko &amp;lt;chr&amp;gt;, name_nl &amp;lt;chr&amp;gt;, name_pl &amp;lt;chr&amp;gt;, name_pt &amp;lt;chr&amp;gt;, name_ru &amp;lt;chr&amp;gt;, name_sv &amp;lt;chr&amp;gt;, name_tr &amp;lt;chr&amp;gt;, name_vi &amp;lt;chr&amp;gt;,
## #   name_zh &amp;lt;chr&amp;gt;, wdid_score &amp;lt;int&amp;gt;, ne_id &amp;lt;dbl&amp;gt;, geometry &amp;lt;MULTILINESTRING [¬∞]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first row is the whole Colorado river, which flows through seven states. We can‚Äôt just use &lt;code&gt;filter()&lt;/code&gt; to only select some parts of it based on states.&lt;/p&gt;
&lt;p&gt;Here‚Äôs what happens if we combine our Georgia map with rivers and lakes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia, fill = &amp;quot;#EC8E55&amp;quot;) +
  geom_sf(data = rivers_na) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-rivers-bad-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It plots Georgia, and it‚Äôs filled with orange, but it also plots every single river in North America. Oops.&lt;/p&gt;
&lt;p&gt;We need to do a little GIS work to basically use &lt;code&gt;only_georgia&lt;/code&gt; as a cookie cutter and keep only the rivers that are contained in the &lt;code&gt;only_georgia&lt;/code&gt; boundaries. Fortunately, there‚Äôs a function in the &lt;strong&gt;sf&lt;/strong&gt; package that does this: &lt;code&gt;st_intersection()&lt;/code&gt;. Feed it two shapefile datasets and it will select the parts of the second that fall within the boundaries of the first:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_rivers_na &amp;lt;- st_intersection(only_georgia, rivers_na)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in geos_op2_geom(&amp;quot;intersection&amp;quot;, x, y): st_crs(x) == st_crs(y) is not TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh no! An error! It‚Äôs complaining that the reference systems used in these two datasets don‚Äôt match. We can check the CRS with &lt;code&gt;st_crs()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;st_crs(only_georgia)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coordinate Reference System:
##   User input: 4269 
##   wkt:
## GEOGCS[&amp;quot;NAD83&amp;quot;,
##     DATUM[&amp;quot;North_American_Datum_1983&amp;quot;,
##         SPHEROID[&amp;quot;GRS 1980&amp;quot;,6378137,298.257222101,
##             AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;7019&amp;quot;]],
##         TOWGS84[0,0,0,0,0,0,0],
##         AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;6269&amp;quot;]],
##     PRIMEM[&amp;quot;Greenwich&amp;quot;,0,
##         AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;8901&amp;quot;]],
##     UNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##         AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9122&amp;quot;]],
##     AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;4269&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;st_crs(rivers_na)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coordinate Reference System:
##   User input: 4326 
##   wkt:
## GEOGCS[&amp;quot;WGS 84&amp;quot;,
##     DATUM[&amp;quot;WGS_1984&amp;quot;,
##         SPHEROID[&amp;quot;WGS 84&amp;quot;,6378137,298.257223563,
##             AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;7030&amp;quot;]],
##         AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;6326&amp;quot;]],
##     PRIMEM[&amp;quot;Greenwich&amp;quot;,0,
##         AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;8901&amp;quot;]],
##     UNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##         AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9122&amp;quot;]],
##     AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;4326&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Georgia map uses 4269 (&lt;a href=&#34;https://epsg.io/4269&#34;&gt;or NAD83&lt;/a&gt;), while the rivers map uses 4326 (or &lt;a href=&#34;https://epsg.io/4326&#34;&gt;the GPS system of latitude and longitude&lt;/a&gt;). We need to convert one of them to make them match. It doesn‚Äôt matter which one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;only_georgia_4326 &amp;lt;- only_georgia %&amp;gt;% 
  st_transform(crs = 4326)

ga_rivers_na &amp;lt;- st_intersection(only_georgia_4326, rivers_na)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## although coordinates are longitude/latitude, st_intersection assumes that they are planar&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: attribute variables are assumed to be spatially constant throughout all geometries&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You‚Äôll get an ominous warning, but you should be okay‚Äîit‚Äôs just because flattening globes into flat planes is hard, and the cutting &lt;a href=&#34;https://github.com/r-spatial/sf/issues/493&#34;&gt;might not be 100% accurate&lt;/a&gt;, but it‚Äôll be close enough for our mapping purposes.&lt;/p&gt;
&lt;p&gt;Now we can plot our state shape and the truncated rivers:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia, fill = &amp;quot;#EC8E55&amp;quot;) +
  geom_sf(data = ga_rivers_na) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-rivers-good-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hey! It worked! Let‚Äôs put all the rivers and lakes on at once and make it a little more artsy. We‚Äôll use the high resolution Georgia map too, which conveniently already matches the CRS of the rivers and lakes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_rivers_na &amp;lt;- st_intersection(only_georgia_high, rivers_na)
ga_rivers_global &amp;lt;- st_intersection(only_georgia_high, rivers_global)
ga_lakes &amp;lt;- st_intersection(only_georgia_high, lakes)

ggplot() +
  geom_sf(data = only_georgia_high, 
          color = &amp;quot;black&amp;quot;, size = 0.1, fill = &amp;quot;black&amp;quot;) +
  geom_sf(data = ga_rivers_global, size = 0.3, color = &amp;quot;grey80&amp;quot;) +
  geom_sf(data = ga_rivers_na, size = 0.15, color = &amp;quot;grey80&amp;quot;) +
  geom_sf(data = ga_lakes, size = 0.3, fill = &amp;quot;grey80&amp;quot;, color = NA) +
  coord_sf(crs = 4269) +  # NAD83
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-all-water-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Heck yeah. That‚Äôs a great map. This is basically what &lt;a href=&#34;https://kieranhealy.org/prints/rivers/&#34;&gt;Kieran Healy did here&lt;/a&gt;, but he used &lt;a href=&#34;https://www.usgs.gov/core-science-systems/ngp/national-hydrography&#34;&gt;even more detailed shapefiles from the US Geological Survey&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-schools-in-georgia&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting schools in Georgia&lt;/h3&gt;
&lt;p&gt;Shapefiles are not limited to just lines and areas‚Äîthey can also contain points. I made a free account at the Georgia GIS Clearinghouse, searched for ‚Äúschools‚Äù and found a shapefile of all the K‚Äì12 schools in 2009. &lt;a href=&#34;https://data.georgiaspatial.org/index.asp?body=preview&amp;amp;dataId=41516&#34;&gt;This is the direct link to the page&lt;/a&gt;, but it only works if you‚Äôre logged in to their system. &lt;a href=&#34;https://data.georgiaspatial.org/data/statewide/other/schools_2009.html&#34;&gt;This is the official metadata for the shapefile&lt;/a&gt;, which you can see if you‚Äôre not logged in, but you can‚Äôt download anything. It‚Äôs a dumb system and other states are a lot better at offering their GIS data (like, &lt;a href=&#34;https://gis.utah.gov/data/society/schools-libraries/&#34;&gt;here‚Äôs a shapefile of all of Utah‚Äôs schools and libraries&lt;/a&gt; as of 2017, publicly accessible without an account).&lt;/p&gt;
&lt;p&gt;We loaded the shapefile up at the top, but now let‚Äôs look at it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ga_schools)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 16 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: 2100000 ymin: 320000 xmax: 2200000 ymax: 5e+05
## proj4string:    +proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=700000.0000001107 +y_0=0 +ellps=GRS80 +units=us-ft +no_defs 
## # A tibble: 6 x 17
##      ID  DATA COUNTY  DISTRICT  SCHOOLNAME  GRADES  ADDRESS CITY  STATE ZIP   TOTAL SCHOOLID DOE_CONGRE CONGRESS SENATE HOUSE                 geometry
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;POINT [US_survey_foot]&amp;gt;
## 1  4313   224 Early   Early Co‚Ä¶ Early Coun‚Ä¶ PK,KK,‚Ä¶ 283 Ma‚Ä¶ Blak‚Ä¶ GA    3982‚Ä¶  1175    43549 2          002      011    149           (2052182 494322)
## 2  4321   227 Early   Early Co‚Ä¶ ETN Eckerd‚Ä¶ 06,07,‚Ä¶ 313 E ‚Ä¶ Blak‚Ä¶ GA    3982‚Ä¶    30    47559 2          002      011    149            (2053200 5e+05)
## 3  4329   226 Early   Early Co‚Ä¶ Early Coun‚Ä¶ 06,07,‚Ä¶ 12053 ‚Ä¶ Blak‚Ä¶ GA    3982‚Ä¶   539    43550 2          002      011    149            (2055712 5e+05)
## 4  4337   225 Early   Early Co‚Ä¶ Early Coun‚Ä¶ 09,10,‚Ä¶ 12020 ‚Ä¶ Blak‚Ä¶ GA    3982‚Ä¶   716    43552 2          002      011    149            (2055712 5e+05)
## 5  4345   189 Decatur Decatur ‚Ä¶ John Johns‚Ä¶ PK,KK,‚Ä¶ 1947 S‚Ä¶ Bain‚Ä¶ GA    3981‚Ä¶   555    43279 2          002      011    172           (2168090 321781)
## 6  4353   192 Decatur Decatur ‚Ä¶ Potter Str‚Ä¶ PK,KK,‚Ä¶ 725 Po‚Ä¶ Bain‚Ä¶ GA    3981‚Ä¶   432    43273 2          002      011    172           (2168751 327375)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a bunch of columns like &lt;code&gt;GRADES&lt;/code&gt; that has a list of what grades are included in the school, and &lt;code&gt;TOTAL&lt;/code&gt;, which I‚Äôm guessing is the number of students. Let‚Äôs map it!&lt;/p&gt;
&lt;p&gt;If we add a &lt;code&gt;geom_sf()&lt;/code&gt; layer just for &lt;code&gt;ga_schools&lt;/code&gt;, it‚Äôll plot a bunch of points:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = ga_schools)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/plot-ga-schools-initial-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One of these rows is wildly miscoded and ended up Indonesia! If you sort by the &lt;code&gt;geometry&lt;/code&gt; column in RStudio, you‚Äôll see that it‚Äôs most likely Allatoona High School in Cobb County (id = 22097). The coordinates are different from all the others, and it has no congressional district information. Let‚Äôs remove it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_schools_fixed &amp;lt;- ga_schools %&amp;gt;% 
  filter(ID != 22097)

ggplot() +
  geom_sf(data = ga_schools_fixed)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/plot-ga-schools-fixed-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs better. However, all we‚Äôre plotting now are the points‚Äîwe‚Äôve lost the state and/or county boundaries. Let‚Äôs include those:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia_high) +
  geom_sf(data = ga_schools_fixed) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/plot-ga-schools-borders-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We‚Äôre getting closer. We have some issues with overplotting, so let‚Äôs shrink the points down and make them a little transparent:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia_high) +
  geom_sf(data = ga_schools_fixed, size = 0.5, alpha = 0.5) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/plot-ga-schools-shrunk-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat. One last thing we can do is map the &lt;code&gt;TOTAL&lt;/code&gt; column to the color aesthetic and color the points by how many students attend each school:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia_high) +
  geom_sf(data = ga_schools_fixed, aes(color = TOTAL), size = 0.75, alpha = 0.5) +
  scale_color_viridis_c() +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/plot-ga-schools-color-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Most schools appear to be under 1,000 students, except for a cluster in Gwinnett County north of Atlanta. Its high schools have nearly 4,000 students each!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_schools_fixed %&amp;gt;% 
  select(COUNTY, SCHOOLNAME, TOTAL) %&amp;gt;% 
  arrange(desc(TOTAL)) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 3 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: 2300000 ymin: 1400000 xmax: 2400000 ymax: 1500000
## proj4string:    +proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=700000.0000001107 +y_0=0 +ellps=GRS80 +units=us-ft +no_defs 
## # A tibble: 6 x 4
##   COUNTY   SCHOOLNAME                  TOTAL                 geometry
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                       &amp;lt;dbl&amp;gt; &amp;lt;POINT [US_survey_foot]&amp;gt;
## 1 Gwinnett Mill Creek High School       3997        (2384674 1482772)
## 2 Gwinnett Collins Hill High School     3720        (2341010 1461730)
## 3 Gwinnett Brookwood High School        3455        (2334543 1413396)
## 4 Gwinnett Grayson High School          3230        (2370186 1408579)
## 5 Gwinnett Peachtree Ridge High School  3118        (2319344 1459458)
## 6 Gwinnett Berkmar High School          3095        (2312983 1421933)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;making-your-own-geoencoded-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Making your own geoencoded data&lt;/h3&gt;
&lt;p&gt;So, plotting shapefiles with &lt;code&gt;geom_sf()&lt;/code&gt; is magical because &lt;strong&gt;sf&lt;/strong&gt; deals with all of the projection issues for us automatically and it figures out how to plot all the latitude and longitude data for us automatically. But lots of data &lt;em&gt;doesn‚Äôt&lt;/em&gt; some as shapefiles. The &lt;a href=&#34;/assignment/01-mini-project/&#34;&gt;rats data from mini project 1&lt;/a&gt;, for instance, has two columns indicating the latitude and longitude of each rat sighting, but those are stored as just numbers. If we try to use &lt;code&gt;geom_sf()&lt;/code&gt; with the rat data, it won‚Äôt work. We need that magical &lt;code&gt;geometry&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;Fortunately, if we have latitude and longitude information, we can make our own &lt;code&gt;geometry&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;Let‚Äôs say we want to mark some cities on our map of Georgia. We can make a mini dataset using &lt;code&gt;tribble()&lt;/code&gt;. I found these points from Google Maps: right click anywhere in Google Maps, select ‚ÄúWhat‚Äôs here?‚Äù, and you‚Äôll see the exact coordinates for that spot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_cities &amp;lt;- tribble(
  ~city, ~lat, ~long,
  &amp;quot;Atlanta&amp;quot;, 33.748955, -84.388099,
  &amp;quot;Athens&amp;quot;, 33.950794, -83.358884,
  &amp;quot;Savannah&amp;quot;, 32.113192, -81.089350
)
ga_cities&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   city       lat  long
##   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Atlanta   33.7 -84.4
## 2 Athens    34.0 -83.4
## 3 Savannah  32.1 -81.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just a normal dataset, and the &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; columns are just numbers. R doesn‚Äôt know that those are actually geographic coordinates. This is similar to the rats data, or any other data that has columns for latitude and longitude.&lt;/p&gt;
&lt;p&gt;We can convert those two columns to the magic &lt;code&gt;geometry&lt;/code&gt; column with the &lt;code&gt;st_as_sf()&lt;/code&gt; function. We have to define two things in the function: which coordinates are the longitude and latitude, and what CRS the coordinates are using. Google Maps uses &lt;a href=&#34;http://spatialreference.org/ref/epsg/4326/&#34;&gt;4326, or the GPS system&lt;/a&gt;, so we specify that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ga_cities_geometry &amp;lt;- ga_cities %&amp;gt;% 
  st_as_sf(coords = c(&amp;quot;long&amp;quot;, &amp;quot;lat&amp;quot;), crs = 4326)
ga_cities_geometry&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 3 features and 1 field
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -84 ymin: 32 xmax: -81 ymax: 34
## CRS:            EPSG:4326
## # A tibble: 3 x 2
##   city        geometry
##   &amp;lt;chr&amp;gt;    &amp;lt;POINT [¬∞]&amp;gt;
## 1 Atlanta     (-84 34)
## 2 Athens      (-83 34)
## 3 Savannah    (-81 32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The longitude and latitude columns are gone now, and we have a single magical &lt;code&gt;geometry&lt;/code&gt; column. That means we can plot it with &lt;code&gt;geom_sf()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia_high, fill = &amp;quot;#EC8E55&amp;quot;) +
  geom_sf(data = ga_cities_geometry, size = 3) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-with-cities-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;geom_sf_label()&lt;/code&gt; (or &lt;code&gt;geom_sf_text()&lt;/code&gt;) to add labels in the correct locations too. It will give you a warning, but you can ignore it‚Äîagain, it‚Äôs complaining that the positioning might not be 100% accurate because of issues related to taking a globe and flattening it. It‚Äôs fine.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_sf(data = only_georgia_high, fill = &amp;quot;#EC8E55&amp;quot;) +
  geom_sf(data = ga_cities_geometry, size = 3) +
  geom_sf_label(data = ga_cities_geometry, aes(label = city),
                nudge_y = 0.2) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/ga-with-cities-text-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-other-data-on-maps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting other data on maps&lt;/h3&gt;
&lt;p&gt;So far we‚Äôve just plotted whatever data the shapefile creators decided to include and publish in their data. But what if you want to visualize some other variable on a map? We can do this by combining our shapefile data with any other kind of data, as long as the two have a shared column. For instance, we can make a choropleth map of life expectancy with data from the World Bank.&lt;/p&gt;
&lt;p&gt;First, let‚Äôs grab some data from the World Bank for just 2015:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(WDI)  # For getting data from the World Bank

indicators &amp;lt;- c(&amp;quot;SP.DYN.LE00.IN&amp;quot;)  # Life expectancy

wdi_raw &amp;lt;- WDI(country = &amp;quot;all&amp;quot;, indicators, extra = TRUE, 
               start = 2015, end = 2015)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs see what we got:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(wdi_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 11
##   iso2c country                                SP.DYN.LE00.IN  year iso3c region             capital         longitude latitude income    lending     
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                                           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       
## 1 1A    Arab World                                       71.2  2015 ARB   Aggregates         &amp;lt;NA&amp;gt;                NA        NA   Aggregat‚Ä¶ Aggregates  
## 2 1W    World                                            71.9  2015 WLD   Aggregates         &amp;lt;NA&amp;gt;                NA        NA   Aggregat‚Ä¶ Aggregates  
## 3 4E    East Asia &amp;amp; Pacific (excluding high i‚Ä¶           74.5  2015 EAP   Aggregates         &amp;lt;NA&amp;gt;                NA        NA   Aggregat‚Ä¶ Aggregates  
## 4 7E    Europe &amp;amp; Central Asia (excluding high‚Ä¶           72.7  2015 ECA   Aggregates         &amp;lt;NA&amp;gt;                NA        NA   Aggregat‚Ä¶ Aggregates  
## 5 8S    South Asia                                       68.6  2015 SAS   Aggregates         &amp;lt;NA&amp;gt;                NA        NA   Aggregat‚Ä¶ Aggregates  
## 6 AD    Andorra                                          NA    2015 AND   Europe &amp;amp; Central ‚Ä¶ Andorra la Vel‚Ä¶      1.52     42.5 High inc‚Ä¶ Not classif‚Ä¶&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a bunch of columns here, but we care about two in particular: life expectancy, and the ISO3 code. This three-letter code is a standard system for identifying countries (&lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3&#34;&gt;see the full list here&lt;/a&gt;), and that column will let us combine this World Bank data with the global shapefile, which also has a column for the ISO3 code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(We also have columns for the latitude and longitude for each capital, so we could theoretically convert those to a &lt;code&gt;geometry&lt;/code&gt; column with &lt;code&gt;st_as_sf()&lt;/code&gt; and plot world capitals, which would be neat, but we won‚Äôt do that now.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs clean up the WDI data and shrink it down substantially:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wdi_clean_small &amp;lt;- wdi_raw %&amp;gt;% 
  select(life_expectancy = SP.DYN.LE00.IN, iso3c)
wdi_clean_small&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 264 x 2
##    life_expectancy iso3c
##              &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
##  1            71.2 ARB  
##  2            71.9 WLD  
##  3            74.5 EAP  
##  4            72.7 ECA  
##  5            68.6 SAS  
##  6            NA   AND  
##  7            77.3 ARE  
##  8            63.4 AFG  
##  9            76.5 ATG  
## 10            78.0 ALB  
## # ‚Ä¶ with 254 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to merge this tiny dataset into the &lt;code&gt;world_map_sans_antarctica&lt;/code&gt; shapefile data we were using earlier. To do this we‚Äôll use a function named &lt;code&gt;left_join()&lt;/code&gt;. We feed two data frames into &lt;code&gt;left_join()&lt;/code&gt;, and R will keep all the rows from the first and include all the columns from both the first and the second wherever the two datasets match with one specific column. That‚Äôs wordy and weird‚Äî&lt;a href=&#34;https://github.com/gadenbuie/tidyexplain#left-join&#34;&gt;stare at this animation here&lt;/a&gt; for a few seconds to see what‚Äôs really going to happen. We‚Äôre essentially going to append the World Bank data to the end of the world shapefiles and line up rows that have matching ISO3 codes. The ISO3 column is named &lt;code&gt;ISO_A3&lt;/code&gt; in the shapefile data, and it‚Äôs named &lt;code&gt;iso3c&lt;/code&gt; in the WDI data, so we tell &lt;code&gt;left_join()&lt;/code&gt; that those are the same column:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world_map_with_life_expectancy &amp;lt;- world_sans_antarctica %&amp;gt;% 
  left_join(wdi_clean_small, by = c(&amp;quot;ISO_A3&amp;quot; = &amp;quot;iso3c&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at this dataset in RStudio now and look at the last column, you‚Äôll see the WDI life expectancy right next to the magic &lt;code&gt;geometry&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;We technically didn‚Äôt need to shrink the WDI data down to just two columns‚Äîhad we left everything else, all the WDI columns would have come over to the &lt;code&gt;world_sans_antarctica&lt;/code&gt;, including columns for region and income level, etc. But I generally find it easier and cleaner to only merge in the columns I care about instead of making massive datasets with a billion extra columns.&lt;/p&gt;
&lt;p&gt;Now that we have a column for life expectancy, we can map it to the fill aesthetic and fill each country by 2015 life expectancy:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + 
  geom_sf(data = world_map_with_life_expectancy, 
          aes(fill = life_expectancy),
          size = 0.25) +
  coord_sf(crs = 54030) +  # Robinson
  scale_fill_viridis_c(option = &amp;quot;viridis&amp;quot;) +
  labs(fill = &amp;quot;Life expectancy&amp;quot;) +
  theme_void() +
  theme(legend.position = &amp;quot;bottom&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/world-life-exp-2015-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Voila! Global life expectancy in 2015!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;(Sharp-eyed readers will notice that France and Norway are grayed out because they‚Äôre missing data. That‚Äôs because the &lt;code&gt;ISO_A3&lt;/code&gt; code in the Natural Earth data is missing for both France and Norway for whatever reason, so the WDI data didn‚Äôt merge with those rows. To fix that, we can do some manual recoding before joining in the WDI data)&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world_sans_antarctica_fixed &amp;lt;- world_sans_antarctica %&amp;gt;% 
  mutate(ISO_A3 = case_when(
    # If the country name is Norway or France, redo the ISO3 code
    ADMIN == &amp;quot;Norway&amp;quot; ~ &amp;quot;NOR&amp;quot;,
    ADMIN == &amp;quot;France&amp;quot; ~ &amp;quot;FRA&amp;quot;,
    # Otherwise use the existing ISO3 code
    TRUE ~ ISO_A3
  )) %&amp;gt;% 
  left_join(wdi_clean_small, by = c(&amp;quot;ISO_A3&amp;quot; = &amp;quot;iso3c&amp;quot;))

ggplot() + 
  geom_sf(data = world_sans_antarctica_fixed, 
          aes(fill = life_expectancy),
          size = 0.25) +
  coord_sf(crs = 54030) +  # Robinson
  scale_fill_viridis_c(option = &amp;quot;viridis&amp;quot;) +
  labs(fill = &amp;quot;Life expectancy&amp;quot;) +
  theme_void() +
  theme(legend.position = &amp;quot;bottom&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/12-example_files/figure-html/world-life-exp-2015-fixed-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;TECHNICALLY coordinate systems and projection systems &lt;a href=&#34;https://gis.stackexchange.com/a/149751/56265&#34;&gt;are different things&lt;/a&gt;, but I‚Äôm not a geographer and I don‚Äôt care that much about the nuance.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;This is essentially the &lt;a href=&#34;https://en.wikipedia.org/wiki/Gall%E2%80%93Peters_projection&#34;&gt;Gall-Peters projection&lt;/a&gt; from &lt;a href=&#34;https://www.youtube.com/watch?v=vVX-PrBRtTY&#34;&gt;the West Wing clip&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;This is my favorite world projection.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Space</title>
      <link>/lab/12-exercise/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/12-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-world-map&#34;&gt;Task 2: World map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bonus-optional-task-personal-map&#34;&gt;Bonus (optional) task!: Personal map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise, you‚Äôll visualize the proportion of the world that uses the interent. You‚Äôll use data from Max Roser‚Äôs &lt;a href=&#34;https://ourworldindata.org/internet/&#34;&gt;Our World in Data&lt;/a&gt; project, which collects all sorts of interesting cross-national data. You‚Äôll also use national shapefiles from &lt;a href=&#34;https://www.naturalearthdata.com/&#34;&gt;Natural Earth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download these two data files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/share-of-individuals-using-the-internet-1990-2015.csv&#34;&gt;&lt;i class=&#34;fas fa-table&#34;&gt;&lt;/i&gt; &lt;code&gt;share-of-individuals-using-the-internet-1990-2015.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/data/ne_110m_admin_0_countries.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;ne_110m_admin_0_countries.zip&lt;/code&gt;&lt;/a&gt;. This is the &lt;a href=&#34;https://www.naturalearthdata.com/downloads/110m-cultural-vectors/&#34;&gt;‚Äú110m Admin 0‚ÄîCountries‚Äù&lt;/a&gt; shapefile from Natural Earth. It will download as a .zip file. Unzip the file and move the entire &lt;code&gt;ne_110m_admin_0_countries&lt;/code&gt; directory into your data folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and join the two datasets. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/12-exercise/12-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;12-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  12-exercise.Rmd
  your-project-name.Rproj
  data\
    share-of-individuals-using-the-internet-1990-2015.csv
    ne_110m_admin_0_countries/
      ...
      ne_110m_admin_0_countries.shp
      ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/12-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;12-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;/example/12-example/&#34;&gt;example from today‚Äôs session&lt;/a&gt; shows how to load and plot shapefiles and will be incredibly helpful as you do this exercise.&lt;/p&gt;
&lt;p&gt;This can be as simple or as complex as you want. You don‚Äôt need to make your plot super fancy, but if you‚Äôre feeling brave, experiment with changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-world-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: World map&lt;/h2&gt;
&lt;p&gt;Make a map showing the proportion of individuals in each country that had access to the internet in 2015.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I‚Äôve provided some starter code in the R Markdown file.&lt;/li&gt;
&lt;li&gt;You‚Äôll want to fill each country by the &lt;code&gt;users&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;Make sure you choose a good projection. See the &lt;a href=&#34;/example/12-example/#projections-and-coordinate-reference-systems&#34;&gt;‚ÄúProjections and coordinate reference systems‚Äù section&lt;/a&gt; from the example.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Bonus optional extra fun: Use your comparison/time skills to show the change in internet access between 2000 and 2015, perhaps with facetting some years, or &lt;a href=&#34;https://observablehq.com/@mbostock/methods-of-comparison-compared&#34;&gt;calculating ratios or proportions or percent changes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-optional-task-personal-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus (optional) task!: Personal map&lt;/h2&gt;
&lt;p&gt;Draw your own map with your own points. This could be a map of places you‚Äôve lived, or a map of places you‚Äôve visited, or a map of places you want to visit. Anything!&lt;/p&gt;
&lt;p&gt;The only requirement is that you find an appropriate shapefile (states, counties, world, etc.), collect latitude and longitude data from Google Maps, and plot the points (with or without labels) on a map. Use multiple shapefiles if you want‚Äîadd roads, rivers, lakes, whatever.&lt;/p&gt;
&lt;p&gt;Hint: Basically follow &lt;a href=&#34;/example/12-example/#making-your-own-geoencoded-data&#34;&gt;the code from the example in the section named ‚ÄúMaking your own geoencoded data‚Äù&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/example/13-example/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/13-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#live-coding-example&#34;&gt;Live coding example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code&#34;&gt;Complete code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#get-data&#34;&gt;Get data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clean-data&#34;&gt;Clean data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tokens-and-word-counts&#34;&gt;Tokens and word counts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#single-words&#34;&gt;Single words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bigrams&#34;&gt;Bigrams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bigrams-and-probability&#34;&gt;Bigrams and probability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#term-frequency-inverse-document-frequency-tf-idf&#34;&gt;Term frequency-inverse document frequency (tf-idf)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sentiment-analysis&#34;&gt;Sentiment analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#neat-extra-stuff&#34;&gt;Neat extra stuff&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#part-of-speech-tagging&#34;&gt;Part of speech tagging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#topic-modeling-and-fingerprinting&#34;&gt;Topic modeling and fingerprinting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#text-features&#34;&gt;Text features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For this example, we‚Äôre going to use the text of &lt;em&gt;Little Women&lt;/em&gt; by Louisa May Alcott and four Shakespearean tragedies (&lt;em&gt;Romeo and Juliet&lt;/em&gt;, &lt;em&gt;King Lear&lt;/em&gt;, &lt;em&gt;Macbeth&lt;/em&gt;, and &lt;em&gt;Hamlet&lt;/em&gt;) to explore how to do some basic text visualization.&lt;/p&gt;
&lt;p&gt;You can follow along if you want, but &lt;strong&gt;don‚Äôt feel like you have too&lt;/strong&gt;. This is mostly just to give you a taste of different methods for visualizing text. It‚Äôs by no means comprehensive, but it is well annotated and commented and should (hopefully) be easy to follow.&lt;/p&gt;
&lt;p&gt;If you want to play with part-of-speech tagging, you can download an already-tagged version of &lt;em&gt;Little Women&lt;/em&gt; here (you‚Äôll likely need to right click and choose ‚ÄúSave Link As‚Ä¶‚Äù):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/little_women_tagged.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;little_women_tagged.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to see other examples of text visualizations with the &lt;strong&gt;tidytext&lt;/strong&gt; package, check out some of these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://rstudio-pubs-static.s3.amazonaws.com/300624_8260952d1f0346969e65f41a97006bf5.html&#34;&gt;Harry Potter Sentiment Analysis for Beginners&lt;/a&gt; (this uses &lt;a href=&#34;https://github.com/bradleyboehmke/harrypotter&#34;&gt;the &lt;strong&gt;harrypotter&lt;/strong&gt; package&lt;/a&gt;, which you can install from GitHub (not from CRAN))&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Peer Christensen &lt;a href=&#34;https://peerchristensen.netlify.app/post/fair-is-foul-and-foul-is-fair-a-tidytext-entiment-analysis-of-shakespeare-s-tragedies/&#34;&gt;‚ÄúFair is foul, and foul is fair: a tidytext sentiment analysis of Shakespeare‚Äôs tragedies‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.andrewheiss.com/blog/2018/12/26/tidytext-pos-john/&#34;&gt;‚ÄúTidy text, parts of speech, and unique words in the Bible‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.andrewheiss.com/blog/2018/12/28/tidytext-pos-arabic/&#34;&gt;‚ÄúTidy text, parts of speech, and unique words in the Qur‚Äôan‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;live-coding-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Live coding example&lt;/h2&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/YeyZp8Dw55g&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;complete-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(This is a highly cleaned up version of the code from the video.)&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;get-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get data&lt;/h3&gt;
&lt;p&gt;First, as always, we‚Äôll load the libraries we‚Äôll be using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)   # For ggplot, dplyr, etc.
library(tidytext)    # For neat text things
library(gutenbergr)  # For downloading books from Project Gutenberg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We‚Äôre going to use the &lt;strong&gt;gutenbergr&lt;/strong&gt; package to download some books directly from Project Gutenberg. The IDs for these books come from the URLs at their website. For instance, &lt;a href=&#34;https://www.gutenberg.org/ebooks/514&#34;&gt;&lt;em&gt;Little Women&lt;/em&gt; is book #514&lt;/a&gt;. We‚Äôll store these books as `*_raw* and then clean them up later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 514 Little Women
little_women_raw &amp;lt;- gutenberg_download(514, meta_fields = &amp;quot;title&amp;quot;)

# 1524 - Hamlet
# 1532 - King Lear
# 1533 - Macbeth
# 1513 - Romeo and Juliet
tragedies_raw &amp;lt;- gutenberg_download(c(1524, 1532, 1533, 1513),
                                    meta_fields = &amp;quot;title&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you won‚Äôt want to redownload the books every time you knit (you don‚Äôt), you can do the same trick we‚Äôve used for &lt;a href=&#34;/example/08-example/&#34;&gt;WDI&lt;/a&gt; and &lt;a href=&#34;/example/11-example/&#34;&gt;FRED data&lt;/a&gt;. Put the actual code for getting the books in a chunk with &lt;code&gt;eval=FALSE&lt;/code&gt; on it and run it manually in RStudio when you want to get the data. Then you can write the downloaded data as a CSV file, and then load it invisibly from the CSV file when you knit:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;I first download data from Project Gutenberg:

```{r get-book, eval=FALSE}
books_raw &amp;lt;- gutenberg_download(...)

write_csv(books_raw, &amp;quot;data/books_raw.csv&amp;quot;)
```

```{r load-book-data-real, include=FALSE}
books_raw &amp;lt;- read_csv(&amp;quot;data/books_raw.csv&amp;quot;)
```&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;clean-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Clean data&lt;/h3&gt;
&lt;p&gt;The data you get from Project Gutenberg comes in a tidy format, with a column for the book id, a column for the title, and a column for text. Sometimes this text column will be divided by lines in the book; sometimes it might be an entire page or paragraph or chapter. It all depends on how the book is formatted at Project Gutenberg.&lt;/p&gt;
&lt;p&gt;Here‚Äôs what the start of our &lt;code&gt;little_women_raw&lt;/code&gt; data looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(little_women_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   gutenberg_id text              title       
##          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;       
## 1          514 LITTLE WOMEN      Little Women
## 2          514 &amp;lt;NA&amp;gt;              Little Women
## 3          514 &amp;lt;NA&amp;gt;              Little Women
## 4          514 by                Little Women
## 5          514 &amp;lt;NA&amp;gt;              Little Women
## 6          514 Louisa May Alcott Little Women&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we look at the data in RStudio, we can see that the actual book doesn‚Äôt start until row 70 (the first 69 rows are the table of contents and other parts of the front matter).&lt;/p&gt;
&lt;p&gt;It would be nice if we had a column that indicated what chapter each line is in, since we could then group by chapter and look at patterns within chapters. Since the data doesn‚Äôt come with a chapter column, we have to make one ourselves using a fun little trick. Each chapter in the book starts with ‚ÄúCHAPTER ONE‚Äù or ‚ÄúCHAPTER TWO‚Äù, with ‚Äúchapter‚Äù in ALL CAPS. We can make a variable named &lt;code&gt;chapter_start&lt;/code&gt; that will be true if a line starts with ‚ÄúCHAPTER‚Äù and false if not. Then we can use the &lt;code&gt;cumsum()&lt;/code&gt; function to take the cumulative sum of this column, which will increment up one number ever time there‚Äôs a new chapter, thus creating a helpful chapter column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Clean up Little Women
little_women &amp;lt;- little_women_raw %&amp;gt;% 
  # The actual book doesn&amp;#39;t start until line 70
  slice(70:n()) %&amp;gt;% 
  # Get rid of rows where text is missing
  drop_na(text) %&amp;gt;% 
  # Chapters start with CHAPTER X, so mark if each row is a chapter start
  # cumsum() calculates the cumulative sum, so it&amp;#39;ll increase every time there&amp;#39;s
  # a new chapter and automatically make chapter numbers
  mutate(chapter_start = str_detect(text, &amp;quot;^CHAPTER&amp;quot;),
         chapter_number = cumsum(chapter_start)) %&amp;gt;% 
  # Get rid of these columns
  select(-gutenberg_id, -title, -chapter_start)

head(little_women)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   text                                                                        chapter_number
##   &amp;lt;chr&amp;gt;                                                                                &amp;lt;int&amp;gt;
## 1 &amp;quot;CHAPTER ONE&amp;quot;                                                                            1
## 2 &amp;quot;PLAYING PILGRIMS&amp;quot;                                                                       1
## 3 &amp;quot;\&amp;quot;Christmas won&amp;#39;t be Christmas without any presents,\&amp;quot; grumbled Jo, lying&amp;quot;              1
## 4 &amp;quot;on the rug.&amp;quot;                                                                            1
## 5 &amp;quot;\&amp;quot;It&amp;#39;s so dreadful to be poor!\&amp;quot; sighed Meg, looking down at her old&amp;quot;                   1
## 6 &amp;quot;dress.&amp;quot;                                                                                 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data from Shakespeare is similarly messy, with just three columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tragedies_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   gutenberg_id text                   title           
##          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;           
## 1         1513 ROMEO AND JULIET       Romeo and Juliet
## 2         1513 &amp;lt;NA&amp;gt;                   Romeo and Juliet
## 3         1513 by William Shakespeare Romeo and Juliet
## 4         1513 &amp;lt;NA&amp;gt;                   Romeo and Juliet
## 5         1513 &amp;lt;NA&amp;gt;                   Romeo and Juliet
## 6         1513 &amp;lt;NA&amp;gt;                   Romeo and Juliet&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The initial text sometimes isn‚Äôt the actual text of the book. If you look at the beginning of &lt;em&gt;Hamlet&lt;/em&gt;, for instance, there‚Äôs a bunch of introductory stuff from editors and transcribers. In real life, we‚Äôd want to find a systematic way to get rid of that (perhaps by looking at how many introductory rows there are in each of the four plays and removing those rows), but for now, we‚Äôll just live with it and pretend Shakespeare wrote these notes. ü§∑&lt;/p&gt;
&lt;p&gt;We could also figure out a systematic way to indicate acts and scenes, but that‚Äôs tricky, so we won‚Äôt for this example. (&lt;a href=&#34;https://peerchristensen.netlify.app/post/fair-is-foul-and-foul-is-fair-a-tidytext-entiment-analysis-of-shakespeare-s-tragedies/&#34;&gt;This guy did though!&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Now that we have tidy text data, let‚Äôs do stuff with it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tokens-and-word-counts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tokens and word counts&lt;/h3&gt;
&lt;div id=&#34;single-words&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Single words&lt;/h4&gt;
&lt;p&gt;One way we can visualize text is to look at word frequencies and find the most common words. This is even more important when looking across documents.&lt;/p&gt;
&lt;p&gt;Right now the text we have is tidy, but it is based on lines of text, not words. In order to count words correctly, we need each token (or text element, whether it be a word or bigram or paragraph or whatever) to be in its own row. The &lt;code&gt;unnest_tokens()&lt;/code&gt; functions from &lt;strong&gt;tidytext&lt;/strong&gt; does this for us. The first argument is the name of the column we want to create; the second argument is the name of the column we want to split into tokens.&lt;/p&gt;
&lt;p&gt;Let‚Äôs just work with the Shakespeare tragedies:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tragedies_words &amp;lt;- tragedies_raw %&amp;gt;% 
  drop_na(text) %&amp;gt;% 
  unnest_tokens(word, text)

head(tragedies_words)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   gutenberg_id title            word       
##          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;      
## 1         1513 Romeo and Juliet romeo      
## 2         1513 Romeo and Juliet and        
## 3         1513 Romeo and Juliet juliet     
## 4         1513 Romeo and Juliet by         
## 5         1513 Romeo and Juliet william    
## 6         1513 Romeo and Juliet shakespeare&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have words, we can filter and count the words. Here‚Äôs what‚Äôs happening in this next chunk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use &lt;code&gt;anti_join()&lt;/code&gt; to remove all common stop words like ‚Äúa‚Äù and ‚Äúthe‚Äù that are listed in the &lt;code&gt;stop_words&lt;/code&gt; dataset that is loaded when you load &lt;strong&gt;tidytext&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;We count how many times each word appears in each title/play&lt;/li&gt;
&lt;li&gt;We only keep the top 15 words&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_words_tragedies &amp;lt;- tragedies_words %&amp;gt;% 
  # Remove stop words
  anti_join(stop_words) %&amp;gt;% 
  # Get rid of old timey words and stage directions
  filter(!(word %in% c(&amp;quot;thou&amp;quot;, &amp;quot;thy&amp;quot;, &amp;quot;haue&amp;quot;, &amp;quot;thee&amp;quot;, 
                      &amp;quot;thine&amp;quot;, &amp;quot;enter&amp;quot;, &amp;quot;exeunt&amp;quot;, &amp;quot;exit&amp;quot;))) %&amp;gt;% 
  # Count all the words in each play
  count(title, word, sort = TRUE) %&amp;gt;% 
  # Keep top 15 in each play
  group_by(title) %&amp;gt;% 
  top_n(15) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  # Make the words an ordered factor so they plot in order
  mutate(word = fct_inorder(word))
top_words_tragedies&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 63 x 3
##    title                     word        n
##    &amp;lt;chr&amp;gt;                     &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
##  1 Hamlet, Prince of Denmark ham       358
##  2 Romeo and Juliet          romeo     296
##  3 Macbeth                   macbeth   282
##  4 The Tragedy of King Lear  lear      230
##  5 Hamlet, Prince of Denmark lord      223
##  6 Hamlet, Prince of Denmark king      197
##  7 Romeo and Juliet          juliet    178
##  8 The Tragedy of King Lear  kent      174
##  9 Romeo and Juliet          nurse     149
## 10 Romeo and Juliet          capulet   145
## # ‚Ä¶ with 53 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can plot these results, facetting and filling by title:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(top_words_tragedies, aes(y = fct_rev(word), x = n, fill = title)) + 
  geom_col() + 
  guides(fill = FALSE) +
  labs(y = &amp;quot;Count&amp;quot;, x = NULL, 
       title = &amp;quot;15 most frequent words in four Shakespearean tragedies&amp;quot;) +
  facet_wrap(vars(title), scales = &amp;quot;free_y&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/plot-top-words-tragedies-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These results aren‚Äôt terribly surprising. ‚Äúlear‚Äù is the most common word in &lt;em&gt;King Lear&lt;/em&gt;, ‚Äúmacbeth‚Äù is the most common word in &lt;em&gt;Macbeth&lt;/em&gt;, and so on. But the results are still really neat! This is a wordcloud for grownups!&lt;/p&gt;
&lt;p&gt;(Sharp-eyed readers will notice that the words aren‚Äôt actually in perfect order! That‚Äôs because some common words are repeated across the plays, like ‚Äúlord‚Äù and ‚Äúsir‚Äù. However, each category in a factor can only have one possible position in the orer, so because ‚Äúlord‚Äù is the second most common word in &lt;em&gt;Hamlet&lt;/em&gt; it also appears as #2 in &lt;em&gt;Macbeth&lt;/em&gt; and &lt;em&gt;King Lear&lt;/em&gt;. You can fix this with the &lt;code&gt;reorder_within()&lt;/code&gt; function in &lt;strong&gt;tidytext&lt;/strong&gt;‚Äîsee &lt;a href=&#34;https://juliasilge.com/blog/reorder-within/&#34;&gt;Julia Silge‚Äôs tutorial here&lt;/a&gt; for how to use it.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bigrams&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Bigrams&lt;/h4&gt;
&lt;p&gt;We can also look at pairs of words instead of single words. To do this, we need to change a couple arguments in &lt;code&gt;unnest_tokens()&lt;/code&gt;, but otherwise everything else stays the same. In order to remove stopwords, we need to split the bigram column into two columns (&lt;code&gt;word1&lt;/code&gt; and &lt;code&gt;word2&lt;/code&gt;) with &lt;code&gt;separate()&lt;/code&gt;, filter each of those columns, and then combine the word columns back together as &lt;code&gt;bigram&lt;/code&gt; with &lt;code&gt;unite()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tragedies_bigrams &amp;lt;- tragedies_raw %&amp;gt;% 
  drop_na(text) %&amp;gt;% 
  # n = 2 here means bigrams. We could also make trigrams (n = 3) or any type of n-gram
  unnest_tokens(bigram, text, token = &amp;quot;ngrams&amp;quot;, n = 2) %&amp;gt;% 
  # Split the bigrams into two words so we can remove stopwords
  separate(bigram, c(&amp;quot;word1&amp;quot;, &amp;quot;word2&amp;quot;), sep = &amp;quot; &amp;quot;) %&amp;gt;% 
  filter(!word1 %in% stop_words$word,
         !word2 %in% stop_words$word) %&amp;gt;% 
  filter(!word1 %in% c(&amp;quot;thou&amp;quot;, &amp;quot;thy&amp;quot;, &amp;quot;thine&amp;quot;, &amp;quot;enter&amp;quot;, &amp;quot;exeunt&amp;quot;, &amp;quot;exit&amp;quot;),
         !word2 %in% c(&amp;quot;thou&amp;quot;, &amp;quot;thy&amp;quot;, &amp;quot;thine&amp;quot;, &amp;quot;enter&amp;quot;, &amp;quot;exeunt&amp;quot;, &amp;quot;exit&amp;quot;)) %&amp;gt;% 
  # Put the two word columns back together
  unite(bigram, word1, word2, sep = &amp;quot; &amp;quot;)
tragedies_bigrams&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 14,237 x 3
##    gutenberg_id title            bigram             
##           &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;              
##  1         1513 Romeo and Juliet william shakespeare
##  2         1513 Romeo and Juliet shakespeare persons
##  3         1513 Romeo and Juliet persons represented
##  4         1513 Romeo and Juliet represented escalus
##  5         1513 Romeo and Juliet escalus prince     
##  6         1513 Romeo and Juliet verona paris       
##  7         1513 Romeo and Juliet nobleman kinsman   
##  8         1513 Romeo and Juliet prince montague    
##  9         1513 Romeo and Juliet montague heads     
## 10         1513 Romeo and Juliet capulet romeo      
## # ‚Ä¶ with 14,227 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_bigrams &amp;lt;- tragedies_bigrams %&amp;gt;% 
  # Count all the bigrams in each play
  count(title, bigram, sort = TRUE) %&amp;gt;% 
  # Keep top 15 in each play
  group_by(title) %&amp;gt;% 
  top_n(15) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  # Make the bigrams an ordered factor so they plot in order
  mutate(bigram = fct_inorder(bigram))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Selecting by n&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(top_bigrams, aes(y = fct_rev(bigram), x = n, fill = title)) + 
  geom_col() + 
  guides(fill = FALSE) +
  labs(y = &amp;quot;Count&amp;quot;, x = NULL, 
       title = &amp;quot;15 most frequent bigrams in four Shakespearean tragedies&amp;quot;) +
  facet_wrap(vars(title), scales = &amp;quot;free&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/top-bigrams-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are some neat trends here. ‚ÄúLord Hamlet‚Äù is the most common pair of words in &lt;em&gt;Hamlet&lt;/em&gt; (not surprisingly), but in Macbeth the repeated ‚Äúknock knock‚Äù (the first non-name repeated pair) is a well-known plot point and reoccurring symbolic theme throughout the play.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;bigrams-and-probability&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bigrams and probability&lt;/h3&gt;
&lt;p&gt;We can replicate the &lt;a href=&#34;https://pudding.cool/2017/08/screen-direction/&#34;&gt;‚ÄúShe Giggles, He Gallops‚Äù&lt;/a&gt; idea by counting the bigrams that match ‚Äúhe X‚Äù and ‚Äúshe X‚Äù.&lt;/p&gt;
&lt;p&gt;The log ratio idea shows how much more likely a word is compared to its counterpart (so ‚Äúhe that‚Äù is about 5 more likely to appear than ‚Äúshe that‚Äù. In this graph, I replaced the x-axis labels with ‚Äú2x‚Äù and ‚Äú4x‚Äù, but without those, you get numbers like 1, 2, and 3 (or -1, -2, -3)). To convert those logged ratio numbers into the multiplicative version (i.e.¬†2x instead of 1), raise 2 to the power of the log ratio. If the log ratio is 3, the human-readable version is &lt;span class=&#34;math inline&#34;&gt;\(2^3\)&lt;/span&gt;, or 8 times.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Take the log of 8:
log2(8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Reverse log of 3:
2^3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only text wizardry here is tokenizing the words. Pretty much the rest of all this code is just &lt;strong&gt;dplyr&lt;/strong&gt; mutating, filtering, and counting:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pronouns &amp;lt;- c(&amp;quot;he&amp;quot;, &amp;quot;she&amp;quot;)

bigram_he_she_counts &amp;lt;- tragedies_raw %&amp;gt;%
  drop_na(text) %&amp;gt;% 
  # Split into bigrams
  unnest_tokens(bigram, text, token = &amp;quot;ngrams&amp;quot;, n = 2) %&amp;gt;%
  # Find counts of bigrams
  count(bigram, sort = TRUE) %&amp;gt;%
  # Split the bigram column into two columns
  separate(bigram, c(&amp;quot;word1&amp;quot;, &amp;quot;word2&amp;quot;), sep = &amp;quot; &amp;quot;) %&amp;gt;%
  # Only choose rows where the first word is he or she
  filter(word1 %in% pronouns) %&amp;gt;%
  count(word1, word2, wt = n, sort = TRUE) %&amp;gt;% 
  rename(total = n)

word_ratios &amp;lt;- bigram_he_she_counts %&amp;gt;%
  # Look at each of the second words
  group_by(word2) %&amp;gt;%
  # Only choose rows where the second word appears more than 10 times
  filter(sum(total) &amp;gt; 10) %&amp;gt;%
  ungroup() %&amp;gt;%
  # Spread out the word1 column so that there&amp;#39;s a column named &amp;quot;he&amp;quot; and one named &amp;quot;she&amp;quot;
  spread(word1, total, fill = 0) %&amp;gt;%
  # Add 1 to each number so that logs work (just in case any are zero)
  mutate_if(is.numeric, ~(. + 1) / sum(. + 1)) %&amp;gt;%
  # Create a new column that is the logged ratio of the she counts to he counts
  mutate(logratio = log2(she / he)) %&amp;gt;%
  # Sort by that ratio
  arrange(desc(logratio))

# Rearrange this data so it&amp;#39;s plottable
plot_word_ratios &amp;lt;- word_ratios %&amp;gt;%
  # This gets the words in the right order---we take the absolute value, select
  # only rows where the log ratio is bigger than 0, and then take the top 15 words
  mutate(abslogratio = abs(logratio)) %&amp;gt;%
  group_by(logratio &amp;lt; 0) %&amp;gt;%
  top_n(15, abslogratio) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(word = reorder(word2, logratio)) 

# Finally we plot this
ggplot(plot_word_ratios, aes(y = word, x = logratio, color = logratio &amp;lt; 0)) +
  geom_segment(aes(y = word, yend = word,
                   x = 0, xend = logratio), 
               size = 1.1, alpha = 0.6) +
  geom_point(size = 3.5) +
  labs(x = &amp;quot;How much more/less likely&amp;quot;, y = NULL) +
  scale_color_discrete(name = &amp;quot;&amp;quot;, labels = c(&amp;quot;More &amp;#39;she&amp;#39;&amp;quot;, &amp;quot;More &amp;#39;he&amp;#39;&amp;quot;)) +
  scale_x_continuous(breaks = seq(-3, 3),
                     labels = c(&amp;quot;8x&amp;quot;, &amp;quot;4x&amp;quot;, &amp;quot;2x&amp;quot;,
                                &amp;quot;Same&amp;quot;, &amp;quot;2x&amp;quot;, &amp;quot;4x&amp;quot;, &amp;quot;8x&amp;quot;)) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/bigrams-he-she-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Shakespeare doesn‚Äôt use a lot of fancy verbs in his plays, so we‚Äôre left with incredibly common verbs like ‚Äúshould‚Äù and ‚Äúcomes‚Äù and ‚Äúwas‚Äù. Oh well.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;term-frequency-inverse-document-frequency-tf-idf&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Term frequency-inverse document frequency (tf-idf)&lt;/h3&gt;
&lt;p&gt;We can determine which words are the most unique for each book/document in our corpus using by calculating the tf-idf (term frequency-inverse document frequency) score for each term. The tf-idf is the product of the term frequency and the inverse document frequency:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
tf(\text{term}) &amp;amp;= \frac{n_{\text{term}}}{n_{\text{terms in document}}} \\
idf(\text{term}) &amp;amp;= \ln{\left(\frac{n_{\text{documents}}}{n_{\text{documents containing term}}}\right)} \\
tf\text{-}idf(\text{term}) &amp;amp;= tf(\text{term}) \times idf(\text{term})
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Fortunately you don‚Äôt need to remember that formula. The &lt;code&gt;bind_tf_idf()&lt;/code&gt; function will calculate this for you. Remember, the higher the tf-idf number, the more unique the term is in the document, but these numbers are meaningless and unitless‚Äîyou can‚Äôt convert them to a percentage or anything.&lt;/p&gt;
&lt;p&gt;Here are the most unique words in these four tragedies, compared to all the tragedies:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tragedy_words &amp;lt;- tragedies_raw %&amp;gt;% 
  drop_na() %&amp;gt;% 
  # Split into word tokens
  unnest_tokens(word, text) %&amp;gt;% 
  # Remove stop words and old timey words
  anti_join(stop_words) %&amp;gt;% 
  filter(!word %in% c(&amp;quot;thou&amp;quot;, &amp;quot;thy&amp;quot;, &amp;quot;haue&amp;quot;, &amp;quot;thee&amp;quot;, 
                      &amp;quot;thine&amp;quot;, &amp;quot;enter&amp;quot;, &amp;quot;exeunt&amp;quot;, &amp;quot;exit&amp;quot;)) %&amp;gt;% 
  count(title, word, sort = TRUE)

# Add the tf-idf values to the counts
tragedy_tf_idf &amp;lt;- tragedy_words %&amp;gt;% 
  bind_tf_idf(word, title, n)

# Get the top 10 uniquest words
tragedy_tf_idf_plot &amp;lt;- tragedy_tf_idf %&amp;gt;% 
  arrange(desc(tf_idf)) %&amp;gt;% 
  group_by(title) %&amp;gt;% 
  top_n(10) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(word = fct_inorder(word))

ggplot(tragedy_tf_idf_plot, 
       aes(y = fct_rev(word), x = tf_idf, fill = title)) +
  geom_col() +
  guides(fill = FALSE) +
  labs(x = &amp;quot;tf-idf&amp;quot;, y = NULL) +
  facet_wrap(~ title, scales = &amp;quot;free&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/tf-idf-tragedies-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not surprisingly, the most unique words for each play happen to be the names of the characters in those plays.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sentiment-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sentiment analysis&lt;/h3&gt;
&lt;p&gt;In the video, I plotted the sentiment of &lt;em&gt;Little Women&lt;/em&gt; across the book, but it wasn‚Äôt a very interesting plot. We‚Äôll try with Shakespeare here instead.&lt;/p&gt;
&lt;p&gt;At its core, sentiment analysis involves looking at a big list of words for how negative or positive they are. Some sentiment dictionaries mark if a word is ‚Äúnegative‚Äù or ‚Äúpositive‚Äù; some give words a score from -3 to 3; some give different emotions like ‚Äúsadness‚Äù or ‚Äúanger‚Äù. You can see what the different dictionaries look like with &lt;code&gt;get_sentiments()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_sentiments(&amp;quot;afinn&amp;quot;)  # Scoring system&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,477 x 2
##    word       value
##    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 abandon       -2
##  2 abandoned     -2
##  3 abandons      -2
##  4 abducted      -2
##  5 abduction     -2
##  6 abductions    -2
##  7 abhor         -3
##  8 abhorred      -3
##  9 abhorrent     -3
## 10 abhors        -3
## # ‚Ä¶ with 2,467 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get_sentiments(&amp;quot;bing&amp;quot;)  # Negative/positive
# get_sentiments(&amp;quot;nrc&amp;quot;)  # Specific emotions
# get_sentiments(&amp;quot;loughran&amp;quot;)  # Designed for financial statements; positive/negative&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we split the Shakespearean tragedies into words, join a sentiment dictionary to it, and use &lt;strong&gt;dplyr&lt;/strong&gt; data wrangling to calculate the net number positive words in each chapter. Had we used the AFINN library, we could calculate the average sentiment per chapter, since AFINN uses a scoring system instead of negative/positive labels. Or we could‚Äôve used the NRC library, which has specific emotions like trust and fear.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tragedy_words &amp;lt;- tragedies_raw %&amp;gt;% 
  drop_na() %&amp;gt;% 
  # Split into word tokens
  unnest_tokens(word, text) %&amp;gt;% 
  # Remove stop words and old timey words
  anti_join(stop_words) %&amp;gt;% 
  filter(!word %in% c(&amp;quot;thou&amp;quot;, &amp;quot;thy&amp;quot;, &amp;quot;haue&amp;quot;, &amp;quot;thee&amp;quot;, 
                      &amp;quot;thine&amp;quot;, &amp;quot;enter&amp;quot;, &amp;quot;exeunt&amp;quot;, &amp;quot;exit&amp;quot;))

# Join the sentiment dictionary 
tragedy_sentiment &amp;lt;- tragedy_words %&amp;gt;% 
  inner_join(get_sentiments(&amp;quot;bing&amp;quot;))
tragedy_sentiment&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7,736 x 4
##    gutenberg_id title            word       sentiment
##           &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    
##  1         1513 Romeo and Juliet dignity    positive 
##  2         1513 Romeo and Juliet fair       positive 
##  3         1513 Romeo and Juliet grudge     negative 
##  4         1513 Romeo and Juliet break      negative 
##  5         1513 Romeo and Juliet unclean    negative 
##  6         1513 Romeo and Juliet fatal      negative 
##  7         1513 Romeo and Juliet overthrows negative 
##  8         1513 Romeo and Juliet death      negative 
##  9         1513 Romeo and Juliet strife     negative 
## 10         1513 Romeo and Juliet fearful    negative 
## # ‚Ä¶ with 7,726 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can look at these sentiments a few different ways. First we can get a count of total positive and negative words in the four books. We can see that in all four, there are more negative words than positive ones (they‚Äôre tragdies, after all):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tragedy_sentiment_plot &amp;lt;- tragedy_sentiment %&amp;gt;% 
  count(title, sentiment)

ggplot(tragedy_sentiment_plot, aes(x = sentiment, y = n, fill = title, alpha = sentiment)) +
  geom_col(position = position_dodge()) +
  scale_alpha_manual(values = c(0.5, 1)) +
  facet_wrap(vars(title)) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/shakespeare-sentiment-plot-bars-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Perhaps more usefully, we can divide each of the plays into groups of 100 lines, and then get the net sentiment of each group (number of positive words ‚àí number of negative words). By splitting the data into groups of lines, we can show a more granular view of the progression of the plot. To do this we make a column that indicates the row number, and then we use the special &lt;code&gt;%/%&lt;/code&gt; operator to perform integer division, which essentially lops off the decimal point when dividing numbers: 150/100 normally is 1.5, but in integer divison, it is 1. This is a helpful trick for putting rows 1-99 in one group, then rows 100-199 in another group, etc.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tragedies_split_into_lines &amp;lt;- tragedy_sentiment %&amp;gt;% 
  # Divide lines into groups of 100
  mutate(line = row_number(),
         line_chunk = line %/% 100) %&amp;gt;% 
  # Get a count of postiive and negative words in each 100-line chunk in each play
  count(title, line_chunk, sentiment) %&amp;gt;% 
  # Convert the sentiment column into two columns named &amp;quot;positive&amp;quot; and &amp;quot;negative&amp;quot;
  pivot_wider(names_from = sentiment, values_from = n) %&amp;gt;% 
  # Calculate net sentiment
  mutate(sentiment = positive - negative)

ggplot(tragedies_split_into_lines,
       aes(x = line_chunk, y = sentiment, fill = sentiment)) +
  geom_col() +
  scale_fill_viridis_c(option = &amp;quot;magma&amp;quot;, end = 0.9) +
  facet_wrap(vars(title), scales = &amp;quot;free_x&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/shakespeare-sentiment-plot-lines-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Neat. They‚Äôre all really sad and negative, except for the beginning of Romeo and Juliet where the two lovers meet and fall in love. Then everyone dies later.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;neat-extra-stuff&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Neat extra stuff&lt;/h3&gt;
&lt;p&gt;None of this stuff was in the video, but it‚Äôs useful to know and see how to do it. It all generally comes from the &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;&lt;em&gt;Tidy Text Mining&lt;/em&gt; book&lt;/a&gt; by Julia Silge and David Robinson&lt;/p&gt;
&lt;div id=&#34;part-of-speech-tagging&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Part of speech tagging&lt;/h4&gt;
&lt;p&gt;R has no way of knowing if words are nouns, verbs, or adjectives. You can algorithmically predict what part of speech each word is using a part-of-speech tagger, like &lt;a href=&#34;https://spacy.io/&#34;&gt;&lt;strong&gt;spaCy&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://nlp.stanford.edu/&#34;&gt;Stanford‚Äôs Natural Langauge Processing (NLP) library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are external programs that are not written in R and don‚Äôt naturally communicate with R (spaCy is written in Python; Stanford‚Äôs CoreNLP is written in Java). There is a helpful R package named &lt;strong&gt;cleanNLP&lt;/strong&gt; that helps you interact with these programs from within R, whis is super helpful. &lt;strong&gt;cleanNLP&lt;/strong&gt; also comes with its own R-only tagger so you don‚Äôt need to install anything with Python or Java (however, it‚Äôs not as powerful as either spaCy, which is faster, and doesn‚Äôt deal with foreign languages like Arabic and Chinese like Stanford‚Äôs NLP library).&lt;/p&gt;
&lt;p&gt;You can see other examples of part-of-speech tagging (along with instructions for how to install spaCy and coreNLP) here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.andrewheiss.com/blog/2018/12/26/tidytext-pos-john/&#34;&gt;‚ÄúTidy text, parts of speech, and unique words in the Bible‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.andrewheiss.com/blog/2018/12/28/tidytext-pos-arabic/&#34;&gt;‚ÄúTidy text, parts of speech, and unique words in the Qur‚Äôan‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here‚Äôs the general process for tagging (or ‚Äúannotating‚Äù) text with the &lt;strong&gt;cleanNLP&lt;/strong&gt; package:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Make a dataset where one column is the id (line number, chapter number, book+chapter, etc.), and another column is the text itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialize the NLP tagger. You can use any of these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cnlp_init_udpipe()&lt;/code&gt;: Use an R-only tagger that should work without installing anything extra (a little slower than the others, but requires no extra steps!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cnlp_init_spacy()&lt;/code&gt;: Use spaCy (if you‚Äôve installed it on your computer with Python)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cnlp_init_corenlp()&lt;/code&gt;: Use Stanford‚Äôs NLP library (if you‚Äôve installed it on your computer with Java)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Feed the data frame from step 1 into the &lt;code&gt;cnlp_annotate()&lt;/code&gt; function and wait.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the tagged data on your computer so you don‚Äôt have to re-tag it every time.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here‚Äôs an example using the &lt;em&gt;Little Women&lt;/em&gt; data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For the tagger to work, each row needs to be unique, which means we need to
# combine all the text into individual chapter-based rows. This takes a little
# bit of text-wrangling with dplyr:
little_women_to_tag &amp;lt;- little_women %&amp;gt;% 
  # Group by chapter number
  group_by(chapter_number) %&amp;gt;% 
  # Take all the rows in each chapter and collapse them into a single cell
  nest(data = c(text)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  # Look at each individual cell full of text lines and paste them together into
  # one really long string of text per chapter
  mutate(text = map_chr(data, ~paste(.$text, collapse = &amp;quot; &amp;quot;))) %&amp;gt;% 
  # Get rid of this column
  select(-data)
little_women_to_tag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 47 x 2
##    chapter_number text                                                                                                                                
##             &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                                                                                                               
##  1              1 &amp;quot;CHAPTER ONE PLAYING PILGRIMS \&amp;quot;Christmas won&amp;#39;t be Christmas without any presents,\&amp;quot; grumbled Jo, lying on the rug. \&amp;quot;It&amp;#39;s so dread‚Ä¶
##  2              2 &amp;quot;CHAPTER TWO A MERRY CHRISTMAS Jo was the first to wake in the gray dawn of Christmas morning. No stockings hung at the fireplace, ‚Ä¶
##  3              3 &amp;quot;CHAPTER THREE THE LAURENCE BOY \&amp;quot;Jo!  Jo!  Where are you?\&amp;quot; cried Meg at the foot of the garret stairs. \&amp;quot;Here!\&amp;quot; answered a husky‚Ä¶
##  4              4 &amp;quot;CHAPTER FOUR BURDENS \&amp;quot;Oh, dear, how hard it does seem to take up our packs and go on,\&amp;quot; sighed Meg the morning after the party, f‚Ä¶
##  5              5 &amp;quot;CHAPTER FIVE BEING NEIGHBORLY \&amp;quot;What in the world are you going to do now, Jo?\&amp;quot; asked Meg one snowy afternoon, as her sister came‚Ä¶
##  6              6 &amp;quot;CHAPTER SIX BETH FINDS THE PALACE BEAUTIFUL The big house did prove a Palace Beautiful, though it took some time for all to get in‚Ä¶
##  7              7 &amp;quot;CHAPTER SEVEN AMY&amp;#39;S VALLEY OF HUMILIATION \&amp;quot;That boy is a perfect cyclops, isn&amp;#39;t he?\&amp;quot; said Amy one day, as Laurie clattered by on‚Ä¶
##  8              8 &amp;quot;CHAPTER EIGHT JO MEETS APOLLYON \&amp;quot;Girls, where are you going?\&amp;quot; asked Amy, coming into their room one Saturday afternoon, and find‚Ä¶
##  9              9 &amp;quot;CHAPTER NINE MEG GOES TO VANITY FAIR \&amp;quot;I do think it was the most fortunate thing in the world that those children should have the‚Ä¶
## 10             10 &amp;quot;CHAPTER TEN THE P.C. AND P.O. As spring came on, a new set of amusements became the fashion, and the lengthening days gave long af‚Ä¶
## # ‚Ä¶ with 37 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how there‚Äôs now a row for each chapter, and the whole chapter is contained in the &lt;code&gt;text&lt;/code&gt; column. With the data in this format, we can annotate it. It takes about 3 minutes to run this on my 2016 MacBook Pro with the R-only udpipe tagger (and only 30 seconds if I use the spaCy tagger). Notice how I immediately save the tagged tokens as a CSV file after so I don‚Äôt have to do it again.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cleanNLP)

# Use the built-in R-based tagger
cnlp_init_udpipe()

little_women_tagged &amp;lt;- cnlp_annotate(little_women_to_tag, 
                                     text_name = &amp;quot;text&amp;quot;, 
                                     doc_name = &amp;quot;chapter_number&amp;quot;)

write_csv(little_women_tagged$token, &amp;quot;little_women_tagged.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here‚Äôs what the tagged text looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;little_women_tagged&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 232,093 x 10
##    doc_id   sid   tid token       token_with_ws lemma       upos  xpos  tid_source relation
##     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   
##  1      1     1     1 &amp;quot;CHAPTER&amp;quot;   &amp;quot;CHAPTER&amp;quot;     &amp;quot;chapter&amp;quot;   NOUN  NN             4 nmod    
##  2      1     1     2 &amp;quot;ONE&amp;quot;       &amp;quot;ONE&amp;quot;         &amp;quot;one&amp;quot;       NUM   CD             1 nummod  
##  3      1     1     3 &amp;quot;PLAYING&amp;quot;   &amp;quot;PLAYING&amp;quot;     &amp;quot;playing&amp;quot;   NOUN  NN             4 compound
##  4      1     1     4 &amp;quot;PILGRIMS&amp;quot;  &amp;quot;PILGRIMS&amp;quot;    &amp;quot;pilgrims&amp;quot;  NOUN  NN             0 root    
##  5      1     1     5 &amp;quot;\&amp;quot;&amp;quot;        &amp;quot;\&amp;quot;&amp;quot;          &amp;quot;\&amp;quot;&amp;quot;        PUNCT ``             4 punct   
##  6      1     2     1 &amp;quot;Christmas&amp;quot; &amp;quot;Christmas&amp;quot;   &amp;quot;Christmas&amp;quot; PROPN NNP            4 nsubj   
##  7      1     2     2 &amp;quot;wo&amp;quot;        &amp;quot;wo&amp;quot;          &amp;quot;will&amp;quot;      VERB  MD             4 aux     
##  8      1     2     3 &amp;quot;n&amp;#39;t&amp;quot;       &amp;quot;n&amp;#39;t&amp;quot;         &amp;quot;not&amp;quot;       PART  RB             4 neg     
##  9      1     2     4 &amp;quot;be&amp;quot;        &amp;quot;be&amp;quot;          &amp;quot;be&amp;quot;        AUX   VB             0 root    
## 10      1     2     5 &amp;quot;Christmas&amp;quot; &amp;quot;Christmas&amp;quot;   &amp;quot;Christmas&amp;quot; PROPN NNP            4 attr    
## # ‚Ä¶ with 232,083 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a bunch of new columns like &lt;code&gt;lemma&lt;/code&gt; (or the base stemmed word), and &lt;code&gt;upos&lt;/code&gt; and &lt;code&gt;pos&lt;/code&gt; for the different parts of speech. These use the &lt;a href=&#34;https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html&#34;&gt;Penn Treebank codes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that everything is tagged, we can do any grouping and summarizing and filtering we want. We could find the most common verbs, or the most common nouns or proper names, for instance. Here‚Äôs a fun plot that shows the proportion of mentions of the four main characters (Meg, Jo, Beth, and Amy) in each chapter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find all proper nouns
proper_nouns &amp;lt;- little_women_tagged %&amp;gt;% 
  filter(upos == &amp;quot;PROPN&amp;quot;)

main_characters_by_chapter &amp;lt;- proper_nouns %&amp;gt;% 
  # Find only Meg, Jo, Beth, and Amy
  filter(lemma %in% c(&amp;quot;Meg&amp;quot;, &amp;quot;Jo&amp;quot;, &amp;quot;Beth&amp;quot;, &amp;quot;Amy&amp;quot;)) %&amp;gt;% 
  # Group by chapter and character name
  group_by(doc_id, lemma) %&amp;gt;% 
  # Get the count of mentions
  summarize(n = n()) %&amp;gt;% 
  # Make a new column named &amp;quot;name&amp;quot; that is an ordered factor of the girls&amp;#39; names
  mutate(name = factor(lemma, levels = c(&amp;quot;Meg&amp;quot;, &amp;quot;Jo&amp;quot;, &amp;quot;Beth&amp;quot;, &amp;quot;Amy&amp;quot;), ordered = TRUE)) %&amp;gt;% 
  # Rename this so it&amp;#39;s called chapter
  rename(chapter = doc_id) %&amp;gt;% 
  # Group by chapter
  group_by(chapter) %&amp;gt;% 
  # Calculate the proportion of each girl&amp;#39;s mentions in each chapter
  mutate(prop = n / sum(n)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  # Make a cleaner chapter name column
  mutate(chapter_name = paste(&amp;quot;Chapter&amp;quot;, chapter)) %&amp;gt;% 
  mutate(chapter_name = fct_inorder(chapter_name))
main_characters_by_chapter&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 177 x 6
##    chapter lemma     n name    prop chapter_name
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;ord&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;       
##  1       1 Amy      23 Amy   0.195  Chapter 1   
##  2       1 Beth     26 Beth  0.220  Chapter 1   
##  3       1 Jo       43 Jo    0.364  Chapter 1   
##  4       1 Meg      26 Meg   0.220  Chapter 1   
##  5       2 Amy      13 Amy   0.197  Chapter 2   
##  6       2 Beth     12 Beth  0.182  Chapter 2   
##  7       2 Jo       21 Jo    0.318  Chapter 2   
##  8       2 Meg      20 Meg   0.303  Chapter 2   
##  9       3 Amy       2 Amy   0.0202 Chapter 3   
## 10       3 Beth      2 Beth  0.0202 Chapter 3   
## # ‚Ä¶ with 167 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here‚Äôs the polished plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(main_characters_by_chapter, aes(x = prop, y = 1, fill = fct_rev(name))) + 
  geom_col(position = position_stack()) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_viridis_d(option = &amp;quot;plasma&amp;quot;, end = 0.9, name = NULL) +
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(x = NULL, y = NULL,
       title = &amp;quot;Proportion of mentions of each\nLittle Woman per chapter&amp;quot;,
       subtitle = &amp;quot;Jo basically dominates the last third of the book&amp;quot;) +
  facet_wrap(vars(chapter_name), nrow = 6) +
  theme_bw(base_family = &amp;quot;Roboto Condensed&amp;quot;) +
  theme(legend.position = &amp;quot;top&amp;quot;,
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        strip.background = element_rect(fill = &amp;quot;white&amp;quot;),
        legend.text = element_text(face = &amp;quot;bold&amp;quot;, size = rel(1)),
        plot.title = element_text(face = &amp;quot;bold&amp;quot;, hjust = 0.5, size = rel(1.7)),
        plot.subtitle = element_text(hjust = 0.5, size = rel(1.1)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/example/13-example_files/figure-html/lw-props-plot-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;topic-modeling-and-fingerprinting&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Topic modeling and fingerprinting&lt;/h4&gt;
&lt;p&gt;If you want to see some examples of topic modeling with Latent Dirichlet Allocation (LDA) or text fingerprinting based on sentence length and counts of hapax legomena (&lt;a href=&#34;https://kops.uni-konstanz.de/bitstream/handle/123456789/5492/Literature_Fingerprinting.pdf&#34;&gt;based on this article&lt;/a&gt;), see these examples from a previous version of this class: &lt;a href=&#34;https://datavizf18.classes.andrewheiss.com/class/11-class/#topic-modeling&#34;&gt;topic modeling&lt;/a&gt; and &lt;a href=&#34;https://datavizf18.classes.andrewheiss.com/class/11-class/#fingerprinting&#34;&gt;fingerprinting&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text-features&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Text features&lt;/h4&gt;
&lt;p&gt;Finally, you can use &lt;a href=&#34;https://github.com/mkearney/textfeatures&#34;&gt;the &lt;strong&gt;textfeatures&lt;/strong&gt; package&lt;/a&gt; to find all sorts of interesting numeric statistics about text, like the number of exclamation points, commas, digits, characters per word, uppercase letters, lowercase letters, and more!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/lab/13-exercise/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/13-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-word-frequencies&#34;&gt;Task 2: Word frequencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optional-bonus-fun-tasks&#34;&gt;100% optional bonus fun tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise, you‚Äôll download some books from Project Gutenberg and visualize patterns in the words.&lt;/p&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with some helpful starter code. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/13-exercise/13-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;13-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  13-exercise.Rmd
  your-project-name.Rproj&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/13-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;13-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;/example/13-example/&#34;&gt;example from today‚Äôs session&lt;/a&gt; will be incredibly helpful for this exercise.&lt;/p&gt;
&lt;p&gt;This can be as simple or as complex as you want. You don‚Äôt need to make your plots super fancy, but if you‚Äôre feeling brave, experiment with changing colors or modifying themes and theme elements.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to insert your own code chunks where needed. Rather than typing them by hand (that‚Äôs tedious and you might miscount the number of backticks!), use the ‚ÄúInsert‚Äù button at the top of the editing window, or type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;‚å•&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-word-frequencies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Word frequencies&lt;/h2&gt;
&lt;p&gt;Download 4+ books by some author on &lt;a href=&#34;http://www.gutenberg.org/&#34;&gt;Project Gutenberg&lt;/a&gt;. Jane Austen, Victor Hugo, Emily Bront√´, Lucy Maud Montgomery, Arthur Conan Doyle, Mark Twain, Henry David Thoreau, Fyodor Dostoyevsky, Leo Tolstoy. Anyone. Just make sure it‚Äôs all from the same author.&lt;/p&gt;
&lt;p&gt;Make these two plots and describe what each tell about your author‚Äôs books:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Top 10 most frequent words &lt;em&gt;in each book&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Top 10 most unique words &lt;em&gt;in each book&lt;/em&gt; (i.e.¬†tf-idf)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;optional-bonus-fun-tasks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;100% optional bonus fun tasks&lt;/h2&gt;
&lt;p&gt;If you want, do some other things with the text you‚Äôve downloaded. Make a ‚Äúhe verbs vs.¬†she verbs‚Äù plot. Tag the parts of speech and find the most common verbs or nouns. Try some sentiment analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, click on the ‚ÄúKnit‚Äù button at the top of the editing window and create an HTML or Word version (or PDF if you‚Äôve &lt;a href=&#34;/resource/install/#install-tinytex&#34;&gt;installed &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt;) of your document. Upload that file to iCollege.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing graphics</title>
      <link>/example/14-example/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>/example/14-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-enhance-graphics&#34;&gt;Why enhance graphics?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#enhancing-graphics-in-2020&#34;&gt;Enhancing graphics in 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#abbreviated-example&#34;&gt;Abbreviated example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;why-enhance-graphics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why enhance graphics?&lt;/h2&gt;
&lt;p&gt;The content from today isn‚Äôt really code-based at all. Instead, you‚Äôre learning about how to take a plot from R and make it &lt;em&gt;fancy&lt;/em&gt; in a vector editing program like Illustrator, Gravit Designer, or Inkscape.&lt;/p&gt;
&lt;p&gt;This concept comes from a common workflow in the real world, where organizations like news outlets, think tanks, research centers, or nonprofits will publish highly polished plots in annual reports, magazines, and other types of publications. These graphics often have to follow specific in-house style guidelines and use specific colors and fonts and other design elements. Even if you don‚Äôt work for a place with in-house style guides, you‚Äôll often want to make some edits to your plots by hand after you create them.&lt;/p&gt;
&lt;p&gt;The general workflow goes like this:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a plot in R and ggplot&lt;/li&gt;
&lt;li&gt;Export that plot as a vector image (either a PDF or an SVG)&lt;/li&gt;
&lt;li&gt;Edit and enhance the vector image in a vector editor, like Adobe Illustrator&lt;/li&gt;
&lt;li&gt;Export the polished version from Illustrator as either a PDF or PNG (or both)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Big data-focused organizations have been using a process like this for years. Nathan Yau describes this whole process in his 2011 book &lt;a href=&#34;http://book.flowingdata.com/&#34;&gt;&lt;em&gt;Visualize This&lt;/em&gt;&lt;/a&gt; and the book contains a bunch of tutorials to help you learn how create something in R, export it, and edit it in Illustrator.&lt;/p&gt;
&lt;p&gt;For instance, in his first chapter, he guides you through the process of creating the skeleton of this chart in R, exporting it as a PDF, and adding all the titles and annotations and arrows and extra lines in Illustrator (&lt;a href=&#34;https://flowingdata.com/2008/07/03/nathans-annual-hot-dog-eating-contest-kobayashi-vs-chestnut/&#34;&gt;original post from 2008&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/hot-dogs.gif&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;enhancing-graphics-in-2020&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Enhancing graphics in 2020&lt;/h2&gt;
&lt;p&gt;In 2011, that was the best possible workflow because ggplot couldn‚Äôt deal with subtitles, captions, repelled labels, embedded fonts, and differently-styled text (like &lt;strong&gt;bold&lt;/strong&gt; in the middle of a title). Illustrator was the only way to do this stuff.&lt;/p&gt;
&lt;p&gt;Nowadays in 2020, though, you can do nearly all of this annotating and enhancing with packages like &lt;strong&gt;ggtext&lt;/strong&gt; and &lt;strong&gt;patchwork&lt;/strong&gt; and &lt;strong&gt;ggrepel&lt;/strong&gt;. You can almost perfectly replicate in-house style guides with the &lt;code&gt;theme()&lt;/code&gt; function and put text and arrows and labels and text boxes wherever you want with &lt;code&gt;annotate()&lt;/code&gt;. It‚Äôs a brave exciting new world.&lt;/p&gt;
&lt;p&gt;You still can‚Äôt do everything with R. ggplot can‚Äôt create fancy font ligatures like ‚ÄúÔ¨Å‚Äù in words that have an ‚Äúf‚Äù followed by an ‚Äúi‚Äù, and it can‚Äôt handle automatic hyphenation and full text justification, among other limitations. But these are the minorest of graphic design issues (and &lt;a href=&#34;https://www.tidyverse.org/blog/2020/05/updates-to-ragg-and-systemfonts/&#34;&gt;the ggplot team is working on them&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;That all said&lt;/em&gt;, it‚Äôs still often faster and easier to make edits to your graphs in Illustrator rather than fight with a reluctant &lt;code&gt;annotate()&lt;/code&gt; layer that just won‚Äôt put an arrow exactly where you want. And &lt;strong&gt;ggtext&lt;/strong&gt; is so new (it‚Äôs not on CRAN yet) that lots of people haven‚Äôt heard of it yet. This is all cutting edge stuff.&lt;/p&gt;
&lt;p&gt;So it‚Äôs still a good idea to understand how to follow the standard workflow of exporting from R and enhancing in Illustrator.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;abbreviated-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Abbreviated example&lt;/h2&gt;
&lt;p&gt;In this video I use the code for the hot dog plot that I provide in today‚Äôs assignment to create a plot, export it, and make edits to it both in Illustrator and &lt;a href=&#34;https://www.designer.io/en/&#34;&gt;Gravit Designer&lt;/a&gt;. It‚Äôs not a complete example at all, but I show you the general process for adding text and lines and editing plot elements.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/L-tUSEMWrgE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing graphics</title>
      <link>/lab/14-exercise/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>/lab/14-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-reflection&#34;&gt;Task 1: Reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-hot-dog-eating-contest-winners&#34;&gt;Task 2: Hot dog eating contest winners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;For this exercise, you‚Äôll export a PDF and/or an SVG from R, open it in Adobe Illustrator (&lt;a href=&#34;https://technology.gsu.edu/technology-services/it-services/software-computer-purchase/software-download-and-purchase/adobe-creative-cloud/&#34;&gt;free for GSU students&lt;/a&gt;) or &lt;a href=&#34;https://www.designer.io/en/&#34;&gt;Gravit Designer&lt;/a&gt; (free for the basic version), add annotations and make minor edits, and then export a final polished version.&lt;/p&gt;
&lt;p&gt;I have given you 100% of the R code you need to use. All you have to do is run it. You need to download one CSV file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/data/hot-dog-contest-winners.csv&#34;&gt;&lt;i class=&#34;fas fa-table&#34;&gt;&lt;/i&gt; &lt;code&gt;hot-dog-contest-winners.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To help you&lt;/strong&gt;, I‚Äôve created a skeleton R Markdown file with a template for this exercise, along with all the code you‚Äôll need. Download that here and include it in your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/14-exercise/14-exercise.Rmd&#34;&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;code&gt;14-exercise.Rmd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the structure of your project directory should look something like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name\
  14-exercise.Rmd
  your-project-name.Rproj
  data\
    hot-dog-contest-winners.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/projects/14-exercise.zip&#34;&gt;&lt;i class=&#34;fas fa-file-archive&#34;&gt;&lt;/i&gt; &lt;code&gt;14-exercise.zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;task-1-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Reflection&lt;/h2&gt;
&lt;p&gt;Write your reflection for the day‚Äôs readings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-hot-dog-eating-contest-winners&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Hot dog eating contest winners&lt;/h2&gt;
&lt;p&gt;Recreate this plot (or something like it):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/assignments/hot-dogs.gif&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Create and save a basic bar chart of hot dog eating contest winners using the code provided. Open the resulting file in Illustrator or Gravit Designer. Open the PDF in Illustrator; open the SVG in Gravit Designer.&lt;/p&gt;
&lt;p&gt;Be sure that you save your file in Illustrator or Gravit Designer &lt;strong&gt;with a different name&lt;/strong&gt;. You don‚Äôt want to accidentally overwrite all your enhancements and updates when you knit this document. That would be so sad.&lt;/p&gt;
&lt;p&gt;You don‚Äôt have data prior to 1980, so &lt;strong&gt;don‚Äôt worry about recreating that half of the graph&lt;/strong&gt;. You don‚Äôt have to put all the text boxes in exactly the same locations‚Äîyou can even do a completely different design and add different annotations if you want.&lt;/p&gt;
&lt;p&gt;The point of this assignment is to help you get familiar with vector editing software, so don‚Äôt stress out about R issues or graphic design issues (though try to follow CRAP where possible).&lt;/p&gt;
&lt;p&gt;To save you some typing, here‚Äôs all the text from the original plot. Copy and paste it into your enhanced version (or change the text if you want‚Äîagain, do whatever you want):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Winners from Nathan‚Äôs Hot Dog Eating Contest&lt;/li&gt;
&lt;li&gt;It‚Äôs that time of year again. Since 1916, the annual eating competition has grown substantially attracting competitors from around the world&lt;/li&gt;
&lt;li&gt;Frank Dellarosa eats 21 and a half HDBs over 12 minutes, breaking the previous record of 19 and a half&lt;/li&gt;
&lt;li&gt;Through 2001-2005, Takeru Kobayashi wins by no less than 12 HDBs. In 2006 he only wins by 1.75. After winning 6 years in a row and setting the world record 4 times, Kobayashi places second in 2007.&lt;/li&gt;
&lt;li&gt;For the first time since 1999, an American reclaims the title when Joey Chestnut consumes 66 HDBs, a new world record. Chestnut repeats in 2008.&lt;/li&gt;
&lt;li&gt;Source: Wikipedia and Nathan‚Äôs Famous&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, knit your R Markdown file and use Illustrator or Gravit Designer to export a PDF or PNG version (or both) of your enhanced plot. Upload these files to iCollege.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sharing R output online</title>
      <link>/example/15-example/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/example/15-example/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#publishing-your-stuff-online&#34;&gt;Publishing your stuff online&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#quickest-and-easiest-way-rpubs&#34;&gt;Quickest and easiest way: RPubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#great-for-standalone-projects-r-markdown-websites&#34;&gt;Great for standalone projects: R Markdown websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-complex-blogs-and-websites-blogdown&#34;&gt;More complex blogs and websites: blogdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#books-dissertations-and-theses-bookdown&#34;&gt;Books, dissertations, and theses: bookdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides-xaringan&#34;&gt;Slides: xaringan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-github-and-github-gists&#34;&gt;Code: GitHub and GitHub gists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#telling-stories-with-data&#34;&gt;Telling stories with data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;publishing-your-stuff-online&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Publishing your stuff online&lt;/h2&gt;
&lt;div id=&#34;quickest-and-easiest-way-rpubs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quickest and easiest way: RPubs&lt;/h3&gt;
&lt;p&gt;The easiest way to get a knitted R Markdown onto the internet is to use &lt;a href=&#34;https://rpubs.com/&#34;&gt;RPubs&lt;/a&gt;. We talked about this in &lt;a href=&#34;/slides/10-slides.html#sharing-content&#34;&gt;session 10&lt;/a&gt;, and you used it to turn in &lt;a href=&#34;/assignment/10-exercise/&#34;&gt;exercise 10&lt;/a&gt;. After knitting an HTML document in RStudio, click on the ‚ÄúPublish‚Äù button in the top right corner to upload the document to the RPubs server and get a URL that you can share with others:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/slides/img/10/publish-document.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You don‚Äôt have to set up a web server or anything‚Äîit‚Äôs all pretty automatic and seamless.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;great-for-standalone-projects-r-markdown-websites&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Great for standalone projects: R Markdown websites&lt;/h3&gt;
&lt;p&gt;If you have something slightly more complex, like a collection of R Markdown files that do related things, it‚Äôs easy to stitch them all together in an &lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-13.html&#34;&gt;R Markdown website&lt;/a&gt;. RStudio supports these automatically‚Äîafter telling RStudio to consider an RStudio project to be a website, it will knit all the &lt;code&gt;.Rmd&lt;/code&gt; files in the root of your project directory every time you click on the ‚ÄúBuild Website‚Äù button.&lt;/p&gt;
&lt;p&gt;RStudio generates a standalone folder named &lt;code&gt;public&lt;/code&gt; with static HTML pages of all your knitted documents. You then have to put that folder on the internet somewhere, either on a web server you have access to, or a free service like &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html&#34;&gt;this page for complete documentation&lt;/a&gt;, or follow these tutorials by &lt;a href=&#34;https://livefreeordichotomize.com/2017/08/08/how-to-make-an-rmarkdown-website/&#34;&gt;Lucy D‚ÄôAgostino McGowan&lt;/a&gt; and &lt;a href=&#34;https://www.emilyzabor.com/tutorials/rmarkdown_websites_tutorial.html&#34;&gt;Emily Zabor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These websites are especially helpful for standalone projects like research papers and reports. I‚Äôve had students do their master‚Äôs capstone projects with these, with specific pages for their introduction, literature review, data cleaning, exploratory data analysis, modeling, and results.&lt;/p&gt;
&lt;p&gt;I typically make a website for each of my research projects and will include pages with IRB details, copies of survey experiments, data cleaning, results, and so on. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stats.andrewheiss.com/ngo-crackdowns-philanthropy/&#34;&gt;NGO Crackdowns and Philanthropy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stats.andrewheiss.com/donors-ngo-restrictions/&#34;&gt;Are Donors Really Responding?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stats.andrewheiss.com/edb-social-pressure/&#34;&gt;The Power of Ranking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stats.andrewheiss.com/constraint-closure/&#34;&gt;Constraint Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also make really neat small websites like &lt;a href=&#34;https://tinystats.github.io/teacups-giraffes-and-statistics/index.html&#34;&gt;Desir√©e De Leon‚Äôs Teacup Giraffes&lt;/a&gt; for teaching basic statistics.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-complex-blogs-and-websites-blogdown&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;More complex blogs and websites: blogdown&lt;/h3&gt;
&lt;p&gt;If you want more control (i.e.¬†total control) over the HTML output and the structure of a website, you can use a package named &lt;a href=&#34;https://bookdown.org/yihui/blogdown/structure-of-the-book.html&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; to convert R Markdown files into an entire website. This course website is built with &lt;strong&gt;blogdown&lt;/strong&gt;: you can see &lt;a href=&#34;https://github.com/andrewheiss/datavizm20.classes.andrewheiss.com&#34;&gt;all the underlying R Markdown files at GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like R Markdown websites, blogdown generates a complete static version of the knitted website and puts it in a folder named &lt;code&gt;public&lt;/code&gt;. You‚Äôre then responsible for putting that somewhere on the internet, either on your own server or by using a free hosting service like &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Blogdown is &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;incredibly well documented&lt;/a&gt;, and there are lots of tutorials for how to get started. &lt;a href=&#34;https://alison.rbind.io/post/2017-06-12-up-and-running-with-blogdown/&#34;&gt;Alison Hill‚Äôs tutorial here is the best place to get started&lt;/a&gt;‚Äîfollow it and you‚Äôll have a basic blog completely free.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;books-dissertations-and-theses-bookdown&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Books, dissertations, and theses: bookdown&lt;/h3&gt;
&lt;p&gt;If you don‚Äôt want to create a website, you can use a package named &lt;a href=&#34;https://bookdown.org/&#34;&gt;&lt;strong&gt;bookdown&lt;/strong&gt;&lt;/a&gt; to stitch a collection of R Markdown files into a PDF, Word, or HTML book. (You could even put all your exercises from this class into a single book!). &lt;strong&gt;bookdown&lt;/strong&gt; is &lt;a href=&#34;https://bookdown.org/yihui/bookdown/&#34;&gt;incredibly well documented&lt;/a&gt; too (as a &lt;strong&gt;bookdown&lt;/strong&gt; book), and you can get familiar with it fairly quickly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bookdown.org/home/archive/&#34;&gt;Dozens of real-world books&lt;/a&gt;, dissertations, and theses have been written with &lt;strong&gt;bookdown&lt;/strong&gt;, including both &lt;a href=&#34;https://serialmentor.com/dataviz/&#34;&gt;Claus Wilke‚Äôs&lt;/a&gt; and &lt;a href=&#34;https://socviz.co/&#34;&gt;Kieran Healy‚Äôs&lt;/a&gt; books from this course. Because of the magic of Markdown, you can create parallel HTML and PDF versions of your book and post one type of output on the internet and print and bind the other one.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;slides-xaringan&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Slides: xaringan&lt;/h3&gt;
&lt;p&gt;R Markdown isn‚Äôt just for PDF, Word, and HTML documents. You can also make slides! All the slides for this course were made in R Markdown with a package named &lt;strong&gt;xaringan&lt;/strong&gt;. You can see &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/xaringan.html&#34;&gt;the documentation here&lt;/a&gt;, and see &lt;a href=&#34;https://slides.yihui.org/xaringan/&#34;&gt;the main example presentation here&lt;/a&gt;. You can also &lt;a href=&#34;https://github.com/andrewheiss/datavizm20.classes.andrewheiss.com/tree/master/static/slides&#34;&gt;see all the R Markdown files I wrote to create the slides for this class here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;code-github-and-github-gists&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Code: GitHub and GitHub gists&lt;/h3&gt;
&lt;p&gt;And finally, if you want to share code (and keep track of versions of your code), &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; is one of the best places for that. Posting your code at places like GitHub lets other people see and borrow and adapt and make suggestions to your code. You can see &lt;a href=&#34;https://github.com/andrewheiss/&#34;&gt;all my different repositories and projects here&lt;/a&gt;, for example.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://happygitwithr.com/&#34;&gt;Jenny Bryan has a useful &lt;strong&gt;bookdown&lt;/strong&gt; website&lt;/a&gt; explaining how to get started, and GitHub itself &lt;a href=&#34;https://guides.github.com/activities/hello-world/&#34;&gt;has excellent materials for learning how to use git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you don‚Äôt want to go through the process of creating a full-blown git repository, GitHub also lets you make ‚Äúgists‚Äù, which are single shareable files of code. (&lt;a href=&#34;https://gist.github.com/andrewheiss&#34;&gt;See all mine here for examples&lt;/a&gt;). Gists are excellent ways to share reproducible examples (or &lt;a href=&#34;https://www.jessemaegan.com/post/so-you-ve-been-asked-to-make-a-reprex/&#34;&gt;reprexes&lt;/a&gt;), and the &lt;a href=&#34;https://reprex.tidyverse.org/&#34;&gt;&lt;strong&gt;reprex&lt;/strong&gt; package&lt;/a&gt; in R generates output that you can paste directly into a new gist for sharing (see &lt;a href=&#34;https://gist.github.com/andrewheiss/5ea439fae38e61419858ce9b5c2027cd&#34;&gt;this one, for instance, which I used to show someone how to run and plot logistic regression with R&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;telling-stories-with-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Telling stories with data&lt;/h2&gt;
&lt;p&gt;If you‚Äôre interested in learning more about data storytelling and science communication, check out these resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-university&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.jessemaegan.com/post/so-you-ve-been-asked-to-make-a-reprex/&#34;&gt;BUSM 491R: Telling Stories with Data&lt;/a&gt; (BYU, Fall 2017)&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Cole Nussbaumer Knaflic, &lt;a href=&#34;https://www.amazon.com/Storytelling-Data-Visualization-Business-Professionals/dp/1119002257&#34;&gt;&lt;em&gt;Storytelling with Data: A Data Visualization Guide for Business Professionals&lt;/em&gt;&lt;/a&gt; (Hoboken, New Jersey: John Wiley &amp;amp; Sons, Inc., 2015).&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Alan Alda, &lt;a href=&#34;https://www.amazon.com/Understood-Would-Have-This-Look/dp/0812989147&#34;&gt;&lt;em&gt;If I Understood You, Would I Have This Look on My Face? My Adventures in the Art and Science of Relating and Communicating&lt;/em&gt;&lt;/a&gt; (New York: Random House, 2017).&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Nancy Duarte, &lt;a href=&#34;https://www.amazon.com/Resonate-Present-Stories-Transform-Audiences/dp/0470632011&#34;&gt;&lt;em&gt;Resonate: Present Visual Stories That Transform Audiences&lt;/em&gt;&lt;/a&gt; (Hoboken, New Jersey: John Wiley &amp;amp; Sons, Inc., 2010).&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.msnbc.com/morning-joe/watch/understanding-the-way-scientists-speak-27745859874&#34;&gt;‚ÄúUnderstanding the way scientists speak,‚Äù&lt;/a&gt; MSNBC Morning Joe, 2013-04-24&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=JtdyA7SibG8&#34;&gt;‚ÄúImprovisation for Scientists: Workshops by Alan Alda and the Center for Communicating Science,‚Äù&lt;/a&gt; Stony Brook Journalism, 2010-03-23&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Truth, beauty, and data revisited</title>
      <link>/lab/15-exercise/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/lab/15-exercise/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-storytelling-reflection&#34;&gt;Task 1: Storytelling reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-summary-reflection&#34;&gt;Task 2: Summary reflection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#turning-everything-in&#34;&gt;Turning everything in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;For your final exercise, you won‚Äôt do anything with R. You‚Äôll instead have two writing tasks. You can write these in R Markdown if you want, or you can do it in Word or Google Docs or wherever else.&lt;/p&gt;
&lt;div id=&#34;task-1-storytelling-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Storytelling reflection&lt;/h2&gt;
&lt;p&gt;Write your standard reflection about the storytelling readings and videos.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-summary-reflection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Summary reflection&lt;/h2&gt;
&lt;p&gt;Write a longer (400ish words) reflection on what you learned in the course in general. What was new? What was exciting? What will you remember? How has this class changed the way you look at data and graphics?&lt;/p&gt;
&lt;p&gt;You might explore a few of these summative questions (but definitely don‚Äôt just go through and answer each of these!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is truth?&lt;/li&gt;
&lt;li&gt;How do we find truth?&lt;/li&gt;
&lt;li&gt;Are facts truth?&lt;/li&gt;
&lt;li&gt;What‚Äôs the difference between content and form?&lt;/li&gt;
&lt;li&gt;Does beauty matter when describing truth?&lt;/li&gt;
&lt;li&gt;How does any of this philosophical humanities stuff relate to data visualization?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;turning-everything-in&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Turning everything in&lt;/h2&gt;
&lt;p&gt;When you‚Äôre all done, upload the document with both reflection to iCollege.&lt;/p&gt;
&lt;p&gt;Congratulations! You did it!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to R</title>
      <link>/content/00-content/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/content/00-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#guiding-question&#34;&gt;Guiding Question&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-basics&#34;&gt;&lt;code&gt;R&lt;/code&gt; basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#case-study-us-homicides-by-firearm&#34;&gt;Case study: US homicides by firearm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-very-basics&#34;&gt;The (very) basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#objects&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-workspace&#34;&gt;The workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-prebuilt-objects&#34;&gt;Other prebuilt objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variable-names&#34;&gt;Variable names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-your-workspace&#34;&gt;Saving your workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#motivating-scripts&#34;&gt;Motivating scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commenting-your-code&#34;&gt;Commenting your code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-types&#34;&gt;Data types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-frames&#34;&gt;Data frames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#examining-an-object&#34;&gt;Examining an object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-accessor&#34;&gt;The accessor: &lt;code&gt;$&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors-numerics-characters-and-logical&#34;&gt;Vectors: numerics, characters, and logical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#factors&#34;&gt;Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lists&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrices&#34;&gt;Matrices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors&#34;&gt;Vectors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating-vectors&#34;&gt;Creating vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#names&#34;&gt;Names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sequences&#34;&gt;Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting&#34;&gt;Subsetting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#coercion&#34;&gt;Coercion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#not-availables-na&#34;&gt;Not availables (NA)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sorting&#34;&gt;Sorting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sort&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#order&#34;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#max-and-which.max&#34;&gt;&lt;code&gt;max&lt;/code&gt; and &lt;code&gt;which.max&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rank&#34;&gt;&lt;code&gt;rank&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beware-of-recycling&#34;&gt;Beware of recycling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vector-arithmetics&#34;&gt;Vector arithmetics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rescaling-a-vector&#34;&gt;Rescaling a vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#two-vectors&#34;&gt;Two vectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indexing&#34;&gt;Indexing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-with-logicals&#34;&gt;Subsetting with logicals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logical-operators&#34;&gt;Logical operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#which&#34;&gt;&lt;code&gt;which&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#in&#34;&gt;&lt;code&gt;%in%&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;p&gt;As noted in the syllabus, your readings will be assigned each week in this area. For this initial week, please read the course content. &lt;strong&gt;Read closely&lt;/strong&gt; the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;/syllabus/&#34;&gt;syllabus&lt;/a&gt;, &lt;a href=&#34;/content/&#34;&gt;content&lt;/a&gt;, &lt;a href=&#34;/example/&#34;&gt;examples&lt;/a&gt;, and &lt;a href=&#34;/lab/&#34;&gt;labs&lt;/a&gt; pages for this class.&lt;/li&gt;
&lt;li&gt;This page. Yes, the whole thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;guiding-question&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Guiding Question&lt;/h3&gt;
&lt;p&gt;For future lectures, the guiding questions will be more pointed and at a higher level to help steer your thinking. Here, we want to ensure you remember some basics and accordingly the questions are straightforward.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you remember anything about &lt;code&gt;R&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What are the different data types in &lt;code&gt;R&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;How do you index specific elements of a vector? Why might you want to do that?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;There are no slides for this lesson; the content below is intended to serve as a refresher for those who may have forgotten some of the basics of &lt;code&gt;R&lt;/code&gt;. This content will form the first week of the course and will include the Example 0.&lt;/p&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;ALERT&lt;/strong&gt;: The course content below should be considered a prerequisite for success. You absolutely must read this content and attempt the coding exercises. If you struggle to follow the content, please contact the professor or TA.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-basics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;R&lt;/code&gt; basics&lt;/h1&gt;
&lt;p&gt;In this class, we will be using &lt;code&gt;R&lt;/code&gt; software environment for all our analyses. You will learn &lt;code&gt;R&lt;/code&gt; and data analysis techniques simultaneously. To follow along you will therefore need access to &lt;code&gt;R&lt;/code&gt;. We also recommend the use of an &lt;em&gt;integrated development environment&lt;/em&gt; (IDE), such as RStudio, to save your work.
Note that it is common for a course or workshop to offer access to an &lt;code&gt;R&lt;/code&gt; environment and an IDE through your web browser, as done by RStudio cloud&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. If you have access to such a resource, you don‚Äôt need to install &lt;code&gt;R&lt;/code&gt; and RStudio. However, if you intend on becoming a practicing data analyst, we highly recommend installing these tools on your computer&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. This is not hard.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;R&lt;/code&gt; and RStudio are free and available online.&lt;/p&gt;
&lt;div id=&#34;case-study-us-homicides-by-firearm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Case study: US homicides by firearm&lt;/h2&gt;
&lt;p&gt;Imagine you live in Europe (if only!) and are offered a job in a US company with many locations in every state. It is a great job, but headlines such as &lt;strong&gt;US Gun Homicide Rate Higher Than Other Developed Countries&lt;/strong&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; have you worried. Fox News runs a scary looking graphic, and charts like the one below only add to that concern:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/content/00-content_files/figure-html/murder-rate-example-1-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;!--(Source:
[Ma‚Äôayan Rosenzweigh/ABC News](https://abcnews.go.com/blogs/headlines/2012/12/us-gun-ownership-homicide-rate-higher-than-other-developed-countries/), Data from UNODC Homicide Statistics) --&gt;
&lt;p&gt;Or even worse, this version from &lt;a href=&#34;https://everytownresearch.org&#34;&gt;everytown.org&lt;/a&gt;:
&lt;img src=&#34;/content/00-content_files/figure-html/murder-rate-example-2-1.png&#34; width=&#34;70%&#34; /&gt;
&lt;!--(Source  [everytown.org](https://everytownresearch.org))--&gt;&lt;/p&gt;
&lt;p&gt;But then you remember that (1) this is a hypothetical exercise; (2) you‚Äôll take literally any job at this point; and (3) Geographic diversity matters ‚Äì the United States is a large and diverse country with 50 very different states (plus the District of Columbia and some lovely territories).&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/content/00-content_files/figure-html/us-murders-by-state-map-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;California, for example, has a larger population than Canada, and 20 US states have populations larger than that of Norway. In some respects, the variability across states in the US is akin to the variability across countries in Europe. Furthermore, although not included in the charts above, the murder rates in Lithuania, Ukraine, and Russia are higher than 4 per 100,000. So perhaps the news reports that worried you are too superficial.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/content/00-content_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a relatively simple and straightforward problem in social science: you have options of where to live, and want to determine the safety of the various states. Your ‚Äúresearch‚Äù is clearly policy-relevant: you will eventually have to live somewhere. We will begin to tackle the problem by examining data related to gun homicides in the US during 2010 using &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before we get started with our example, we need to cover logistics as well as some of the very basic building blocks that are required to gain more advanced &lt;code&gt;R&lt;/code&gt; skills. Ideally, this is a refresher. However, we are aware that your preparation in previously courses varies greatly from student to student. Moreover, we want you to be aware that the usefulness of some of these early building blocks may not be immediately obvious. Later in the class you will appreciate having these skills. Mastery will be rewarded both in this class and (of course) in life.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-very-basics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The (very) basics&lt;/h2&gt;
&lt;p&gt;Before we get started with the motivating dataset, we need to cover the very basics of &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;objects&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Objects&lt;/h3&gt;
&lt;p&gt;Suppose a relatively math unsavvy student asks us for help solving several quadratic equations of the form &lt;span class=&#34;math inline&#34;&gt;\(ax^2+bx+c = 0\)&lt;/span&gt;. You‚Äîa savvy student‚Äîrecall that the quadratic formula gives us the solutions:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{-b - \sqrt{b^2 - 4ac}}{2a}\,\, \mbox{ and } \frac{-b + \sqrt{b^2 - 4ac}}{2a}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;which of course depend on the values of &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;. That is, the quadratic equation represents a &lt;em&gt;function&lt;/em&gt; with three &lt;em&gt;arguments&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One advantage of programming languages is that we can define variables and write expressions with these variables, similar to how we do so in math, but obtain a numeric solution. We will write out general code for the quadratic equation below, but if we are asked to solve &lt;span class=&#34;math inline&#34;&gt;\(x^2 + x -1 = 0\)&lt;/span&gt;, then we define:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- 1
b &amp;lt;- 1
c &amp;lt;- -1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which stores the values for later use. We use &lt;code&gt;&amp;lt;-&lt;/code&gt; to assign values to the variables.&lt;/p&gt;
&lt;p&gt;We can also assign values using &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;&amp;lt;-&lt;/code&gt;, but we recommend against using &lt;code&gt;=&lt;/code&gt; to avoid confusion.&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;TRY IT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Copy and paste the code above into your console to define the three variables. Note that &lt;code&gt;R&lt;/code&gt; does not print anything when we make this assignment. This means the objects were defined successfully. Had you made a mistake, you would have received an error message. Throughout these written notes, you‚Äôll have the most success if you continue to copy code into your own console.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To see the value stored in a variable, we simply ask &lt;code&gt;R&lt;/code&gt; to evaluate &lt;code&gt;a&lt;/code&gt; and it shows the stored value:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A more explicit way to ask &lt;code&gt;R&lt;/code&gt; to show us the value stored in &lt;code&gt;a&lt;/code&gt; is using &lt;code&gt;print&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the term &lt;em&gt;object&lt;/em&gt; to describe stuff that is stored in &lt;code&gt;R&lt;/code&gt;. Variables are examples, but objects can also be more complicated entities such as functions, which are described later.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-workspace&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The workspace&lt;/h3&gt;
&lt;p&gt;As we define objects in the console, we are actually changing the &lt;em&gt;workspace&lt;/em&gt;. You can see all the variables saved in your workspace by typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ls()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot;       &amp;quot;b&amp;quot;       &amp;quot;c&amp;quot;       &amp;quot;dat&amp;quot;     &amp;quot;murders&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that one of &lt;em&gt;my&lt;/em&gt; variables listed above comes from generating the graphs above). In RStudio, the &lt;em&gt;Environment&lt;/em&gt; tab shows the values:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/rstudio-environment.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We should see &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type &lt;code&gt;x&lt;/code&gt; you will receive the following message: &lt;code&gt;Error: object &#39;x&#39; not found&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.618034&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(-b - sqrt(b^2 - 4*a*c) ) / ( 2*a )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -1.618034&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Functions&lt;/h3&gt;
&lt;p&gt;Once you define variables, the data analysis process can usually be described as a series of &lt;em&gt;functions&lt;/em&gt; applied to the data. &lt;code&gt;R&lt;/code&gt; includes several zillion predefined functions and most of the analysis pipelines we construct make extensive use of the built-in functions. But &lt;code&gt;R&lt;/code&gt;‚Äôs power comes from its scalability. We have access to (nearly) infinite functions via &lt;code&gt;install.packages&lt;/code&gt; and &lt;code&gt;library&lt;/code&gt;. As we go through the course, we will carefully note new functions we bring to each problem. For now, though, we will stick to the basics.&lt;/p&gt;
&lt;p&gt;Note that you‚Äôve used a function already: you used the function &lt;code&gt;sqrt&lt;/code&gt; to solve the quadratic equation above. These functions do not appear in the workspace because you did not define them, but they are available for immediate use.&lt;/p&gt;
&lt;p&gt;In general, we need to use parentheses to evaluate a function. If you type &lt;code&gt;ls&lt;/code&gt;, the function is not evaluated and instead &lt;code&gt;R&lt;/code&gt; shows you the code that defines the function. If you type &lt;code&gt;ls()&lt;/code&gt; the function is evaluated and, as seen above, we see objects in the workspace.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;ls&lt;/code&gt;, most functions require one or more &lt;em&gt;arguments&lt;/em&gt;. Below is an example of how we assign an object to the argument of the function &lt;code&gt;log&lt;/code&gt;. Remember that we earlier defined &lt;code&gt;a&lt;/code&gt; to be 1:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.079442&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find out what the function expects and what it does by reviewing the very useful manuals included in &lt;code&gt;R&lt;/code&gt;. You can get help by using the &lt;code&gt;help&lt;/code&gt; function like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(&amp;quot;log&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For most functions, we can also use this shorthand:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The help page will show you what arguments the function is expecting. For example, &lt;code&gt;log&lt;/code&gt; needs &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; to run. However, some arguments are required and others are optional. You can determine which arguments are optional by noting in the help document that a default value is assigned with &lt;code&gt;=&lt;/code&gt;. Defining these is optional.&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; For example, the base of the function &lt;code&gt;log&lt;/code&gt; defaults to &lt;code&gt;base = exp(1)&lt;/code&gt;‚Äîthat is, &lt;code&gt;log&lt;/code&gt; evaluates the natural log by default.&lt;/p&gt;
&lt;p&gt;If you want a quick look at the arguments without opening the help system, you can type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;args(log)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x, base = exp(1)) 
## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the default values by simply assigning another object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(8, base = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we have not been specifying the argument &lt;code&gt;x&lt;/code&gt; as such:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(x = 8, base = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code works, but we can save ourselves some typing: if no argument name is used, &lt;code&gt;R&lt;/code&gt; assumes you are entering arguments in the order shown in the help file or by &lt;code&gt;args&lt;/code&gt;. So by not using the names, it assumes the arguments are &lt;code&gt;x&lt;/code&gt; followed by &lt;code&gt;base&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(8,2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If using the arguments‚Äô names, then we can include them in whatever order we want:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(base = 2, x = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To specify arguments, we must use &lt;code&gt;=&lt;/code&gt;, and cannot use &lt;code&gt;&amp;lt;-&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are some exceptions to the rule that functions need the parentheses to be evaluated. Among these, the most commonly used are the arithmetic and relational operators. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 ^ 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the arithmetic operators by typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(&amp;quot;+&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?&amp;quot;+&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the relational operators by typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;help(&amp;quot;&amp;gt;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?&amp;quot;&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-prebuilt-objects&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Other prebuilt objects&lt;/h3&gt;
&lt;p&gt;There are several datasets that are included for users to practice and test out functions. You can see all the available datasets by typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shows you the object name for these datasets. These datasets are objects that can be used by simply typing the name. For example, if you type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;co2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; will show you Mauna Loa atmospheric &lt;span class=&#34;math inline&#34;&gt;\(CO^2\)&lt;/span&gt; concentration data.&lt;/p&gt;
&lt;p&gt;Other prebuilt objects are mathematical quantities, such as the constant &lt;span class=&#34;math inline&#34;&gt;\(\pi\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\infty\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pi&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.141593&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Inf+1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] Inf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;variable-names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Variable names&lt;/h3&gt;
&lt;p&gt;We have used the letters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; as variable names, but variable names can be almost anything. Some basic rules in &lt;code&gt;R&lt;/code&gt; are that variable names have to start with a letter, can‚Äôt contain spaces, and should not be variables that are predefined in &lt;code&gt;R&lt;/code&gt;. For example, don‚Äôt name one of your variables &lt;code&gt;install.packages&lt;/code&gt; by typing something like &lt;code&gt;install.packages &amp;lt;- 2&lt;/code&gt;. Usually, &lt;code&gt;R&lt;/code&gt; is smart enough to prevent you from doing such nonsense, but it‚Äôs important to develop good habits.&lt;/p&gt;
&lt;p&gt;A nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces. For the quadratic equations, we could use something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;solution_1 &amp;lt;- (-b + sqrt(b^2 - 4*a*c)) / (2*a)
solution_2 &amp;lt;- (-b - sqrt(b^2 - 4*a*c)) / (2*a)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more advice, we highly recommend studying (Hadley Wickham‚Äôs style guide)[&lt;a href=&#34;http://adv-r.had.co.nz/Style.html&#34; class=&#34;uri&#34;&gt;http://adv-r.had.co.nz/Style.html&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-your-workspace&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Saving your workspace&lt;/h3&gt;
&lt;p&gt;Values remain in the workspace until you end your session or erase them with the function &lt;code&gt;rm&lt;/code&gt;. But workspaces also can be saved for later use. In fact, when you quit R, the program asks you if you want to save your workspace. If you do save it, the next time you start R, the program will restore the workspace.&lt;/p&gt;
&lt;p&gt;We actually recommend against saving the workspace this way because, as you start working on different projects, it will become harder to keep track of what is saved. Instead, we recommend you assign the workspace a specific name. You can do this by using the function &lt;code&gt;save&lt;/code&gt; or &lt;code&gt;save.image&lt;/code&gt;. To load, use the function &lt;code&gt;load&lt;/code&gt;. When saving a workspace, we recommend the suffix &lt;code&gt;rda&lt;/code&gt; or &lt;code&gt;RData&lt;/code&gt;. In RStudio, you can also do this by navigating to the &lt;em&gt;Session&lt;/em&gt; tab and choosing &lt;em&gt;Save Workspace as&lt;/em&gt;. You can later load it using the &lt;em&gt;Load Workspace&lt;/em&gt; options in the same tab.
You can read the help pages on &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;save.image&lt;/code&gt;, and &lt;code&gt;load&lt;/code&gt; to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;motivating-scripts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Motivating scripts&lt;/h3&gt;
&lt;p&gt;To solve another equation such as &lt;span class=&#34;math inline&#34;&gt;\(3x^2 + 2x -1\)&lt;/span&gt;, we can copy and paste the code above and then redefine the variables and recompute the solution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- 3
b &amp;lt;- 2
c &amp;lt;- -1
(-b + sqrt(b^2 - 4*a*c)) / (2*a)
(-b - sqrt(b^2 - 4*a*c)) / (2*a)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By creating and saving a script with the code above, we would not need to retype everything each time and, instead, simply change the variable names. Try writing the script above into an editor and notice how easy it is to change the variables and receive an answer.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;commenting-your-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Commenting your code&lt;/h3&gt;
&lt;p&gt;If a line of &lt;code&gt;R&lt;/code&gt; code starts with the symbol &lt;code&gt;#&lt;/code&gt;, it is not evaluated. We can use this to write reminders of why we wrote particular code. For example, in the script above we could add:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Code to compute solution to quadratic equation of the form ax^2 + bx + c
## define the variables
a &amp;lt;- 3
b &amp;lt;- 2
c &amp;lt;- -1

## now compute the solution
(-b + sqrt(b^2 - 4*a*c)) / (2*a)
(-b - sqrt(b^2 - 4*a*c)) / (2*a)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;TRY IT&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;What is the sum of the first 100 positive integers? The formula for the sum of integers &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; through &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is &lt;span class=&#34;math inline&#34;&gt;\(n(n+1)/2\)&lt;/span&gt;. Define &lt;span class=&#34;math inline&#34;&gt;\(n=100\)&lt;/span&gt; and then use &lt;code&gt;R&lt;/code&gt; to compute the sum of &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; through &lt;span class=&#34;math inline&#34;&gt;\(100\)&lt;/span&gt; using the formula. What is the sum?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now use the same formula to compute the sum of the integers from 1 through 1,000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look at the result of typing the following code into R:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 1000
x &amp;lt;- seq(1, n)
sum(x)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on the result, what do you think the functions &lt;code&gt;seq&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; do? You can use &lt;code&gt;help&lt;/code&gt;.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt; creates a list of numbers and &lt;code&gt;seq&lt;/code&gt; adds them up.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt; creates a list of numbers and &lt;code&gt;sum&lt;/code&gt; adds them up.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt; creates a random list and &lt;code&gt;sum&lt;/code&gt; computes the sum of 1 through 1,000.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt; always returns the same number.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;In math and programming, we say that we evaluate a function when we replace the argument with a given number. So if we type &lt;code&gt;sqrt(4)&lt;/code&gt;, we evaluate the &lt;code&gt;sqrt&lt;/code&gt; function. In R, you can evaluate a function inside another function. The evaluations happen from the inside out. Use one line of code to compute the log, in base 10, of the square root of 100.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Which of the following will always return the numeric value stored in &lt;code&gt;x&lt;/code&gt;? You can try out examples and use the help system if you want.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;code&gt;log(10^x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;log10(x^10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;log(exp(x))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exp(log(x, base = 2))&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-types&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data types&lt;/h2&gt;
&lt;p&gt;Variables in &lt;code&gt;R&lt;/code&gt; can be of different types. For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function &lt;code&gt;class&lt;/code&gt; helps us determine what type of object we have:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- 2
class(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To work efficiently in R, it is important to learn the different types of variables and what we can do with these.&lt;/p&gt;
&lt;div id=&#34;data-frames&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data frames&lt;/h3&gt;
&lt;p&gt;Up to now, the variables we have defined are just one number. This is not very useful for storing data. The most common way of storing a dataset in &lt;code&gt;R&lt;/code&gt; is in a &lt;em&gt;data frame&lt;/em&gt;. Conceptually, we can think of a data frame as a table with rows representing observations and the different variables reported for each observation defining the columns. Data frames are particularly useful for datasets because we can combine different data types into one object.&lt;/p&gt;
&lt;p&gt;A large proportion of data analysis challenges start with data stored in a data frame. For example, we stored the data for our motivating example in a data frame. You can access this dataset by loading the &lt;strong&gt;dslabs&lt;/strong&gt; library and loading the &lt;code&gt;murders&lt;/code&gt; dataset using the &lt;code&gt;data&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see that this is in fact a data frame, we type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;examining-an-object&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examining an object&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;str&lt;/code&gt; is useful for finding out more about the structure of an object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    51 obs. of  5 variables:
## $ state : chr &amp;quot;Alabama&amp;quot; &amp;quot;Alaska&amp;quot; &amp;quot;Arizona&amp;quot; &amp;quot;Arkansas&amp;quot; ...
## $ abb : chr &amp;quot;AL&amp;quot; &amp;quot;AK&amp;quot; &amp;quot;AZ&amp;quot; &amp;quot;AR&amp;quot; ...
## $ region : Factor w/ 4 levels &amp;quot;Northeast&amp;quot;,&amp;quot;South&amp;quot;,..: 2 4 4 2 4 4 1 2 2 2 ...
## $ population: num 4779736 710231 6392017 2915918 37253956 ...
## $ total : num 135 19 232 93 1257 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells us much more about the object. We see that the table has 51 rows (50 states plus DC) and five variables. We can show the first six lines using the function &lt;code&gt;head&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        state abb region population total
## 1    Alabama  AL  South    4779736   135
## 2     Alaska  AK   West     710231    19
## 3    Arizona  AZ   West    6392017   232
## 4   Arkansas  AR  South    2915918    93
## 5 California  CA   West   37253956  1257
## 6   Colorado  CO   West    5029196    65&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this dataset, each state is considered an observation and five variables are reported for each state.&lt;/p&gt;
&lt;p&gt;Before we go any further in answering our original question about different states, let‚Äôs learn more about the components of this object.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-accessor&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The accessor: &lt;code&gt;$&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For our analysis, we will need to access the different variables represented by columns included in this data frame. To do this, we use the accessor operator &lt;code&gt;$&lt;/code&gt; in the following way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murders$population&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097   897934
##  [9]   601723 19687653  9920000  1360301  1567582 12830632  6483802  3046355
## [17]  2853118  4339367  4533372  1328361  5773552  6547629  9883640  5303925
## [25]  2967297  5988927   989415  1826341  2700551  1316470  8791894  2059179
## [33] 19378102  9535483   672591 11536504  3751351  3831074 12702379  1052567
## [41]  4625364   814180  6346105 25145561  2763885   625741  8001024  6724540
## [49]  1852994  5686986   563626&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But how did we know to use &lt;code&gt;population&lt;/code&gt;? Previously, by applying the function &lt;code&gt;str&lt;/code&gt; to the object &lt;code&gt;murders&lt;/code&gt;, we revealed the names for each of the five variables stored in this table. We can quickly access the variable names using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;state&amp;quot;      &amp;quot;abb&amp;quot;        &amp;quot;region&amp;quot;     &amp;quot;population&amp;quot; &amp;quot;total&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to know that the order of the entries in &lt;code&gt;murders$population&lt;/code&gt; preserves the order of the rows in our data table. This will later permit us to manipulate one variable based on the results of another. For example, we will be able to order the state names by the number of murders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;R&lt;/code&gt; comes with a very nice auto-complete functionality that saves us the trouble of typing out all the names. Try typing &lt;code&gt;murders$p&lt;/code&gt; then hitting the &lt;kbd&gt;tab&lt;/kbd&gt; key on your keyboard. This functionality and many other useful auto-complete features are available when working in RStudio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors-numerics-characters-and-logical&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vectors: numerics, characters, and logical&lt;/h3&gt;
&lt;p&gt;The object &lt;code&gt;murders$population&lt;/code&gt; is not one number but several. We call these types of objects &lt;em&gt;vectors&lt;/em&gt;. A single number is technically a vector of length 1, but in general we use the term vectors to refer to objects with several entries. The function &lt;code&gt;length&lt;/code&gt; tells you how many entries are in the vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pop &amp;lt;- murders$population
length(pop)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 51&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This particular vector is &lt;em&gt;numeric&lt;/em&gt; since population sizes are numbers:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pop)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a numeric vector, every entry must be a number.&lt;/p&gt;
&lt;p&gt;To store character strings, vectors can also be of class &lt;em&gt;character&lt;/em&gt;. For example, the state names are characters:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(murders$state)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with numeric vectors, all entries in a character vector need to be a character.&lt;/p&gt;
&lt;p&gt;Another important type of vectors are &lt;em&gt;logical vectors&lt;/em&gt;. These must be either &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z &amp;lt;- 3 == 2
z&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the &lt;code&gt;==&lt;/code&gt; is a relational operator asking if 3 is equal to 2. In &lt;code&gt;R&lt;/code&gt;, if you just use one &lt;code&gt;=&lt;/code&gt;, you actually assign a variable, but if you use two &lt;code&gt;==&lt;/code&gt; you test for equality. Yet another reason to avoid assigning via &lt;code&gt;=&lt;/code&gt;‚Ä¶ it can get confusing and typos can really mess things up.&lt;/p&gt;
&lt;p&gt;You can see the other &lt;em&gt;relational operators&lt;/em&gt; by typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?Comparison&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In future sections, you will see how useful relational operators can be.&lt;/p&gt;
&lt;p&gt;We discuss more important features of vectors after the next set of exercises.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Mathematically, the values in &lt;code&gt;pop&lt;/code&gt; are integers and there is an integer class in &lt;code&gt;R&lt;/code&gt;. However, by default, numbers are assigned class numeric even when they are round integers. For example, &lt;code&gt;class(1)&lt;/code&gt; returns numeric. You can turn them into class integer with the &lt;code&gt;as.integer()&lt;/code&gt; function or by adding an &lt;code&gt;L&lt;/code&gt; like this: &lt;code&gt;1L&lt;/code&gt;. Note the class by typing: &lt;code&gt;class(1L)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;factors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Factors&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;murders&lt;/code&gt; dataset, we might expect the region to also be a character vector. However, it is not:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(murders$region)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a &lt;em&gt;factor&lt;/em&gt;. Factors are useful for storing categorical data. We can see that there are only 4 regions by using the &lt;code&gt;levels&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(murders$region)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Northeast&amp;quot;     &amp;quot;South&amp;quot;         &amp;quot;North Central&amp;quot; &amp;quot;West&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the background, &lt;code&gt;R&lt;/code&gt; stores these &lt;em&gt;levels&lt;/em&gt; as integers and keeps a map to keep track of the labels. This is more memory efficient than storing all the characters. It is also useful for computational reasons we‚Äôll explore later.&lt;/p&gt;
&lt;p&gt;Note that the levels have an order that is different from the order of appearance in the factor object. The default in &lt;code&gt;R&lt;/code&gt; is for the levels to follow alphabetical order. However, often we want the levels to follow a different order. You can specify an order through the &lt;code&gt;levels&lt;/code&gt; argument when creating the factor with the &lt;code&gt;factor&lt;/code&gt; function. For example, in the murders dataset regions are ordered from east to west. The function &lt;code&gt;reorder&lt;/code&gt; lets us change the order of the levels of a factor variable based on a summary computed on a numeric vector. We will demonstrate this with a simple example, and will see more advanced ones in the Data Visualization part of the book.&lt;/p&gt;
&lt;p&gt;Suppose we want the levels of the region by the total number of murders rather than alphabetical order. If there are values associated with each level, we can use the &lt;code&gt;reorder&lt;/code&gt; and specify a data summary to determine the order. The following code takes the sum of the total murders in each region, and reorders the factor following these sums.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;region &amp;lt;- murders$region
value &amp;lt;- murders$total
region &amp;lt;- reorder(region, value, FUN = sum)
levels(region)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Northeast&amp;quot;     &amp;quot;North Central&amp;quot; &amp;quot;West&amp;quot;          &amp;quot;South&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new order is in agreement with the fact that the Northeast has the least murders and the South has the most.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Factors can be a source of confusion since sometimes they behave like characters and sometimes they do not. As a result, confusing factors and characters are a common source of bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lists&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Lists&lt;/h3&gt;
&lt;p&gt;Data frames are a special case of &lt;em&gt;lists&lt;/em&gt;. We will cover lists in more detail later, but know that they are useful because you can store any combination of different types. Below is an example of a list we created for you:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;record&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $name
## [1] &amp;quot;John Doe&amp;quot;
## 
## $student_id
## [1] 1234
## 
## $grades
## [1] 95 82 91 97 93
## 
## $final_grade
## [1] &amp;quot;A&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(record)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with data frames, you can extract the components of a list with the accessor &lt;code&gt;$&lt;/code&gt;. In fact, data frames are a type of list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;record$student_id&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1234&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also use double square brackets (&lt;code&gt;[[&lt;/code&gt;) like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;record[[&amp;quot;student_id&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1234&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should get used to the fact that in &lt;code&gt;R&lt;/code&gt; there are often several ways to do the same thing. such as accessing entries.&lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might also encounter lists without variable names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;record2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;John Doe&amp;quot;
## 
## [[2]]
## [1] 1234&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a list does not have names, you cannot extract the elements with &lt;code&gt;$&lt;/code&gt;, but you can still use the brackets method and instead of providing the variable name, you provide the list index, like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;record2[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;John Doe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We won‚Äôt be using lists until later, but you might encounter one in your own exploration of &lt;code&gt;R&lt;/code&gt;. For this reason, we show you some basics here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;matrices&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Matrices&lt;/h3&gt;
&lt;p&gt;Matrices are another type of object that are common in &lt;code&gt;R&lt;/code&gt;. Matrices are similar to data frames in that they are two-dimensional: they have rows and columns. However, like numeric, character and logical vectors, entries in matrices have to be all the same type. For this reason data frames are much more useful for storing data, since we can have characters, factors, and numbers in them.&lt;/p&gt;
&lt;p&gt;Yet matrices have a major advantage over data frames: we can perform matrix algebra operations, a powerful type of mathematical technique. We do not describe these operations in this class, but much of what happens in the background when you perform a data analysis involves matrices. We describe them briefly here since some of the functions we will learn return matrices.&lt;/p&gt;
&lt;p&gt;We can define a matrix using the &lt;code&gt;matrix&lt;/code&gt; function. We need to specify the number of rows and columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat &amp;lt;- matrix(1:12, 4, 3)
mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    5    9
## [2,]    2    6   10
## [3,]    3    7   11
## [4,]    4    8   12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can access specific entries in a matrix using square brackets (&lt;code&gt;[&lt;/code&gt;). If you want the second row, third column, you use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat[2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want the entire second row, you leave the column spot empty:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat[2, ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  2  6 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that this returns a vector, not a matrix.&lt;/p&gt;
&lt;p&gt;Similarly, if you want the entire third column, you leave the row spot empty:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat[, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  9 10 11 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also a vector, not a matrix.&lt;/p&gt;
&lt;p&gt;You can access more than one column or more than one row if you like. This will give you a new matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat[, 2:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    5    9
## [2,]    6   10
## [3,]    7   11
## [4,]    8   12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can subset both rows and columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat[1:2, 2:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    5    9
## [2,]    6   10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can convert matrices into data frames using the function &lt;code&gt;as.data.frame&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.data.frame(mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   V1 V2 V3
## 1  1  5  9
## 2  2  6 10
## 3  3  7 11
## 4  4  8 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use single square brackets (&lt;code&gt;[&lt;/code&gt;) to access rows and columns of a data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;murders&amp;quot;)
murders[25, 1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Mississippi&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murders[2:3, ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     state abb region population total
## 2  Alaska  AK   West     710231    19
## 3 Arizona  AZ   West    6392017   232&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;TRY IT&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Load the US murders dataset.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the function &lt;code&gt;str&lt;/code&gt; to examine the structure of the &lt;code&gt;murders&lt;/code&gt; object. Which of the following best describes the variables represented in this data frame?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;The 51 states.&lt;/li&gt;
&lt;li&gt;The murder rates for all 50 states and DC.&lt;/li&gt;
&lt;li&gt;The state name, the abbreviation of the state name, the state‚Äôs region, and the state‚Äôs population and total number of murders for 2010.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str&lt;/code&gt; shows no relevant information.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;What are the column names used by the data frame for these five variables?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the accessor &lt;code&gt;$&lt;/code&gt; to extract the state abbreviations and assign them to the object &lt;code&gt;a&lt;/code&gt;. What is the class of this object?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now use the square brackets to extract the state abbreviations and assign them to the object &lt;code&gt;b&lt;/code&gt;. Use the &lt;code&gt;identical&lt;/code&gt; function to determine if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are the same.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We saw that the &lt;code&gt;region&lt;/code&gt; column stores a factor. You can corroborate this by typing:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(murders$region)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With one line of code, use the function &lt;code&gt;levels&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; to determine the number of regions defined by this dataset.&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The function &lt;code&gt;table&lt;/code&gt; takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of states per region.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vectors&lt;/h2&gt;
&lt;p&gt;In R, the most basic objects available to store data are &lt;em&gt;vectors&lt;/em&gt;. As we have seen, complex datasets can usually be broken down into components that are vectors. For example, in a data frame, each column is a vector. Here we learn more about this important class.&lt;/p&gt;
&lt;div id=&#34;creating-vectors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating vectors&lt;/h3&gt;
&lt;p&gt;We can create vectors using the function &lt;code&gt;c&lt;/code&gt;, which stands for &lt;em&gt;concatenate&lt;/em&gt;. We use &lt;code&gt;c&lt;/code&gt; to concatenate entries in the following way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes &amp;lt;- c(380, 124, 818)
codes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 380 124 818&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country &amp;lt;- c(&amp;quot;italy&amp;quot;, &amp;quot;canada&amp;quot;, &amp;quot;egypt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;R&lt;/code&gt; you can also use single quotes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country &amp;lt;- c(&amp;#39;italy&amp;#39;, &amp;#39;canada&amp;#39;, &amp;#39;egypt&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But be careful not to confuse the single quote ‚Äô with the &lt;em&gt;back quote&lt;/em&gt;, which shares a keyboard key with &lt;kbd&gt;~&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;By now you should know that if you type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country &amp;lt;- c(italy, canada, egypt)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you receive an error because the variables &lt;code&gt;italy&lt;/code&gt;, &lt;code&gt;canada&lt;/code&gt;, and &lt;code&gt;egypt&lt;/code&gt; are not defined. If we do not use the quotes, &lt;code&gt;R&lt;/code&gt; looks for variables with those names and returns an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Names&lt;/h3&gt;
&lt;p&gt;Sometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes &amp;lt;- c(italy = 380, canada = 124, egypt = 818)
codes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  italy canada  egypt 
##    380    124    818&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The object &lt;code&gt;codes&lt;/code&gt; continues to be a numeric vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(codes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but with names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(codes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;italy&amp;quot;  &amp;quot;canada&amp;quot; &amp;quot;egypt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the use of strings without quotes looks confusing, know that you can use the quotes as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes &amp;lt;- c(&amp;quot;italy&amp;quot; = 380, &amp;quot;canada&amp;quot; = 124, &amp;quot;egypt&amp;quot; = 818)
codes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  italy canada  egypt 
##    380    124    818&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is no difference between this function call and the previous one. This is one of the many ways in which &lt;code&gt;R&lt;/code&gt; is quirky compared to other languages.&lt;/p&gt;
&lt;p&gt;We can also assign names using the &lt;code&gt;names&lt;/code&gt; functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes &amp;lt;- c(380, 124, 818)
country &amp;lt;- c(&amp;quot;italy&amp;quot;,&amp;quot;canada&amp;quot;,&amp;quot;egypt&amp;quot;)
names(codes) &amp;lt;- country
codes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  italy canada  egypt 
##    380    124    818&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sequences&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sequences&lt;/h3&gt;
&lt;p&gt;Another useful function for creating vectors generates sequences:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(1, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first argument defines the start, and the second defines the end which is included. The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(1, 10, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 3 5 7 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want consecutive integers, we can use the following shorthand:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1:10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we use these functions, &lt;code&gt;R&lt;/code&gt; produces integers, not numerics, because they are typically used to index something:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(1:10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we create a sequence including non-integers, the class changes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(seq(1, 10, 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subsetting&lt;/h3&gt;
&lt;p&gt;We use square brackets to access specific elements of a vector. For the vector &lt;code&gt;codes&lt;/code&gt; we defined above, we can access the second element using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes[2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## canada 
##    124&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can get more than one entry by using a multi-entry vector as an index:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes[c(1,3)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## italy egypt 
##   380   818&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sequences defined above are particularly useful if we want to access, say, the first two elements:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes[1:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  italy canada 
##    380    124&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the elements have names, we can also access the entries using these names. Below are two examples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes[&amp;quot;canada&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## canada 
##    124&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;codes[c(&amp;quot;egypt&amp;quot;,&amp;quot;italy&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## egypt italy 
##   818   380&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;coercion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Coercion&lt;/h2&gt;
&lt;p&gt;In general, &lt;em&gt;coercion&lt;/em&gt; is an attempt by &lt;code&gt;R&lt;/code&gt; to be flexible with data types. When an entry does not match the expected, some of the prebuilt &lt;code&gt;R&lt;/code&gt; functions try to guess what was meant before throwing an error. This can also lead to confusion. Failing to understand &lt;em&gt;coercion&lt;/em&gt; can drive programmers crazy when attempting to code in &lt;code&gt;R&lt;/code&gt; since it behaves quite differently from most other languages in this regard. Let‚Äôs learn about it with some examples.&lt;/p&gt;
&lt;p&gt;We said that vectors must be all of the same type. So if we try to combine, say, numbers and characters, you might expect an error:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1, &amp;quot;canada&amp;quot;, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we don‚Äôt get one, not even a warning! What happened? Look at &lt;code&gt;x&lt;/code&gt; and its class:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot;      &amp;quot;canada&amp;quot; &amp;quot;3&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R &lt;em&gt;coerced&lt;/em&gt; the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings &lt;code&gt;&#34;1&#34;&lt;/code&gt; and ‚Äú&lt;code&gt;3&lt;/code&gt;‚Äù. The fact that not even a warning is issued is an example of how coercion can cause many unnoticed errors in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;R also offers functions to change from one type to another. For example, you can turn numbers into characters with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1:5
y &amp;lt;- as.character(x)
y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; &amp;quot;5&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can turn it back with &lt;code&gt;as.numeric&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.numeric(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function is actually quite useful since datasets that include numbers as character strings are common.&lt;/p&gt;
&lt;div id=&#34;not-availables-na&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Not availables (NA)&lt;/h3&gt;
&lt;p&gt;This ‚Äútopic‚Äù seems to be wholly unappreciated and it has been our experience that students often panic when encountering an &lt;code&gt;NA&lt;/code&gt;. This often happens when a function tries to coerce one type to another and encounters an impossible case. In such circumstances, &lt;code&gt;R&lt;/code&gt; usually gives us a warning and turns the entry into a special value called an &lt;code&gt;NA&lt;/code&gt; (for ‚Äúnot available‚Äù). For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;1&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;3&amp;quot;)
as.numeric(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: NAs introduced by coercion&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1 NA  3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R does not have any guesses for what number you want when you type &lt;code&gt;b&lt;/code&gt;, so it does not try.&lt;/p&gt;
&lt;p&gt;While coercion is a common case leading to &lt;code&gt;NA&lt;/code&gt;s, you‚Äôll see them in nearly every real-world dataset. Most often, you will encounter the &lt;code&gt;NA&lt;/code&gt;s as a stand-in for missing data. Again, this a common problem in real-world datasets and you need to be aware that it will come up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sorting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sorting&lt;/h2&gt;
&lt;p&gt;Now that we have mastered some basic &lt;code&gt;R&lt;/code&gt; knowledge (ha!), let‚Äôs try to gain some insights into the safety of different states in the context of gun murders.&lt;/p&gt;
&lt;div id=&#34;sort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Say we want to rank the states from least to most gun murders. The function &lt;code&gt;sort&lt;/code&gt; sorts a vector in increasing order. We can therefore see the largest number of gun murders by typing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(murders)
sort(murders$total)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]    2    4    5    5    7    8   11   12   12   16   19   21   22   27   32
## [16]   36   38   53   63   65   67   84   93   93   97   97   99  111  116  118
## [31]  120  135  142  207  219  232  246  250  286  293  310  321  351  364  376
## [46]  413  457  517  669  805 1257&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this does not give us information about which states have which murder totals. For example, we don‚Äôt know which state had 1257.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;order&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;order&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;order&lt;/code&gt; is closer to what we want. It takes a vector as input and returns the vector of indexes that sorts the input vector. This may sound confusing so let‚Äôs look at a simple example. We can create a vector and sort it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(31, 4, 15, 92, 65)
sort(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4 15 31 65 92&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rather than sort the input vector, the function &lt;code&gt;order&lt;/code&gt; returns the index that sorts input vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;index &amp;lt;- order(x)
x[index]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4 15 31 65 92&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the same output as that returned by &lt;code&gt;sort(x)&lt;/code&gt;. If we look at this index, we see why it works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 31  4 15 92 65&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;order(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 3 1 5 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second entry of &lt;code&gt;x&lt;/code&gt; is the smallest, so &lt;code&gt;order(x)&lt;/code&gt; starts with &lt;code&gt;2&lt;/code&gt;. The next smallest is the third entry, so the second entry is &lt;code&gt;3&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;How does this help us order the states by murders? First, remember that the entries of vectors you access with &lt;code&gt;$&lt;/code&gt; follow the same order as the rows in the table. For example, these two vectors containing state names and abbreviations, respectively, are matched by their order:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murders$state[1:6]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Alabama&amp;quot;    &amp;quot;Alaska&amp;quot;     &amp;quot;Arizona&amp;quot;    &amp;quot;Arkansas&amp;quot;   &amp;quot;California&amp;quot;
## [6] &amp;quot;Colorado&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murders$abb[1:6]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;AL&amp;quot; &amp;quot;AK&amp;quot; &amp;quot;AZ&amp;quot; &amp;quot;AR&amp;quot; &amp;quot;CA&amp;quot; &amp;quot;CO&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means we can order the state names by their total murders. We first obtain the index that orders the vectors according to murder totals and then index the state names vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ind &amp;lt;- order(murders$total)
murders$abb[ind]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;VT&amp;quot; &amp;quot;ND&amp;quot; &amp;quot;NH&amp;quot; &amp;quot;WY&amp;quot; &amp;quot;HI&amp;quot; &amp;quot;SD&amp;quot; &amp;quot;ME&amp;quot; &amp;quot;ID&amp;quot; &amp;quot;MT&amp;quot; &amp;quot;RI&amp;quot; &amp;quot;AK&amp;quot; &amp;quot;IA&amp;quot; &amp;quot;UT&amp;quot; &amp;quot;WV&amp;quot; &amp;quot;NE&amp;quot;
## [16] &amp;quot;OR&amp;quot; &amp;quot;DE&amp;quot; &amp;quot;MN&amp;quot; &amp;quot;KS&amp;quot; &amp;quot;CO&amp;quot; &amp;quot;NM&amp;quot; &amp;quot;NV&amp;quot; &amp;quot;AR&amp;quot; &amp;quot;WA&amp;quot; &amp;quot;CT&amp;quot; &amp;quot;WI&amp;quot; &amp;quot;DC&amp;quot; &amp;quot;OK&amp;quot; &amp;quot;KY&amp;quot; &amp;quot;MA&amp;quot;
## [31] &amp;quot;MS&amp;quot; &amp;quot;AL&amp;quot; &amp;quot;IN&amp;quot; &amp;quot;SC&amp;quot; &amp;quot;TN&amp;quot; &amp;quot;AZ&amp;quot; &amp;quot;NJ&amp;quot; &amp;quot;VA&amp;quot; &amp;quot;NC&amp;quot; &amp;quot;MD&amp;quot; &amp;quot;OH&amp;quot; &amp;quot;MO&amp;quot; &amp;quot;LA&amp;quot; &amp;quot;IL&amp;quot; &amp;quot;GA&amp;quot;
## [46] &amp;quot;MI&amp;quot; &amp;quot;PA&amp;quot; &amp;quot;NY&amp;quot; &amp;quot;FL&amp;quot; &amp;quot;TX&amp;quot; &amp;quot;CA&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to the above, California had the most murders.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;max-and-which.max&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;max&lt;/code&gt; and &lt;code&gt;which.max&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If we are only interested in the entry with the largest value, we can use &lt;code&gt;max&lt;/code&gt; for the value:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(murders$total)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1257&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and &lt;code&gt;which.max&lt;/code&gt; for the index of the largest value:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;i_max &amp;lt;- which.max(murders$total)
murders$state[i_max]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;California&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the minimum, we can use &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;which.min&lt;/code&gt; in the same way.&lt;/p&gt;
&lt;p&gt;Does this mean California is the most dangerous state? In an upcoming section, we argue that we should be considering rates instead of totals. Before doing that, we introduce one last order-related function: &lt;code&gt;rank&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rank&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;rank&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Although not as frequently used as &lt;code&gt;order&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt;, the function &lt;code&gt;rank&lt;/code&gt; is also related to order and can be useful.
For any given vector it returns a vector with the rank of the first entry, second entry, etc., of the input vector. Here is a simple example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(31, 4, 15, 92, 65)
rank(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3 1 2 5 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To summarize, let‚Äôs look at the results of the three functions we have introduced:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &amp;#39;webshot&amp;#39;:
##   method        from    
##   print.webshot webshot2&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
original
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
sort
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
order
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
rank
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;beware-of-recycling&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Beware of recycling&lt;/h3&gt;
&lt;p&gt;Another common source of unnoticed errors in &lt;code&gt;R&lt;/code&gt; is the use of &lt;em&gt;recycling&lt;/em&gt;. We saw that vectors are added elementwise. So if the vectors don‚Äôt match in length, it is natural to assume that we should get an error. But we don‚Äôt. Notice what happens:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1,2,3)
y &amp;lt;- c(10, 20, 30, 40, 50, 60, 70)
x+y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in x + y: longer object length is not a multiple of shorter object
## length&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11 22 33 41 52 63 71&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We do get a warning, but no error. For the output, &lt;code&gt;R&lt;/code&gt; has recycled the numbers in &lt;code&gt;x&lt;/code&gt;. Notice the last digit of numbers in the output.&lt;/p&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;TRY IT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For these exercises we will use the US murders dataset. Make sure you load it prior to starting.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(&amp;quot;murders&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;$&lt;/code&gt; operator to access the population size data and store it as the object &lt;code&gt;pop&lt;/code&gt;. Then use the &lt;code&gt;sort&lt;/code&gt; function to redefine &lt;code&gt;pop&lt;/code&gt; so that it is sorted. Finally, use the &lt;code&gt;[&lt;/code&gt; operator to report the smallest population size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use &lt;code&gt;order&lt;/code&gt; instead of &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can actually perform the same operation as in the previous exercise using the function &lt;code&gt;which.min&lt;/code&gt;. Write one line of code that does this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we know how small the smallest state is and we know which row represents it. Which state is it? Define a variable &lt;code&gt;states&lt;/code&gt; to be the state names from the &lt;code&gt;murders&lt;/code&gt; data frame. Report the name of the state with the smallest population.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create a data frame using the &lt;code&gt;data.frame&lt;/code&gt; function. Here is a quick example:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- c(35, 88, 42, 84, 81, 30)
city &amp;lt;- c(&amp;quot;Beijing&amp;quot;, &amp;quot;Lagos&amp;quot;, &amp;quot;Paris&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;,
          &amp;quot;San Juan&amp;quot;, &amp;quot;Toronto&amp;quot;)
city_temps &amp;lt;- data.frame(name = city, temperature = temp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the &lt;code&gt;rank&lt;/code&gt; function to determine the population rank of each state from smallest population size to biggest. Save these ranks in an object called &lt;code&gt;ranks&lt;/code&gt;, then create a data frame with the state name and its rank. Call the data frame &lt;code&gt;my_df&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Repeat the previous exercise, but this time order &lt;code&gt;my_df&lt;/code&gt; so that the states are ordered from least populous to most populous. Hint: create an object &lt;code&gt;ind&lt;/code&gt; that stores the indexes needed to order the population values. Then use the bracket operator &lt;code&gt;[&lt;/code&gt; to re-order each column in the data frame.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;na_example&lt;/code&gt; vector represents a series of counts. You can quickly examine the object using:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;na_example&amp;quot;)  
str(na_example)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  int [1:1000] 2 1 3 2 1 3 1 4 3 2 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when we compute the average with the function &lt;code&gt;mean&lt;/code&gt;, we obtain an &lt;code&gt;NA&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(na_example)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;is.na&lt;/code&gt; function returns a logical vector that tells us which entries are &lt;code&gt;NA&lt;/code&gt;. Assign this logical vector to an object called &lt;code&gt;ind&lt;/code&gt; and determine how many &lt;code&gt;NA&lt;/code&gt;s does &lt;code&gt;na_example&lt;/code&gt; have.&lt;/p&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Now compute the average again, but only for the entries that are not &lt;code&gt;NA&lt;/code&gt;. Hint: remember the &lt;code&gt;!&lt;/code&gt; operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;vector-arithmetics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vector arithmetics&lt;/h2&gt;
&lt;p&gt;California had the most murders, but does this mean it is the most dangerous state? What if it just has many more people than any other state? We can quickly confirm that California indeed has the largest population:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(&amp;quot;murders&amp;quot;)
murders$state[which.max(murders$population)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;California&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with over 37 million inhabitants. It is therefore unfair to compare the totals if we are interested in learning how safe the state is. What we really should be computing is the murders per capita. The reports we describe in the motivating section used murders per 100,000 as the unit. To compute this quantity, the powerful vector arithmetic capabilities of &lt;code&gt;R&lt;/code&gt; come in handy.&lt;/p&gt;
&lt;div id=&#34;rescaling-a-vector&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rescaling a vector&lt;/h3&gt;
&lt;p&gt;In R, arithmetic operations on vectors occur &lt;em&gt;element-wise&lt;/em&gt;. For a quick example, suppose we have height in inches:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inches &amp;lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and want to convert to centimeters. Notice what happens when we multiply &lt;code&gt;inches&lt;/code&gt; by 2.54:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inches * 2.54&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the line above, we multiplied each element by 2.54. Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inches - 69&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  0 -7 -3  1  1  4 -2  4 -2  1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;two-vectors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Two vectors&lt;/h3&gt;
&lt;p&gt;If we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{pmatrix}
a\\
b\\
c\\
d
\end{pmatrix}
+
\begin{pmatrix}
e\\
f\\
g\\
h
\end{pmatrix}
=
\begin{pmatrix}
a +e\\
b + f\\
c + g\\
d + h
\end{pmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The same holds for other mathematical operations, such as &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This implies that to compute the murder rates we can simply type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murder_rate &amp;lt;- murders$total / murders$population * 100000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we do this, we notice that California is no longer near the top of the list. In fact, we can use what we have learned to order the states by murder rate:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murders$abb[order(murder_rate)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;VT&amp;quot; &amp;quot;NH&amp;quot; &amp;quot;HI&amp;quot; &amp;quot;ND&amp;quot; &amp;quot;IA&amp;quot; &amp;quot;ID&amp;quot; &amp;quot;UT&amp;quot; &amp;quot;ME&amp;quot; &amp;quot;WY&amp;quot; &amp;quot;OR&amp;quot; &amp;quot;SD&amp;quot; &amp;quot;MN&amp;quot; &amp;quot;MT&amp;quot; &amp;quot;CO&amp;quot; &amp;quot;WA&amp;quot;
## [16] &amp;quot;WV&amp;quot; &amp;quot;RI&amp;quot; &amp;quot;WI&amp;quot; &amp;quot;NE&amp;quot; &amp;quot;MA&amp;quot; &amp;quot;IN&amp;quot; &amp;quot;KS&amp;quot; &amp;quot;NY&amp;quot; &amp;quot;KY&amp;quot; &amp;quot;AK&amp;quot; &amp;quot;OH&amp;quot; &amp;quot;CT&amp;quot; &amp;quot;NJ&amp;quot; &amp;quot;AL&amp;quot; &amp;quot;IL&amp;quot;
## [31] &amp;quot;OK&amp;quot; &amp;quot;NC&amp;quot; &amp;quot;NV&amp;quot; &amp;quot;VA&amp;quot; &amp;quot;AR&amp;quot; &amp;quot;TX&amp;quot; &amp;quot;NM&amp;quot; &amp;quot;CA&amp;quot; &amp;quot;FL&amp;quot; &amp;quot;TN&amp;quot; &amp;quot;PA&amp;quot; &amp;quot;AZ&amp;quot; &amp;quot;GA&amp;quot; &amp;quot;MS&amp;quot; &amp;quot;MI&amp;quot;
## [46] &amp;quot;DE&amp;quot; &amp;quot;SC&amp;quot; &amp;quot;MD&amp;quot; &amp;quot;MO&amp;quot; &amp;quot;LA&amp;quot; &amp;quot;DC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;TRY IT&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Previously we created this data frame:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp &amp;lt;- c(35, 88, 42, 84, 81, 30)
city &amp;lt;- c(&amp;quot;Beijing&amp;quot;, &amp;quot;Lagos&amp;quot;, &amp;quot;Paris&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;,
          &amp;quot;San Juan&amp;quot;, &amp;quot;Toronto&amp;quot;)
city_temps &amp;lt;- data.frame(name = city, temperature = temp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remake the data frame using the code above, but add a line that converts the temperature from Fahrenheit to Celsius. The conversion is &lt;span class=&#34;math inline&#34;&gt;\(C = \frac{5}{9} \times (F - 32)\)&lt;/span&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Write code to compute the following sum &lt;span class=&#34;math inline&#34;&gt;\(1+1/2^2 + 1/3^2 + \dots 1/100^2\)&lt;/span&gt;? &lt;em&gt;Hint:&lt;/em&gt; thanks to Euler, we know it should be close to &lt;span class=&#34;math inline&#34;&gt;\(\pi^2/6\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compute the per 100,000 murder rate for each state and store it in the object &lt;code&gt;murder_rate&lt;/code&gt;. Then compute the average murder rate for the US using the function &lt;code&gt;mean&lt;/code&gt;. What is the average?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;indexing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Indexing&lt;/h2&gt;
&lt;p&gt;Indexing is a boring name for an important tool. &lt;code&gt;R&lt;/code&gt; provides a powerful and convenient way of referencing specific elements of vectors. We can, for example, subset a vector based on properties of another vector. In this section, we continue working with our US murders example, which we can load like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(&amp;quot;murders&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;subsetting-with-logicals&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Subsetting with logicals&lt;/h3&gt;
&lt;p&gt;We have now calculated the murder rate using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murder_rate &amp;lt;- murders$total / murders$population * 100000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine you are moving from Italy where, according to an ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate. Another powerful feature of &lt;code&gt;R&lt;/code&gt; is that we can use logicals to index vectors. If we compare a vector to a single number, it actually performs the test for each entry. The following is an example related to the question above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ind &amp;lt;- murder_rate &amp;lt; 0.71&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we instead want to know if a value is less or equal, we can use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ind &amp;lt;- murder_rate &amp;lt;= 0.71&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we get back a logical vector with &lt;code&gt;TRUE&lt;/code&gt; for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murders$state[ind]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hawaii&amp;quot;        &amp;quot;Iowa&amp;quot;          &amp;quot;New Hampshire&amp;quot; &amp;quot;North Dakota&amp;quot; 
## [5] &amp;quot;Vermont&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to count how many are TRUE, the function &lt;code&gt;sum&lt;/code&gt; returns the sum of the entries of a vector and logical vectors get &lt;em&gt;coerced&lt;/em&gt; to numeric with &lt;code&gt;TRUE&lt;/code&gt; coded as 1 and &lt;code&gt;FALSE&lt;/code&gt; as 0. Thus we can count the states using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(ind)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;logical-operators&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Logical operators&lt;/h3&gt;
&lt;p&gt;Suppose we like the mountains and we want to move to a safe state in the western region of the country. We want the murder rate to be at most 1. In this case, we want two different things to be true. Here we can use the logical operator &lt;em&gt;and&lt;/em&gt;, which in &lt;code&gt;R&lt;/code&gt; is represented with &lt;code&gt;&amp;amp;&lt;/code&gt;. This operation results in &lt;code&gt;TRUE&lt;/code&gt; only when both logicals are &lt;code&gt;TRUE&lt;/code&gt;. To see this, consider this example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TRUE &amp;amp; TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TRUE &amp;amp; FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FALSE &amp;amp; FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For our example, we can form two logicals:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;west &amp;lt;- murders$region == &amp;quot;West&amp;quot;
safe &amp;lt;- murder_rate &amp;lt;= 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we can use the &lt;code&gt;&amp;amp;&lt;/code&gt; to get a vector of logicals that tells us which states satisfy both conditions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ind &amp;lt;- safe &amp;amp; west
murders$state[ind]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hawaii&amp;quot;  &amp;quot;Idaho&amp;quot;   &amp;quot;Oregon&amp;quot;  &amp;quot;Utah&amp;quot;    &amp;quot;Wyoming&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;which&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;which&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Suppose we want to look up California‚Äôs murder rate. For this type of operation, it is convenient to convert vectors of logicals into indexes instead of keeping long vectors of logicals. The function &lt;code&gt;which&lt;/code&gt; tells us which entries of a logical vector are TRUE. So we can type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ind &amp;lt;- which(murders$state == &amp;quot;California&amp;quot;)
murder_rate[ind]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.374138&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;match&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;match&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If instead of just one state we want to find out the murder rates for several states, say New York, Florida, and Texas, we can use the function &lt;code&gt;match&lt;/code&gt;. This function tells us which indexes of a second vector match each of the entries of a first vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ind &amp;lt;- match(c(&amp;quot;New York&amp;quot;, &amp;quot;Florida&amp;quot;, &amp;quot;Texas&amp;quot;), murders$state)
ind&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 33 10 44&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can look at the murder rates:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;murder_rate[ind]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.667960 3.398069 3.201360&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;in&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;%in%&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function &lt;code&gt;%in%&lt;/code&gt;. Let‚Äôs imagine you are not sure if Boston, Dakota, and Washington are states. You can find out like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(&amp;quot;Boston&amp;quot;, &amp;quot;Dakota&amp;quot;, &amp;quot;Washington&amp;quot;) %in% murders$state&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we will be using &lt;code&gt;%in%&lt;/code&gt; often throughout the book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: There is a connection between &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;%in%&lt;/code&gt; through &lt;code&gt;which&lt;/code&gt;. To see this, notice that the following two lines produce the same index (although in different order):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;match(c(&amp;quot;New York&amp;quot;, &amp;quot;Florida&amp;quot;, &amp;quot;Texas&amp;quot;), murders$state)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 33 10 44&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;which(murders$state%in%c(&amp;quot;New York&amp;quot;, &amp;quot;Florida&amp;quot;, &amp;quot;Texas&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10 33 44&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;EXERCISES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Start by loading the library and data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dslabs)
data(murders)&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Compute the per 100,000 murder rate for each state and store it in an object called &lt;code&gt;murder_rate&lt;/code&gt;. Then use logical operators to create a logical vector named &lt;code&gt;low&lt;/code&gt; that tells us which entries of &lt;code&gt;murder_rate&lt;/code&gt; are lower than 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now use the results from the previous exercise and the function &lt;code&gt;which&lt;/code&gt; to determine the indices of &lt;code&gt;murder_rate&lt;/code&gt; associated with values lower than 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the results from the previous exercise to report the names of the states with murder rates lower than 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now extend the code from exercises 2 and 3 to report the states in the Northeast with murder rates lower than 1. Hint: use the previously defined logical vector &lt;code&gt;low&lt;/code&gt; and the logical operator &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a previous exercise we computed the murder rate for each state and the average of these numbers. How many states are below the average?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the match function to identify the states with abbreviations AK, MI, and IA. Hint: start by defining an index of the entries of &lt;code&gt;murders$abb&lt;/code&gt; that match the three abbreviations, then use the &lt;code&gt;[&lt;/code&gt; operator to extract the states.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;%in%&lt;/code&gt; operator to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extend the code you used in exercise 7 to report the one entry that is &lt;strong&gt;not&lt;/strong&gt; an actual abbreviation. Hint: use the &lt;code&gt;!&lt;/code&gt; operator, which turns &lt;code&gt;FALSE&lt;/code&gt; into &lt;code&gt;TRUE&lt;/code&gt; and vice versa, then &lt;code&gt;which&lt;/code&gt; to obtain an index.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tVcomh6jQ2Y&amp;amp;list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://rstudio.cloud&#34; class=&#34;uri&#34;&gt;https://rstudio.cloud&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://rafalab.github.io/dsbook/installing-r-rstudio.html&#34; class=&#34;uri&#34;&gt;https://rafalab.github.io/dsbook/installing-r-rstudio.html&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://abcnews.go.com/blogs/headlines/2012/12/us-gun-ownership-homicide-rate-higher-than-other-developed-countries/&#34; class=&#34;uri&#34;&gt;http://abcnews.go.com/blogs/headlines/2012/12/us-gun-ownership-homicide-rate-higher-than-other-developed-countries/&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;I‚Äôm especially partial to Puerto Rico.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;This is, without a doubt, my least favorite aspect of &lt;code&gt;R&lt;/code&gt;. I‚Äôd even venture to call it stupid. The logic behind this pesky &lt;code&gt;&amp;lt;-&lt;/code&gt; is a total mystery to me, but there &lt;em&gt;is&lt;/em&gt; logic to avoiding &lt;code&gt;=&lt;/code&gt;. But, you do you.&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;This equals sign is the reasons we assign values with &lt;code&gt;&amp;lt;-&lt;/code&gt;; then when arguments of a function are assigned values, we don‚Äôt end up with multiple equals signs. But‚Ä¶ who cares.&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;Whether you view this as a feature or a bug is a good indicator whether you‚Äôll enjoy working with &lt;code&gt;R&lt;/code&gt;.&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Truth, beauty, and data &#43; R and tidyverse</title>
      <link>/content/01-content/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/content/01-content/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;p&gt;As noted in the syllabus, your readings will be assigned each week in this area.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;/syllabus/&#34;&gt;syllabus&lt;/a&gt;, &lt;a href=&#34;/content/&#34;&gt;content&lt;/a&gt;, &lt;a href=&#34;/example/&#34;&gt;examples&lt;/a&gt;, and &lt;a href=&#34;/lab/&#34;&gt;labs&lt;/a&gt; pages for this class&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://socviz.co/lookatdata.html&#34;&gt;Chapter 1&lt;/a&gt; in Kieran Healy, &lt;em&gt;Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapters 2 and 3 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; (&lt;em&gt;skim the introduction and chapter 1&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.washingtonpost.com/news/wonk/wp/2018/06/15/study-charts-change-hearts-and-minds-better-than-words-do/?utm_term=.4474599c0d5e&#34;&gt;Study: Charts change hearts and minds better than words do&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How do we know what is true? (Whoa!)&lt;/li&gt;
&lt;li&gt;Are facts truth?&lt;/li&gt;
&lt;li&gt;Why do we visualize data?&lt;/li&gt;
&lt;li&gt;What makes a great visualization?&lt;/li&gt;
&lt;li&gt;How do you choose which kind of visualization to use?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for the week‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/01-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/01-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;truth-beauty-and-data-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#truth-beauty-and-data&#34; role=&#34;tab&#34; aria-controls=&#34;truth-beauty-and-data&#34; aria-selected=&#34;true&#34;&gt;Truth, beauty, and data&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;facts-truth-and-beauty-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#facts-truth-and-beauty&#34; role=&#34;tab&#34; aria-controls=&#34;facts-truth-and-beauty&#34; aria-selected=&#34;false&#34;&gt;Facts, truth, and beauty&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;data-truth-and-beauty-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#data-truth-and-beauty&#34; role=&#34;tab&#34; aria-controls=&#34;data-truth-and-beauty&#34; aria-selected=&#34;false&#34;&gt;Data, truth, and beauty&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;beautiful-visualizations-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#beautiful-visualizations&#34; role=&#34;tab&#34; aria-controls=&#34;beautiful-visualizations&#34; aria-selected=&#34;false&#34;&gt;Beautiful visualizations&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;class-details-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#class-details&#34; role=&#34;tab&#34; aria-controls=&#34;class-details&#34; aria-selected=&#34;false&#34;&gt;Class details&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;truth-beauty-and-data&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;truth-beauty-and-data-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/01-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;facts-truth-and-beauty&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;facts-truth-and-beauty-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/01-slides.html#facts-truth-beauty&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-truth-and-beauty&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;data-truth-and-beauty-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/01-slides.html#data-truth-beauty&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;beautiful-visualizations&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;beautiful-visualizations-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/01-slides.html#beautiful-visualizations&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;class-details&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;class-details-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/01-slides.html#class-details&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tVcomh6jQ2Y&amp;amp;list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UbQ8IW3UI9E&amp;amp;list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&amp;amp;&#34;&gt;Facts, truth, and beauty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DldFVc08YY4&amp;amp;list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;Data, truth, and beauty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6MTC9uGMNFg&amp;amp;list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;Beautiful visualizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_TclSs8iLMY&amp;amp;list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34;&gt;Class details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sHom5NPjrZAeMTYS5orTl9c&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Kieran Healy, &lt;em&gt;Data Visualization: A Practical Introduction&lt;/em&gt; (Princeton: Princeton University Press, 2018), &lt;a href=&#34;http://socviz.co/&#34; role=&#34;doc-biblioref&#34;&gt;http://socviz.co/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Truth, beauty, and data revisited</title>
      <link>/content/15-content/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/content/15-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapter 12 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/telling-a-story.html&#34;&gt;Chapter 26&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Martin Krzywinski and Alberto Cairo, &lt;a href=&#34;https://www.nature.com/articles/nmeth.2571.pdf&#34;&gt;‚ÄúStorytelling‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; Ben Wellington, &lt;a href=&#34;https://www.youtube.com/watch?v=6xsvGYIxJok&#34;&gt;‚ÄúMaking data mean more through storytelling‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-vimeo&#34;&gt;&lt;/i&gt; Jonathan Schwabish, &lt;a href=&#34;https://vimeo.com/230757062&#34;&gt;‚ÄúBetter Data Communication,‚Äù&lt;/a&gt; National Bureau of Economic Research&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2018/06/28/why-people-make-bad-charts-and-what-to-do-when-it-happens/&#34;&gt;Why People Make Bad Charts (and What to Do When it Happens)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why are stories so powerful?&lt;/li&gt;
&lt;li&gt;How are stories related to truth?&lt;/li&gt;
&lt;li&gt;Is it ethical to emphasize certain aspects of the facts in data more than others? How do you decide which facts to use to convince audiences?&lt;/li&gt;
&lt;li&gt;When you‚Äôre telling a story about data, you‚Äôre inherently manipulating audience emotions. Is that okay?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/15-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/15-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;truth-beauty-and-data-revisited-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#truth-beauty-and-data-revisited&#34; role=&#34;tab&#34; aria-controls=&#34;truth-beauty-and-data-revisited&#34; aria-selected=&#34;true&#34;&gt;Truth, beauty, and data revisited&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;telling-stories-with-data-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#telling-stories-with-data&#34; role=&#34;tab&#34; aria-controls=&#34;telling-stories-with-data&#34; aria-selected=&#34;false&#34;&gt;Telling stories with data&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;curiosity-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#curiosity&#34; role=&#34;tab&#34; aria-controls=&#34;curiosity&#34; aria-selected=&#34;false&#34;&gt;Curiosity&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;truth-beauty-and-data-revisited&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;truth-beauty-and-data-revisited-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/15-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;telling-stories-with-data&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;telling-stories-with-data-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/15-slides.html#telling-stories&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;curiosity&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;curiosity-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/15-slides.html#curiosity&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sFYqZMtanRbtB1dKRBN2Rzt&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TDP_G1RiUmQ&amp;amp;list=PLS6tnpTr39sFYqZMtanRbtB1dKRBN2Rzt&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UyVJlbZjwhY&amp;amp;list=PLS6tnpTr39sFYqZMtanRbtB1dKRBN2Rzt&#34;&gt;Telling stories with data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KHfF8zdxWzM&amp;amp;list=PLS6tnpTr39sFYqZMtanRbtB1dKRBN2Rzt&#34;&gt;Curiosity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sFYqZMtanRbtB1dKRBN2Rzt&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing graphics</title>
      <link>/content/14-content/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/14-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/proportional-ink.html&#34;&gt;Chapter 14&lt;/a&gt;, &lt;a href=&#34;https://serialmentor.com/dataviz/overlapping-points.html&#34;&gt;Chapter 15&lt;/a&gt;, &lt;a href=&#34;https://serialmentor.com/dataviz/color-pitfalls.html&#34;&gt;Chapter 16&lt;/a&gt;, &lt;a href=&#34;https://serialmentor.com/dataviz/avoid-line-drawings.html&#34;&gt;Chapter 22&lt;/a&gt;, and &lt;a href=&#34;https://serialmentor.com/dataviz/no-3d.html&#34;&gt;Chapter 23&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://socviz.co/refineplots.html&#34;&gt;Chapter 8&lt;/a&gt; in Kieran Healy, &lt;em&gt;Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Browse through recent visualizations at &lt;a href=&#34;https://pudding.cool/&#34;&gt;The Pudding&lt;/a&gt; (&lt;a href=&#34;https://pudding.cool/2018/08/pockets/&#34;&gt;like this one!&lt;/a&gt;), &lt;a href=&#34;https://fivethirtyeight.com/&#34;&gt;FiveThirtyEight&lt;/a&gt;, &lt;a href=&#34;https://www.vox.com/&#34;&gt;Vox&lt;/a&gt;, &lt;a href=&#34;https://www.washingtonpost.com/people/christopher-ingraham/?utm_term=.3bfc09eea703&#34;&gt;Christopher Ingraham‚Äôs articles at the Washington Post&lt;/a&gt;, &lt;a href=&#34;https://graphics.wsj.com/&#34;&gt;WSJ Graphics&lt;/a&gt;, and the &lt;a href=&#34;https://www.nytimes.com/section/upshot&#34;&gt;New York Times‚Äôs TheUpshot&lt;/a&gt;. Most (if not all) of these graphics were made in R (or something similar) and exported for enhancement in Illustrator or &lt;a href=&#34;https://d3js.org/&#34;&gt;D3&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/14-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/14-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;enhancing-graphics-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#enhancing-graphics&#34; role=&#34;tab&#34; aria-controls=&#34;enhancing-graphics&#34; aria-selected=&#34;true&#34;&gt;Enhancing graphics&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;enhancing-graphics&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;enhancing-graphics-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/14-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sFmumDMzu8ZXSo2zwLN5Q2H&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZnajGmnaC78&amp;amp;list=PLS6tnpTr39sFmumDMzu8ZXSo2zwLN5Q2H&#34;&gt;Enhancing graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sFmumDMzu8ZXSo2zwLN5Q2H&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Kieran Healy, &lt;em&gt;Data Visualization: A Practical Introduction&lt;/em&gt; (Princeton: Princeton University Press, 2018), &lt;a href=&#34;http://socviz.co/&#34; role=&#34;doc-biblioref&#34;&gt;http://socviz.co/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>/content/13-content/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/13-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Look through some of the chapters in Julia Silge and David Robinson, &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;&lt;em&gt;Tidy Text Mining&lt;/em&gt;&lt;/a&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; (but &lt;em&gt;definitely&lt;/em&gt; don‚Äôt read them all! You just need to get a taste of what modern text analysis looks like.)&lt;/li&gt;
&lt;li&gt;A bunch of (really) short things:
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Evangeline Reynolds, &lt;a href=&#34;https://evangelinereynolds.netlify.app/post/federalist-papers/&#34;&gt;‚ÄúFederalist Papers‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Julia Silge, &lt;a href=&#34;https://pudding.cool/2017/08/screen-direction/&#34;&gt;‚ÄúShe Giggles, He Gallops‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Abby Ohlheiser, &lt;a href=&#34;https://www.washingtonpost.com/news/the-intersect/wp/2016/05/28/these-are-the-words-most-associated-with-men-and-women-according-to-facebook-status-updates/&#34;&gt;‚ÄúThese are the words most associated with men and women, according to Facebook status updates‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://annkemery.com/qual-dataviz/&#34;&gt;Six Ideas for Displaying Qualitative Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.niemanlab.org/2011/10/word-clouds-considered-harmful/&#34;&gt;Word clouds considered harmful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2011/10/18/word-clouds-cause-death-or-something/&#34;&gt;Word clouds cause death‚Ä¶ or something&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.vis4.net/blog/2015/01/when-its-ok-to-use-word-clouds/&#34;&gt;When It‚Äôs Ok to Use Word Clouds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.nytimes.com/interactive/2011/06/10/education/commencement-speeches-graphic.html&#34;&gt;The Class of 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.vox.com/policy-and-politics/2018/9/28/17914308/kavanaugh-ford-question-dodge-hearing-chart&#34;&gt;Every time Ford and Kavanaugh dodged a question, in one chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-twitter-square&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/s_soroka/status/907941270735278085&#34;&gt;Tweet by @s_soroka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why is qualitative data difficult to visualize?&lt;/li&gt;
&lt;li&gt;Why are word clouds so problematic? When is (not) okay to use them?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/13-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/13-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;text-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#text&#34; role=&#34;tab&#34; aria-controls=&#34;text&#34; aria-selected=&#34;true&#34;&gt;Text&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;qualitative-textbased-data-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#qualitative-textbased-data&#34; role=&#34;tab&#34; aria-controls=&#34;qualitative-textbased-data&#34; aria-selected=&#34;false&#34;&gt;Qualitative text-based data&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;crash-course-in-computational-linguistics-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#crash-course-in-computational-linguistics&#34; role=&#34;tab&#34; aria-controls=&#34;crash-course-in-computational-linguistics&#34; aria-selected=&#34;false&#34;&gt;Crash course in computational linguistics&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;text&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;text-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/13-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;qualitative-textbased-data&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;qualitative-textbased-data-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/13-slides.html#text-data&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;crash-course-in-computational-linguistics&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;crash-course-in-computational-linguistics-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/13-slides.html#computational-linguistics&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sG6yMnZ9sDFwMPusGHGtOYj&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FEzCQ2k3zyI&amp;amp;list=PLS6tnpTr39sG6yMnZ9sDFwMPusGHGtOYj&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o6I49HotNOc&amp;amp;list=PLS6tnpTr39sG6yMnZ9sDFwMPusGHGtOYj&#34;&gt;Qualitative text-based data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Pdo7G9keXRM&amp;amp;list=PLS6tnpTr39sG6yMnZ9sDFwMPusGHGtOYj&#34;&gt;Crash course in computational linguistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sG6yMnZ9sDFwMPusGHGtOYj&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Julia Silge and David Robinson, &lt;em&gt;Text Mining with R&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2017), &lt;a href=&#34;https://www.tidytextmining.com/&#34; role=&#34;doc-biblioref&#34;&gt;https://www.tidytextmining.com/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Space</title>
      <link>/content/12-content/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/12-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapter 10 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://socviz.co/maps.html&#34;&gt;Chapter 7&lt;/a&gt; in Kieran Healy, &lt;em&gt;Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It looks like this is a lot of reading, but lots of these are short videos or tweets or interactive websites, so don‚Äôt worry!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=kIID5FDi2JQ&#34;&gt;Why all world maps are wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://thetruesize.com&#34;&gt;The True Size Of‚Ä¶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://xkcd.com/977/&#34;&gt;Map projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=vVX-PrBRtTY&#34;&gt;Gall-Peters Projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.citylab.com/design/2015/06/when-maps-lie/396761/&#34;&gt;‚ÄúWhen Maps Lie‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/neilrkaye/status/1050740679008296967&#34;&gt;Animated Mercator distortion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://newrepublic.com/article/115550/cartograms-are-important-inforgraphic-tool&#34;&gt;‚ÄúThese Twisted Maps Prove That America Isn‚Äôt a Red Country‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.fastcompany.com/90230916/the-next-great-fake-news-threat-bot-designed-maps&#34;&gt;‚ÄúThe next great fake news threat? Bot-designed maps‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.newsweek.com/equal-earth-map-continents-accurate-2d-1102404&#34;&gt;‚ÄúNew World Map That Accurately Shows Earth in 2D Created by Scientists‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How can you know if a map projection is truthful or misleading?&lt;/li&gt;
&lt;li&gt;What‚Äôs wrong (or not wrong) with using points on maps? Choropleths? Lines?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/12-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/12-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;space-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#space&#34; role=&#34;tab&#34; aria-controls=&#34;space&#34; aria-selected=&#34;true&#34;&gt;Space&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;maps-and-truth-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#maps-and-truth&#34; role=&#34;tab&#34; aria-controls=&#34;maps-and-truth&#34; aria-selected=&#34;false&#34;&gt;Maps and truth&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;putting-data-on-maps-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#putting-data-on-maps&#34; role=&#34;tab&#34; aria-controls=&#34;putting-data-on-maps&#34; aria-selected=&#34;false&#34;&gt;Putting data on maps&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;gis-in-r-with-sf-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#gis-in-r-with-sf&#34; role=&#34;tab&#34; aria-controls=&#34;gis-in-r-with-sf&#34; aria-selected=&#34;false&#34;&gt;GIS in R with sf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;space&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;space-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/12-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;maps-and-truth&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;maps-and-truth-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/12-slides.html#maps-truth&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-data-on-maps&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;putting-data-on-maps-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/12-slides.html#data-on-maps&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;gis-in-r-with-sf&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;gis-in-r-with-sf-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/12-slides.html#gis-sf&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sGd_PCE07nym2Df9120FW1U&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fOpsbd6-PzU&amp;amp;list=PLS6tnpTr39sGd_PCE07nym2Df9120FW1U&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=acP8mwyLNt0&amp;amp;list=PLS6tnpTr39sGd_PCE07nym2Df9120FW1U&#34;&gt;Maps and truth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OqKdU0qzfjA&amp;amp;list=PLS6tnpTr39sGd_PCE07nym2Df9120FW1U&#34;&gt;Putting data on maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qbrnzSRPyb0&amp;amp;list=PLS6tnpTr39sGd_PCE07nym2Df9120FW1U&amp;amp;&#34;&gt;GIS in R with sf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sGd_PCE07nym2Df9120FW1U&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Kieran Healy, &lt;em&gt;Data Visualization: A Practical Introduction&lt;/em&gt; (Princeton: Princeton University Press, 2018), &lt;a href=&#34;http://socviz.co/&#34; role=&#34;doc-biblioref&#34;&gt;http://socviz.co/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>/content/11-content/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/11-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#recommended&#34;&gt;Recommended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapter 8 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-video&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.fallen.io/shadow-peace/1/&#34;&gt;The Nuclear Threat‚ÄîThe Shadow Peace, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2010/01/07/11-ways-to-visualize-changes-over-time-a-guide/&#34;&gt;11 Ways to Visualize Changes Over Time ‚Äì A Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A bunch of (really) short blog posts:
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.wired.com/2010/11/ff_311_new_york/&#34;&gt;What a Hundred Million Calls to 311 Reveal About New York&lt;/a&gt; (just look at the picture; you don‚Äôt need to read this unless you‚Äôre really curious about trends in 311 calls)&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2012/04/12/a-century-of-ocean-shipping-animated/&#34;&gt;A century of ocean shipping animated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://junkcharts.typepad.com/junk_charts/2010/11/what-is-seasonal-adjustment-and-why-is-it-used.html&#34;&gt;What is seasonal adjustment and why is it used?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://junkcharts.typepad.com/junk_charts/2005/09/the_startatzero.html&#34;&gt;The start-at-zero rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://junkcharts.typepad.com/numbersruleyourworld/2011/02/keeping-ones-appetite-after-touring-the-sausage-factory.html&#34;&gt;Keeping one‚Äôs appetite after touring the sausage factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://thedailyviz.com/2016/09/17/how-common-is-your-birthday-dailyviz/&#34;&gt;How Common is Your Birthday? This Visualization Might Surprise You&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;recommended&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recommended&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-video&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.fallen.io/ww2/&#34;&gt;The Fallen of World War II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42901.pdf&#34;&gt;Visualizing Statistical Mix Effects and Simpson‚Äôs Paradox&lt;/a&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://how-to-fix-a-toilet.com/&#34;&gt;How To Fix a Toilet (And Other Things We Couldn‚Äôt Do Without Search)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When is it okay (or not) to truncate the y-axis?&lt;/li&gt;
&lt;li&gt;It is remarkably easy to mislead people with many of these chart types. Why? How can you avoid the same mistakes?&lt;/li&gt;
&lt;li&gt;All these types of charts are good at communicating change over time, but some are more appropriate in different situations. When is it best to use these different types (e.g.¬†line graphs vs.¬†area graphs vs.¬†horizon charts vs.¬†heatmaps, etc.)?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/11-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/11-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;time-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#time&#34; role=&#34;tab&#34; aria-controls=&#34;time&#34; aria-selected=&#34;true&#34;&gt;Time&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;axis-issues-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#axis-issues&#34; role=&#34;tab&#34; aria-controls=&#34;axis-issues&#34; aria-selected=&#34;false&#34;&gt;Axis issues&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;visualizing-time-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#visualizing-time&#34; role=&#34;tab&#34; aria-controls=&#34;visualizing-time&#34; aria-selected=&#34;false&#34;&gt;Visualizing time&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;starting-ending-and-decomposing-time-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#starting-ending-and-decomposing-time&#34; role=&#34;tab&#34; aria-controls=&#34;starting-ending-and-decomposing-time&#34; aria-selected=&#34;false&#34;&gt;Starting, ending, and decomposing time&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;time&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;time-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/11-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;axis-issues&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;axis-issues-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/11-slides.html#axis-issues&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-time&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;visualizing-time-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/11-slides.html#visualizing-time&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;starting-ending-and-decomposing-time&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;starting-ending-and-decomposing-time-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/11-slides.html#decomposing&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sG0DXT1Bvx0-hQkHrWBABa1&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nBVnR_bT8j0&amp;amp;list=PLS6tnpTr39sG0DXT1Bvx0-hQkHrWBABa1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yuBMJF0ncyI&amp;amp;list=PLS6tnpTr39sG0DXT1Bvx0-hQkHrWBABa1&#34;&gt;Axis issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EGTUsCjpAQw&amp;amp;list=PLS6tnpTr39sG0DXT1Bvx0-hQkHrWBABa1&#34;&gt;Visualizing time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xP6rvggkk9w&amp;amp;list=PLS6tnpTr39sG0DXT1Bvx0-hQkHrWBABa1&amp;amp;&#34;&gt;Starting, ending, and decomposing time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sG0DXT1Bvx0-hQkHrWBABa1&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Zan Armstrong and Martin Wattenberg, ‚ÄúVisualizing Statistical Mix Effects and Simpson‚Äôs Paradox,‚Äù in &lt;em&gt;Proceedings of IEEE InfoVis 2014&lt;/em&gt;, 2014, &lt;a href=&#34;https://research.google.com/pubs/pub42901.html&#34; role=&#34;doc-biblioref&#34;&gt;https://research.google.com/pubs/pub42901.html&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interactivity</title>
      <link>/content/10-content/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/10-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#explorable-explanations&#34;&gt;Explorable explanations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dashboards&#34;&gt;Dashboards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;div id=&#34;explorable-explanations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Explorable explanations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-trophy&#34;&gt;&lt;/i&gt; Marcel Salath√© and Nicky Case, &lt;a href=&#34;https://ncase.me/covid-19/&#34;&gt;‚ÄúWhat Happens Next: COVID-19 Futures, Explained with Playable Situations‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Brett Victor, &lt;a href=&#34;http://worrydream.com/ExplorableExplanations/&#34;&gt;‚ÄúExplorable Explanations‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-trophy&#34;&gt;&lt;/i&gt; Look at &lt;a href=&#34;https://explorabl.es/&#34;&gt;some of the explorable explorations here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Dragicevic, Jansen, Sarma, Kay, and Chevalier, &lt;a href=&#34;https://explorablemultiverse.github.io/&#34;&gt;‚ÄúExplorable Multiverse Analyses‚Äù&lt;/a&gt;. Use Chrome, open Example 1, scroll to page 2, and click on some of the blue text to change the results of the paper &lt;em&gt;within the paper itself&lt;/em&gt;. This is magical. R Markdown can‚Äôt quite get &lt;em&gt;this&lt;/em&gt; interactive in real-time, but you can knit different versions of a document with slightly different parameters and options.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;dashboards&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dashboards&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Look at &lt;a href=&#34;https://shiny.rstudio.com/gallery/&#34;&gt;some of these examples of Shiny apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Stephanie Evergreen, &lt;a href=&#34;https://stephanieevergreen.com/dashboard-conversation/&#34;&gt;‚ÄúHow a Dashboard Changes the Conversation‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Stephanie Evergreen, &lt;a href=&#34;https://stephanieevergreen.com/problem-with-dashboards/&#34;&gt;‚ÄúThe Problem with Dashboards (and a Solution)‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Stephen Few, &lt;a href=&#34;https://www.stephen-few.com/blog/2013/01/08/2012-perceptual-edge-dashboard-design-competition-a-solution-of-my-own/&#34;&gt;‚Äú2012 Perceptual Edge Dashboard Design Competition: A Solution of My Own‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Skim through Stephen Few‚Äôs &lt;a href=&#34;http://blogs.ischool.berkeley.edu/i247s12/files/2012/01/Dashboard-Design-Overview-Presentation.pdf&#34;&gt;presentation on Information Dashboard Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-google&#34;&gt;&lt;/i&gt; Google ‚Äúdashboard design‚Äù and skim through some of the thousands of articles about what makes a good (and bad) dashboard&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How helpful (or unhelpful) are explorable explanations?&lt;/li&gt;
&lt;li&gt;Have you seen examples of good dashboards before this class? Bad dashboards? What makes them good or bad?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/10-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/10-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;interactivity-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#interactivity&#34; role=&#34;tab&#34; aria-controls=&#34;interactivity&#34; aria-selected=&#34;true&#34;&gt;Interactivity&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;making-interactive-graphs-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#making-interactive-graphs&#34; role=&#34;tab&#34; aria-controls=&#34;making-interactive-graphs&#34; aria-selected=&#34;false&#34;&gt;Making interactive graphs&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;sharing-content-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#sharing-content&#34; role=&#34;tab&#34; aria-controls=&#34;sharing-content&#34; aria-selected=&#34;false&#34;&gt;Sharing content&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;interactivity&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;interactivity-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/10-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;making-interactive-graphs&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;making-interactive-graphs-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/10-slides.html#interactive-graphs&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sharing-content&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;sharing-content-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/10-slides.html#sharing-content&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sHxE_PbXWE2RC0mpN6syYhe&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=L6BGy0-0X-w&amp;amp;list=PLS6tnpTr39sHxE_PbXWE2RC0mpN6syYhe&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gyVFhQNCp80&amp;amp;list=PLS6tnpTr39sHxE_PbXWE2RC0mpN6syYhe&#34;&gt;Making interactive graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lubDKJhlx9g&amp;amp;list=PLS6tnpTr39sHxE_PbXWE2RC0mpN6syYhe&amp;amp;&#34;&gt;Sharing content&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sHxE_PbXWE2RC0mpN6syYhe&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>/content/09-content/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/09-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/redundant-coding.html&#34;&gt;Chapter 17&lt;/a&gt;, &lt;a href=&#34;https://serialmentor.com/dataviz/multi-panel-figures.html&#34;&gt;Chapter 18&lt;/a&gt;, &lt;a href=&#34;https://serialmentor.com/dataviz/figure-titles-captions.html&#34;&gt;Chapter 19&lt;/a&gt;, and &lt;a href=&#34;https://serialmentor.com/dataviz/small-axis-labels.html&#34;&gt;Chapter 21&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://socviz.co/workgeoms.html&#34;&gt;Chapter 5&lt;/a&gt; in Kieran Healy, &lt;em&gt;Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/09-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/09-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;annotations-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#annotations&#34; role=&#34;tab&#34; aria-controls=&#34;annotations&#34; aria-selected=&#34;true&#34;&gt;Annotations&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;fretting-the-little-things-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#fretting-the-little-things&#34; role=&#34;tab&#34; aria-controls=&#34;fretting-the-little-things&#34; aria-selected=&#34;false&#34;&gt;Fretting the little things&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;text-in-plots-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#text-in-plots&#34; role=&#34;tab&#34; aria-controls=&#34;text-in-plots&#34; aria-selected=&#34;false&#34;&gt;Text in plots&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;seeds-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#seeds&#34; role=&#34;tab&#34; aria-controls=&#34;seeds&#34; aria-selected=&#34;false&#34;&gt;Seeds&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;annotations&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;annotations-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/09-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;fretting-the-little-things&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;fretting-the-little-things-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/09-slides.html#little-things&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;text-in-plots&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;text-in-plots-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/09-slides.html#text&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;seeds&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;seeds-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/09-slides.html#seeds&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sG4NCNqLqHhIE7khPgrdRJD&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1c51k2tmjBI&amp;amp;list=PLS6tnpTr39sG4NCNqLqHhIE7khPgrdRJD&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6p4K5_6KU9k&amp;amp;list=PLS6tnpTr39sG4NCNqLqHhIE7khPgrdRJD&#34;&gt;Fretting the little things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fdR78oXb_fI&amp;amp;list=PLS6tnpTr39sG4NCNqLqHhIE7khPgrdRJD&amp;amp;&#34;&gt;Text in plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lV_Qak75E6I&amp;amp;list=PLS6tnpTr39sG4NCNqLqHhIE7khPgrdRJD&amp;amp;&#34;&gt;Seeds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sG4NCNqLqHhIE7khPgrdRJD&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Kieran Healy, &lt;em&gt;Data Visualization: A Practical Introduction&lt;/em&gt; (Princeton: Princeton University Press, 2018), &lt;a href=&#34;http://socviz.co/&#34; role=&#34;doc-biblioref&#34;&gt;http://socviz.co/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Comparisons</title>
      <link>/content/08-content/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/08-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reproducible-examples&#34;&gt;Reproducible examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/boxplots-violins.html&#34;&gt;Chapter 9&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Mike Bostock, &lt;a href=&#34;https://observablehq.com/@mbostock/methods-of-comparison-compared&#34;&gt;‚ÄúMethods of Comparison, Compared‚Äù&lt;/a&gt;. Explanation of the differences between showing relative differences, absolute differences, and log ratios.&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR&#34;&gt;Sparkline theory and practice&lt;/a&gt;. This is a collection of posts by Edward Tufte about sparklines‚Äîscroll down a ways and check out his examples, analysis, and critiques.&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/02-time-series-sparklines-2/&#34;&gt;Time series sparklines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://uc-r.github.io/lollipop&#34;&gt;Comparisons with lollipop charts&lt;/a&gt;. If you‚Äôre feeling adventurous (and you should!), do this tutorial as you read it.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;reproducible-examples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reproducible examples&lt;/h3&gt;
&lt;p&gt;Reprexes (or reproducible examples) are the best way to (1) get help online and (2) fix issues on your own.&lt;/p&gt;
&lt;p&gt;Making a good reprex is tricky, but it‚Äôs a very valuable skill to know (regardless of programming language!). Here are some helpful resources for making them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://community.rstudio.com/t/faq-whats-a-reproducible-example-reprex-and-how-do-i-do-one/5219&#34;&gt;What‚Äôs a reproducible example (&lt;code&gt;reprex&lt;/code&gt;) and how do I do one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.jessemaegan.com/post/so-you-ve-been-asked-to-make-a-reprex/&#34;&gt;So you‚Äôve been asked to make a reprex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-r-project&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://reprex.tidyverse.org/index.html&#34;&gt;The reprex package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;These readings all show a ton of new ways to present comparisons. Which ones are your favorite? Which ones didn‚Äôt quite click with you? In what situations are some more appropriate than others?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/08-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/08-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;comparisons-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#comparisons&#34; role=&#34;tab&#34; aria-controls=&#34;comparisons&#34; aria-selected=&#34;true&#34;&gt;Comparisons&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;visualizing-comparisons-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#visualizing-comparisons&#34; role=&#34;tab&#34; aria-controls=&#34;visualizing-comparisons&#34; aria-selected=&#34;false&#34;&gt;Visualizing comparisons&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;reproducible-examples-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#reproducible-examples&#34; role=&#34;tab&#34; aria-controls=&#34;reproducible-examples&#34; aria-selected=&#34;false&#34;&gt;Reproducible examples&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;comparisons&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;comparisons-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/08-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-comparisons&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;visualizing-comparisons-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/08-slides.html#comparisons&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducible-examples&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;reproducible-examples-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/08-slides.html#reprex&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sGAoxtYY1GgHm2ZRQmWeTiP&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pwvPAnjEHKk&amp;amp;list=PLS6tnpTr39sGAoxtYY1GgHm2ZRQmWeTiP&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iJOPwPYxZZE&amp;amp;list=PLS6tnpTr39sGAoxtYY1GgHm2ZRQmWeTiP&#34;&gt;Visualizing comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Gv1U8IPxiOY&amp;amp;list=PLS6tnpTr39sGAoxtYY1GgHm2ZRQmWeTiP&amp;amp;&#34;&gt;Reproducible examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sGAoxtYY1GgHm2ZRQmWeTiP&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relationships</title>
      <link>/content/07-content/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/07-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#recommended&#34;&gt;Recommended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapter 9 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/visualizing-associations.html&#34;&gt;Chapter 12&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Kieran Healy, &lt;a href=&#34;https://kieranhealy.org/blog/archives/2016/01/16/two-y-axes/&#34;&gt;‚ÄúTwo y-axes‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://stephanieevergreen.com/two-alternatives-to-using-a-second-y-axis/&#34;&gt;Two Alternatives to Using a Second Y-Axis&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://junkcharts.typepad.com/junk_charts/2006/06/illusion_of_suc.html&#34;&gt;Illusion of success&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://junkcharts.typepad.com/junk_charts/2006/01/dissecting_two_.html&#34;&gt;Dissecting two axes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.perceptualedge.com/articles/visual_business_intelligence/dual-scaled_axes.pdf&#34;&gt;Dual-Scaled Axes in Graphs: Are They Ever the Best Solution?&lt;/a&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;recommended&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recommended&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.lri.fr/~isenberg/publications/papers/Isenberg_2011_ASO.pdf&#34;&gt;‚ÄúA Study on Dual-Scale Data Charts‚Äù&lt;/a&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How can you correctly and honestly communicate relationships between variables? How can you communicate the uncertainty in those relationships?&lt;/li&gt;
&lt;li&gt;What are the dangers of visualizing two variables?&lt;/li&gt;
&lt;li&gt;When is it appropriate to use two y-axes?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/07-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/07-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;relationships-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#relationships&#34; role=&#34;tab&#34; aria-controls=&#34;relationships&#34; aria-selected=&#34;true&#34;&gt;Relationships&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;the-dangers-of-dual-yaxes-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#the-dangers-of-dual-yaxes&#34; role=&#34;tab&#34; aria-controls=&#34;the-dangers-of-dual-yaxes&#34; aria-selected=&#34;false&#34;&gt;The dangers of dual y-axes&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;visualizing-correlations-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#visualizing-correlations&#34; role=&#34;tab&#34; aria-controls=&#34;visualizing-correlations&#34; aria-selected=&#34;false&#34;&gt;Visualizing correlations&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;visualizing-regressions-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#visualizing-regressions&#34; role=&#34;tab&#34; aria-controls=&#34;visualizing-regressions&#34; aria-selected=&#34;false&#34;&gt;Visualizing regressions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;relationships&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;relationships-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/07-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-dangers-of-dual-yaxes&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;the-dangers-of-dual-yaxes-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/07-slides.html#dual-y-axes&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-correlations&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;visualizing-correlations-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/07-slides.html#correlations&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-regressions&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;visualizing-regressions-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/07-slides.html#regression&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sGarIxAwCcmheAoKaLRGy1j&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GnsuXEI3KoI&amp;amp;list=PLS6tnpTr39sGarIxAwCcmheAoKaLRGy1j&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fhlbFgo5UQU&amp;amp;list=PLS6tnpTr39sGarIxAwCcmheAoKaLRGy1j&amp;amp;&#34;&gt;The dangers of dual y-axes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=emMc3qtw3z0&amp;amp;list=PLS6tnpTr39sGarIxAwCcmheAoKaLRGy1j&#34;&gt;Visualizing correlations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FsnM8e6P71g&amp;amp;list=PLS6tnpTr39sGarIxAwCcmheAoKaLRGy1j&#34;&gt;Visualizing regressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sGarIxAwCcmheAoKaLRGy1j&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Stephen Few, ‚ÄúDual-Scaled Axes in Graphs: Are They Ever the Best Solution?‚Äù &lt;em&gt;Visual Business Intelligence Newsletter&lt;/em&gt;, March 2008, &lt;a href=&#34;http://www.perceptualedge.com/articles/visual_business_intelligence/dual-scaled_axes.pdf&#34; role=&#34;doc-biblioref&#34;&gt;http://www.perceptualedge.com/articles/visual_business_intelligence/dual-scaled_axes.pdf&lt;/a&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;Petra Isenberg et al., ‚ÄúA Study on Dual-Scale Data Charts,‚Äù &lt;em&gt;IEEE Transactions on Visualization and Computer Graphics&lt;/em&gt; 17, no. 12 (2011): 2469‚Äì78, doi:&lt;a href=&#34;https://doi.org/10.1109/tvcg.2011.160&#34; role=&#34;doc-biblioref&#34;&gt;10.1109/tvcg.2011.160&lt;/a&gt;.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Uncertainty</title>
      <link>/content/06-content/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/06-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/histograms-density-plots.html&#34;&gt;Chapter 7&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapters 4, 7, and 11 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://hbr.org/2016/11/why-its-so-hard-for-us-to-visualize-uncertainty&#34;&gt;Why It‚Äôs So Hard for Us to Visualize Uncertainty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0L1tGo-DvD0&#34;&gt;Amanda Cox‚Äôs keynote address at the 2017 OpenVis Conf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://eagereyes.org/blog/2017/communicating-uncertainty-when-lives-are-on-the-line&#34;&gt;Communicating Uncertainty When Lives Are on the Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2016/11/15/showing-uncertainty-during-the-live-election-forecast/&#34;&gt;Showing uncertainty during the live election forecast&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://flowingdata.com/2017/06/27/trolling-the-uncertainty-dial/&#34;&gt;Trolling the uncertainty dial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why is it important to deal with uncertainty in data?&lt;/li&gt;
&lt;li&gt;What was good or bad about the New York Times‚Äô 2016 live election guage?&lt;/li&gt;
&lt;li&gt;Why is it so hard to visualize uncertainty?&lt;/li&gt;
&lt;li&gt;Why is it so hard to communicate uncertainty to others?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/06-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/06-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;uncertainty-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#uncertainty&#34; role=&#34;tab&#34; aria-controls=&#34;uncertainty&#34; aria-selected=&#34;true&#34;&gt;Uncertainty&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;communicating-uncertainty-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#communicating-uncertainty&#34; role=&#34;tab&#34; aria-controls=&#34;communicating-uncertainty&#34; aria-selected=&#34;false&#34;&gt;Communicating uncertainty&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;visualizing-uncertainty-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#visualizing-uncertainty&#34; role=&#34;tab&#34; aria-controls=&#34;visualizing-uncertainty&#34; aria-selected=&#34;false&#34;&gt;Visualizing uncertainty&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;uncertainty&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;uncertainty-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/06-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;communicating-uncertainty&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;communicating-uncertainty-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/06-slides.html#communicating&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-uncertainty&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;visualizing-uncertainty-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/06-slides.html#visualizing&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sFmy596lUElQakCrKDSHUUU&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eZTp8Hninv4&amp;amp;list=PLS6tnpTr39sFmy596lUElQakCrKDSHUUU&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TCQwkwlj4kM&amp;amp;list=PLS6tnpTr39sFmy596lUElQakCrKDSHUUU&amp;amp;&#34;&gt;Communicating uncertainty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X6zPEOPo-2M&amp;amp;list=PLS6tnpTr39sFmy596lUElQakCrKDSHUUU&#34;&gt;Visualizing uncertainty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sFmy596lUElQakCrKDSHUUU&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>/content/05-content/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/05-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/figure-titles-captions.html&#34;&gt;Chapter 22&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.forbes.com/sites/naomirobbins/2012/02/22/are-grid-lines-useful-or-chartjunk/#3b49a4044283&#34;&gt;Naomi Robbins, ‚ÄúAre Grid Lines Useful or Chartjunk?‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.perceptualedge.com/articles/dmreview/grid_lines.pdf&#34;&gt;Stephen Few, ‚ÄúGrid Lines in Graphs are Rarely Useful‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://henrywang.nl/ggplot2-theme-elements-demonstration/&#34;&gt;Henry Wang, ‚Äúggplot2 Theme Elements Demonstration‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; Glance through the documentation for ggplot‚Äôs &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/ggtheme.html&#34;&gt;complete themes&lt;/a&gt; and &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;&lt;code&gt;theme()&lt;/code&gt;&lt;/a&gt;, especially the examples near the bottom&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How do the principles of CRAP apply to graph design and other theme elements?&lt;/li&gt;
&lt;li&gt;Should plots use gridlines? Naomi Robbins says yes; Stephen Few says no‚Äîwhat do you say?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/05-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/05-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;themes-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#themes&#34; role=&#34;tab&#34; aria-controls=&#34;themes&#34; aria-selected=&#34;true&#34;&gt;Themes&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;crap-and-ggplot-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#crap-and-ggplot&#34; role=&#34;tab&#34; aria-controls=&#34;crap-and-ggplot&#34; aria-selected=&#34;false&#34;&gt;CRAP and ggplot&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;the-anatomy-of-a-ggplot-theme-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#the-anatomy-of-a-ggplot-theme&#34; role=&#34;tab&#34; aria-controls=&#34;the-anatomy-of-a-ggplot-theme&#34; aria-selected=&#34;false&#34;&gt;The anatomy of a ggplot theme&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;themes&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;themes-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/05-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;crap-and-ggplot&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;crap-and-ggplot-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/05-slides.html#crap-ggplot&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-anatomy-of-a-ggplot-theme&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;the-anatomy-of-a-ggplot-theme-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/05-slides.html#anatomy&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sEsSJ16BKgXPNFcl3y6gjEv&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=s9YBf8Rf21s&amp;amp;list=PLS6tnpTr39sEsSJ16BKgXPNFcl3y6gjEv&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BQ3wRMAMeBQ&amp;amp;list=PLS6tnpTr39sEsSJ16BKgXPNFcl3y6gjEv&amp;amp;&#34;&gt;CRAP and ggplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V0CzheP9yMc&amp;amp;list=PLS6tnpTr39sEsSJ16BKgXPNFcl3y6gjEv&#34;&gt;The anatomy of a ggplot theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sEsSJ16BKgXPNFcl3y6gjEv&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Amounts and proportions</title>
      <link>/content/04-content/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/04-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#recommended&#34;&gt;Recommended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/visualizing-amounts.html&#34;&gt;Chapter 6&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapter 6 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/visualizing-proportions.html&#34;&gt;Chapter 10&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://eagereyes.org/blog/2008/engaging-readers-with-square-pie-waffle-charts&#34;&gt;Engaging Readers with Square Pie/Waffle Charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://eagereyes.org/techniques/pie-charts&#34;&gt;Understanding Pie Charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://flowingdata.com/2016/07/15/square-pie-chart-beats-out-the-rest-in-perception-study/&#34;&gt;Square pie chart beats out the rest in perception study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-twitter&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/janinegibson/status/1244519429825802240&#34;&gt;Twitter thread&lt;/a&gt; from John Burn-Murdoch on why the &lt;em&gt;Financial Times&lt;/em&gt; uses log scales in their COVID-19 tracking charts&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-twitter&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1238914490772701185&#34;&gt;Tweet&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1242904596856614912&#34;&gt;Twitter thread&lt;/a&gt; from John Burn-Murdoch on why the &lt;em&gt;Financial Times&lt;/em&gt; doesn‚Äôt use population-adjusted numbers in their COVID-19 tracking charts&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-twitter&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/janinegibson/status/1244519429825802240&#34;&gt;Video from the &lt;em&gt;Financial Times&lt;/em&gt; about the design decisions behind their COVID-19 tracking charts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;recommended&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recommended&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://robjhyndman.com/hyndsight/logratios-covid19/&#34;&gt;See how to create your own COVID-19 tracking chart with R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How do these types of visualizations help or hinder our search for truth in data?&lt;/li&gt;
&lt;li&gt;What do you think of the &lt;em&gt;Financial Times&lt;/em&gt; explanations of their use of absolute numbers (not per capita numbers) and log scales (not regular scales)? How have these decisions affected your perception of the pandemic? How have they affected others‚Äô perceptions?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/04-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/04-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;amounts-and-proportions-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#amounts-and-proportions&#34; role=&#34;tab&#34; aria-controls=&#34;amounts-and-proportions&#34; aria-selected=&#34;true&#34;&gt;Amounts and proportions&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;reproducibility-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#reproducibility&#34; role=&#34;tab&#34; aria-controls=&#34;reproducibility&#34; aria-selected=&#34;false&#34;&gt;Reproducibility&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;amounts-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#amounts&#34; role=&#34;tab&#34; aria-controls=&#34;amounts&#34; aria-selected=&#34;false&#34;&gt;Amounts&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;proportions-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#proportions&#34; role=&#34;tab&#34; aria-controls=&#34;proportions&#34; aria-selected=&#34;false&#34;&gt;Proportions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;amounts-and-proportions&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;amounts-and-proportions-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/04-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducibility&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;reproducibility-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/04-slides.html#reproducibility&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;amounts&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;amounts-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/04-slides.html#amounts&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;proportions&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;proportions-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/04-slides.html#proportions&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sEdnMYtNP3U3C2AsQZycEyP&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=K8wELKhqgn0&amp;amp;list=PLS6tnpTr39sEdnMYtNP3U3C2AsQZycEyP&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pBpNaopKCVw&amp;amp;list=PLS6tnpTr39sEdnMYtNP3U3C2AsQZycEyP&amp;amp;&#34;&gt;Reproducibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5riA81CcHOY&amp;amp;list=PLS6tnpTr39sEdnMYtNP3U3C2AsQZycEyP&#34;&gt;Amounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3rDH0BWeDIQ&amp;amp;list=PLS6tnpTr39sEdnMYtNP3U3C2AsQZycEyP&#34;&gt;Proportions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sEdnMYtNP3U3C2AsQZycEyP&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping data to graphics</title>
      <link>/content/03-content/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/03-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; Hans Rosling, &lt;a href=&#34;https://www.youtube.com/watch?v=jbkSRLYSojo&#34;&gt;‚Äú200 Countries, 200 Years, 4 Minutes‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/aesthetic-mapping.html&#34;&gt;Chapter 2&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://socviz.co/makeplot.html&#34;&gt;Chapter 3&lt;/a&gt; in Kieran Healy, &lt;em&gt;Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why is it important to visualize variables and data?&lt;/li&gt;
&lt;li&gt;What does it mean to map data to graph aesthetics?&lt;/li&gt;
&lt;li&gt;What data was mapped to which aesthetics in Rosling‚Äôs video?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/03-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/03-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;mapping-data-to-graphics-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#mapping-data-to-graphics&#34; role=&#34;tab&#34; aria-controls=&#34;mapping-data-to-graphics&#34; aria-selected=&#34;true&#34;&gt;Mapping data to graphics&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;data-aesthetics--the-grammar-of-graphics-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#data-aesthetics--the-grammar-of-graphics&#34; role=&#34;tab&#34; aria-controls=&#34;data-aesthetics--the-grammar-of-graphics&#34; aria-selected=&#34;false&#34;&gt;Data, aesthetics, &amp;amp; the grammar of graphics&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;grammatical-layers-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#grammatical-layers&#34; role=&#34;tab&#34; aria-controls=&#34;grammatical-layers&#34; aria-selected=&#34;false&#34;&gt;Grammatical layers&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;aesthetics-in-extra-dimensions-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#aesthetics-in-extra-dimensions&#34; role=&#34;tab&#34; aria-controls=&#34;aesthetics-in-extra-dimensions&#34; aria-selected=&#34;false&#34;&gt;Aesthetics in extra dimensions&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;tidy-data-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#tidy-data&#34; role=&#34;tab&#34; aria-controls=&#34;tidy-data&#34; aria-selected=&#34;false&#34;&gt;Tidy data&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;mapping-data-to-graphics&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;mapping-data-to-graphics-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/03-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-aesthetics--the-grammar-of-graphics&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;data-aesthetics--the-grammar-of-graphics-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/03-slides.html#grammar-of-graphics&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;grammatical-layers&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;grammatical-layers-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/03-slides.html#grammatical-layers&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;aesthetics-in-extra-dimensions&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;aesthetics-in-extra-dimensions-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/03-slides.html#extra-dimensions&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tidy-data&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;tidy-data-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/03-slides.html#tidy-data&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ukDGvD3XXHg&amp;amp;list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=S56YAocj-hk&amp;amp;list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&amp;amp;&#34;&gt;Data, aesthetics, and the grammar of graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DVr8ubJ7JHk&amp;amp;list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&#34;&gt;Grammatical layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pfYkWZcTHAM&amp;amp;list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&#34;&gt;Aesthetics in extra dimensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KHpZ1oa_99g&amp;amp;list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&#34;&gt;Tidy data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sF-mpzuaQaDw5VoOgp359Z9&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Kieran Healy, &lt;em&gt;Data Visualization: A Practical Introduction&lt;/em&gt; (Princeton: Princeton University Press, 2018), &lt;a href=&#34;http://socviz.co/&#34; role=&#34;doc-biblioref&#34;&gt;http://socviz.co/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphic design</title>
      <link>/content/02-content/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>/content/02-content/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34;&gt;Readings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#questions-to-reflect-on&#34;&gt;Questions to reflect on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; Chapter 5 in Alberto Cairo, &lt;em&gt;The Truthful Art&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://serialmentor.com/dataviz/color-basics.html&#34;&gt;Chapter 4&lt;/a&gt; and &lt;a href=&#34;https://serialmentor.com/dataviz/image-file-formats.html&#34;&gt;Chapter 22&lt;/a&gt; in Claus Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt;&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; &lt;a href=&#34;http://www.presentationzen.com/chapter6_spread.pdf&#34;&gt;Summary of CRAP graphic design principles&lt;/a&gt; from Garr Reynolds, &lt;em&gt;Presentation Zen&lt;/em&gt;.&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; These principles are from Robin Williams‚Äô &lt;a href=&#34;https://www.amazon.com/Non-Designers-Design-Book-4th/dp/0133966151&#34;&gt;&lt;em&gt;The Non-Designer‚Äôs Design &amp;amp; Type Books&lt;/em&gt;&lt;/a&gt;,&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; which you should really get if you‚Äôre interested in doing anything design-related ever. Her stuff is life-changing.&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://practicaltypography.com/typography-in-ten-minutes.html&#34;&gt;Typography in ten minutes&lt;/a&gt;. The rest of the &lt;em&gt;Practical Typography&lt;/em&gt; book is phenomenal and you‚Äôd be remiss if you didn‚Äôt read the whole thing and bookmark it for life, but for now just read this quick summary.&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://gizmodo.com/5656669/whats-the-difference-between-jpg-png-and-gif&#34;&gt;‚ÄúWhat‚Äôs the Difference Between JPG, PNG, and GIF?‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.theglowstudio.com/file-formats-explained/&#34;&gt;‚ÄúFile formats explained‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;questions-to-reflect-on&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Questions to reflect on&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why does graphic design matter when conveying truth?&lt;/li&gt;
&lt;li&gt;What makes something well designed (vs.¬†poorly designed)?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today‚Äôs lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/02-slides.html&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt; View all slides in new window&lt;/a&gt; &lt;a class=&#34;btn btn-primary btn-lg&#34; target=&#34;_blank&#34; href=&#34;/slides/02-slides.pdf&#34; role=&#34;button&#34;&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt; Download PDF of all slides&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&#34;nav nav-tabs&#34; id=&#34;slide-tabs&#34; role=&#34;tablist&#34;&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link active&#34; id=&#34;graphic-design-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#graphic-design&#34; role=&#34;tab&#34; aria-controls=&#34;graphic-design&#34; aria-selected=&#34;true&#34;&gt;Graphic design&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;truth-beauty-stories-design-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#truth-beauty-stories-design&#34; role=&#34;tab&#34; aria-controls=&#34;truth-beauty-stories-design&#34; aria-selected=&#34;false&#34;&gt;Truth, beauty, stories, design&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;graphic-design-and-crap-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#graphic-design-and-crap&#34; role=&#34;tab&#34; aria-controls=&#34;graphic-design-and-crap&#34; aria-selected=&#34;false&#34;&gt;Graphic design and CRAP&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;contrast-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#contrast&#34; role=&#34;tab&#34; aria-controls=&#34;contrast&#34; aria-selected=&#34;false&#34;&gt;Contrast&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;repetition-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#repetition&#34; role=&#34;tab&#34; aria-controls=&#34;repetition&#34; aria-selected=&#34;false&#34;&gt;Repetition&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;alignment-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#alignment&#34; role=&#34;tab&#34; aria-controls=&#34;alignment&#34; aria-selected=&#34;false&#34;&gt;Alignment&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;proximity-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#proximity&#34; role=&#34;tab&#34; aria-controls=&#34;proximity&#34; aria-selected=&#34;false&#34;&gt;Proximity&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;
&lt;a class=&#34;nav-link&#34; id=&#34;image-types-tab&#34; data-toggle=&#34;tab&#34; href=&#34;#image-types&#34; role=&#34;tab&#34; aria-controls=&#34;image-types&#34; aria-selected=&#34;false&#34;&gt;Image types&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;slide-tabs&#34; class=&#34;tab-content&#34;&gt;
&lt;div id=&#34;graphic-design&#34; class=&#34;tab-pane fade show active&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;graphic-design-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;truth-beauty-stories-design&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;truth-beauty-stories-design-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#truth-beauty-design&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;graphic-design-and-crap&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;graphic-design-and-crap-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#design-crap&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;contrast&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;contrast-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#contrast&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;repetition&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;repetition-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#repetition&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;alignment&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;alignment-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#alignment&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;proximity&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;proximity-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#proximity&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;image-types&#34; class=&#34;tab-pane fade&#34; role=&#34;tabpanel&#34; aria-labelledby=&#34;image-types-tab&#34;&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;/slides/02-slides.html#image-types&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: If you type &lt;kbd&gt;?&lt;/kbd&gt; (or &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;) while going through the slides, you can see a list of special slide-specific commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;videos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;p&gt;Videos for each section of the lecture are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLS6tnpTr39sEznTwka0EmWfkkphjncq7U&#34;&gt;available at this YouTube playlist&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ny7HYqyVNp4&amp;amp;list=PLS6tnpTr39sEznTwka0EmWfkkphjncq7U&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SXW0RtenLgk&amp;amp;list=PLS6tnpTr39sEznTwka0EmWfkkphjncq7U&amp;amp;&#34;&gt;Truth, beauty, stories, design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iuEwh2EnIcw&amp;amp;list=PLS6tnpTr39sEznTwka0EmWfkkphjncq7U&#34;&gt;Graphic design and CRAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j0aqBmRV66A&amp;amp;list=PLS6tnpTr39sEznTwka0EmWfkkphjncq7U&#34;&gt;Image types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also watch the playlist (and skip around to different sections) here:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/videoseries?list=PLS6tnpTr39sEznTwka0EmWfkkphjncq7U&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O‚ÄôReilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Garr Reynolds, &lt;em&gt;Presentation Zen: Simple Ideas on Presentation Design and Delivery&lt;/em&gt;, 1st ed. (Berkeley, California: New Riders, 2008).&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;Robin Williams, &lt;em&gt;The Non-Designer‚Äôs Design &amp;amp; Type Books: Design and Typographic Principles for the Visual Novice&lt;/em&gt;, Deluxe Edition (Berkeley, California: Peachpit Press, 2008).&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/authors/ben/_index-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/authors/ben/_index-2/</guid>
      <description>&lt;p&gt;Andrew Heiss is an assistant professor at the Andrew Young School of Policy Studies at Georgia State University, researching international NGOs and teaching data science, program evaluation, and economics.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schedule</title>
      <link>/schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/schedule/</guid>
      <description>


&lt;p&gt;Below is a roadmap for the semester. Note that this will inevitably change from the first day you access this course. However, whatever is listed below should be considered canon.&lt;/p&gt;
&lt;p&gt;As mentioned in the syllabus, the course is structured by each week. Every week has three important sections.&lt;/p&gt;
&lt;div id=&#34;ab-structure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A/B Structure&lt;/h3&gt;
&lt;p&gt;The class is structured by dividing the student roster into two subsets, forming a ‚ÄúTuesday‚Äù group and a ‚ÄúThursday‚Äù group. Your assigned group dictates when you come to class. In class, we will have a short, practical lecture and an activity which is designed to give you hands-on experience and give you a greater understanding of the broader material. Out of class, you will complete readings and will watch (short) recorded lectures on the week‚Äôs topic. Each week is intended to be self contained ‚Äî the fact you are doing something on Tuesday rather than Thursday or vice versa will not hurt you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/content/&#34;&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-book-reader&#34;&gt;&lt;/i&gt;): This page contains the readings and recorded lectures for the topic. These pages should be read completely. Video lectures are &lt;em&gt;not&lt;/em&gt; an exact replication of the written content. On the contrary, the video lectures are intended to keep you focused on the high-level ideas. Accordingly, they are shorter than the (often quite lengthy) written content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/example/&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-laptop-code&#34;&gt;&lt;/i&gt;): This page contains &lt;code&gt;R&lt;/code&gt; code that we will discuss in class. In addition to teaching specific content, these examples are intended as a useful reference to various functions that you will need on weekly labs and in your group project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/assignment/&#34;&gt;&lt;strong&gt;Labs&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-pencil-ruler&#34;&gt;&lt;/i&gt;): This page contains the instructions for either the Lab (1‚Äì3 brief tasks), or for the two mini projects and final project. &lt;strong&gt;Assignments are due by 11:59 PM (Eastern) on the Monday after they‚Äôre posted.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: You should follow this general process (in order) each week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do everything on the content (&lt;i class=&#34;fas fa-book-reader&#34;&gt;&lt;/i&gt;) page&lt;/li&gt;
&lt;li&gt;Come to class on your assigned day&lt;/li&gt;
&lt;li&gt;Once in class, work through the example (&lt;i class=&#34;fas fa-laptop-code&#34;&gt;&lt;/i&gt;) page&lt;/li&gt;
&lt;li&gt;Complete the lab (&lt;i class=&#34;fas fa-pencil-ruler&#34;&gt;&lt;/i&gt;) before the next week.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;table class=&#34;table schedule&#34; style=&#34;max-width:100%&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Programming Foundations&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 0&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;(Re-) Introduction to R&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/00-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/00-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/01-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 1&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Programming Basics, the tidyverse, and Visualization&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/01-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/01-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/01-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 2&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Visualization II&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/01-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/01-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/01-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Data Analysis Foundations&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 3&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Probability and Statistics in R&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/04-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/04-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/04-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 4&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Introduction to Learning from Data&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/04-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/04-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/04-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 5&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Linear Regression I&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/05-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/05-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/05-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;End of Week 6&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt; &lt;strong&gt;Project 1 Due&lt;/strong&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/01-mini-project/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 6&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Linear Regression II&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/06-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/06-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/06-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Applications of Data Analysis&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 7&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Non-Parametric Regression&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/07-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/07-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/07-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 8&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Bias vs Variance&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/07-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/07-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/07-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 9&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Model Selection&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/08-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/08-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/08-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 10&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Classification&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/09-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/09-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/09-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;End of Week 10&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt; &lt;strong&gt;Project 2 Due&lt;/strong&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/02-mini-project/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 11&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Applied Classification&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/09-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/09-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/09-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Further Extensions&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 12&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;The caret Package&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/10-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/10-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/10-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Week 13&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Wrangling (Large) Data&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/11-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/example/11-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/11-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Conclusions&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Finals Week&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Concluding Thoughts&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;/content/15-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;Final Exam&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt; &lt;strong&gt;Final Project Due&lt;/strong&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;/assignment/final-project/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;

    &lt;/tbody&gt;

&lt;/table&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>/syllabus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/syllabus/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-this-course-and-can-should-you-take-it&#34;&gt;What is This Course and Can / Should You Take It?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-this-course-is-not&#34;&gt;What This Course is Not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#success-in-this-course&#34;&gt;Success in this Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#course-materials&#34;&gt;Course materials&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-and-rstudio&#34;&gt;R and RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#online-help&#34;&gt;Online help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#evaluations-and-grades&#34;&gt;Evaluations and Grades&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#academic-honesty&#34;&gt;Academic honesty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#covid-19&#34;&gt;COVID-19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscellanea&#34;&gt;Miscellanea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#contacting-me&#34;&gt;Contacting Me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
        &lt;h3&gt;Instructor&lt;/h3&gt;

        &lt;ul class=&#34;icon-list&#34;&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-user&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.benbushong.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Prof. Ben Bushong&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-university&#34;&gt;&lt;/i&gt; 25A Marshall-Adams Hall&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-envelope&#34;&gt;&lt;/i&gt; &lt;a href=&#34;mailto:bbushong@msu.edu&#34;&gt; bbushong@msu.edu&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fab fa-twitter&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/benbushong&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; @benbushong&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-calendar-check&#34;&gt;&lt;/i&gt; &lt;a href=&#34;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Schedule an appointment&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div class=&#34;col-md-4&#34;&gt;
        &lt;h3&gt;Course details&lt;/h3&gt;

        &lt;ul class=&#34;icon-list&#34;&gt;
            &lt;li&gt;&lt;i class=&#34;far fa-calendar&#34;&gt;&lt;/i&gt; Tuesday and Thursday&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;far fa-calendar-alt&#34;&gt;&lt;/i&gt; September ‚Äì December, 2020&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;far fa-clock&#34;&gt;&lt;/i&gt; 10:20 - 11:40 AM&lt;/li&gt;
            
            &lt;li&gt;&lt;i class=&#34;fab fa-slack&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://ssc442.slack.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div class=&#34;col-md-4 contact-policy&#34;&gt;
        &lt;h3&gt;Contacting me&lt;/h3&gt;

        &lt;p&gt;Please consider whether your question is short and concrete; if so, feel free to email me. If your question is deep, vague, interesting, or otherwise complex, please come to office hours or we can discuss in class. See syllabus for details.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;what-is-this-course-and-can-should-you-take-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is This Course and Can / Should You Take It?&lt;/h2&gt;
&lt;p&gt;Innovations in statistical learning have created many engineering breakthroughs. From real time voice recognition to automatic categorization (and in some cases production) of news stories, machine learning is transforming the way we live our lives. These techniques are, at their heart, novel ways to work with data, and therefore they should have implications for social science. This course explores the intersection of statistical learning (or machine learning) and social science and aims to answer two primary questions about these new techniques:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-roman&#34;&gt;
&lt;li&gt;&lt;p&gt;How does statistical learning work and what kinds of statistical guarantees can be made about the performance of statistical-learning algorithms?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can statistical learning be used to answer questions that interest social science researchers, such as testing theories or improving social policy?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to address these questions, we will cover so-called ‚Äústandard‚Äù techniques such as supervised and unsupervised learning, statistical learning theory and nonparametric and Bayesian approaches. If it were up to me, this course would be titled ‚ÄúStatistical Learning for Social Scientists‚Äù‚ÄîI believe this provides a more appropriate guide to the content of this course. And while this class will cover these novel statistical methodologies in some detail, it is not a substitute for the appropriate class in Computer Science or Statistics. Nor is this a class that teaches specific skills for the job market. Rather, this class will teach you to think about data analytics broadly. We will spend a great deal of time learning how to interpret the output of statistical learning algorithms and approaches, and will also spend a great deal of time on better understanding the basic ideas in statistical learning. This, of course, comes at some cost in terms of time spent on learning computational and/or programming skills.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enrollment for credit in this course is simply not suitable for those unprepared in or uninterested in elementary statistical theory no matter the intensity of interest in machine learning or ‚ÄúBig Data‚Äù. Really.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You will be required to understand elementary mathematics in this course and should have at least some exposure to statistical theory. The class is front-loaded technically: early lectures are more mathematically oriented, while later lectures are more applied.&lt;/p&gt;
&lt;p&gt;The topics covered in this course are listed later in this document. I will assign readings sparingly from &lt;a href=&#34;http://faculty.marshall.usc.edu/gareth-james/ISL/ISLR%20Seventh%20Printing.pdf&#34;&gt;Introduction to Statistical Learning&lt;/a&gt;, henceforth referred to as ISL. This text is available for free online and, for those who like physical books, can be purchased for about $25. Importantly, the lectures deviate a fair bit from the reading, and thus you will rely on your course notes much more than you might in other classes.&lt;/p&gt;
&lt;p&gt;If‚Äîafter you have read this document and preferably after attending the first lecture‚Äîyou have any questions about whether this course is appropriate for you, please come talk to me. Anybody is permitted to attend the lectures and I am delighted if people can benefit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-this-course-is-not&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What This Course is Not&lt;/h2&gt;
&lt;p&gt;The focus of this course is conceptual. The goal is to create a working understanding of when and how tools from computer science and statistics can be profitably applied to problems in social science. Though students will be required to apply some of these techniques themselves, this course is not‚Ä¶&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚Ä¶a replacement for EC420 or a course in causal inference.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As social scientists, we are most often concerned with causal inference in order to analyze and write policies. Statistical learning and the other methods we will discuss in this course are generally not well-suited to these problems, and while I‚Äôll give a short overview of standard methods, this is only to build intuitions. Ultimately, this course has a different focus and you should still pursue standard methodological insights from your home departments.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚Ä¶a course on the computational aspects of the underlying methods.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are many important innovations that have made machine learning techniques computationally feasible. We will not discuss these, as there are computer science courses better equipped to cover them. When appropriate, we will discuss whether something &lt;strong&gt;is&lt;/strong&gt; computable, and we will even give rough approximations of the amount of time required (e.g.¬†&lt;strong&gt;P&lt;/strong&gt; vs &lt;strong&gt;NP&lt;/strong&gt;). But we will not discuss how optimizers work or best practices in programming.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚Ä¶a primer on the nitty-gritty of how to use these tools or a way to pad your resume.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The mechanics of implementation, whether it be programming languages or learning to use APIs, will not be covered in any satisfying level of depth. Students will be expected to learn most of the programming skills on their own. Specifically, while there will be some material to remind you of basic &lt;code&gt;R&lt;/code&gt; commands, this is not a good course for people who are simply looking to learn the mechanics of programming. This course is designed to get you to use both traditional analytics and, eventually, machine learning tools. We will do some review of basic programming, and you will have the opportunity to explore topics that interest you through a final project, but ultimately this is a course that largely focuses on the theoretical and practical aspects of statistical learning as applied to social science and &lt;strong&gt;not&lt;/strong&gt; a class on programming.&lt;/p&gt;
&lt;p&gt;Perhaps most importantly, this course is an attempt to push undergraduate education toward the frontiers in social science. Accordingly, please allow some messiness. Some topics may be underdeveloped for a given person‚Äôs passions, but given the wide variety of technical skills and overall interests, this is a near certainty. Both the challenge and opportunity of this area comes from the fact that there is no fully developed, wholly unifying framework. Our collective struggle‚Äîme from teaching, you from learning‚Äîwill ultimately bear fruit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;success-in-this-course&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Success in this Course&lt;/h2&gt;
&lt;p&gt;I &lt;em&gt;promise&lt;/em&gt;, you are equipped to succeed in this course.&lt;/p&gt;
&lt;p&gt;Learning &lt;code&gt;R&lt;/code&gt; can be difficult at first. Like learning a new language‚ÄîSpanish, French, or Chinese‚Äîit takes dedication and perseverance. Hadley Wickham (the chief data scientist at RStudio and the author of some amazing R packages you‚Äôll be using like) &lt;strong&gt;ggplot2&lt;/strong&gt;‚Äî&lt;a href=&#34;https://r-posts.com/advice-to-young-and-old-programmers-a-conversation-with-hadley-wickham/&#34;&gt;made this wise observation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It‚Äôs easy when you start out programming to get really frustrated and think, ‚ÄúOh it‚Äôs me, I‚Äôm really stupid,‚Äù or, ‚ÄúI‚Äôm not made out to program.‚Äù But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It‚Äôs just a natural part of programming. So, it happens to everyone and gets less and less over time. Don‚Äôt blame yourself. Just take a break, do something fun, and then come back and try again later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even experienced programmers (like me) find themselves bashing their heads against seemingly intractable errors.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; If you‚Äôre finding yourself bashing your head against a wall and not making progress, try the following. First, take a break. Sometimes you just need space to see an error. Next, talk to classmates. Finally, if you genuinely cannot see the solution, e-mail the TA. But, honestly, it‚Äôs probably just a typo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/syllabus/hosrt_error_tweet.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/allison_horst/status/1213275783675822080&#34;&gt;&lt;img src=&#34;/img/syllabus/gator_error.jpg&#34; alt=&#34;Alison Horst: Gator error&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;course-materials&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Course materials&lt;/h2&gt;
&lt;p&gt;All of the readings and software in this class are &lt;strong&gt;free&lt;/strong&gt;. There are free online version of all the textbooks and &lt;code&gt;R&lt;/code&gt; / RStudio are free. (Don‚Äôt pay for RStudio.) We will reference outside readings and there exist paper versions of some ‚Äúbooks‚Äù&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; but you won‚Äôt need to buy anything&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;r-and-rstudio&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;R and RStudio&lt;/h3&gt;
&lt;p&gt;You will do all of your analysis with the open source (and free!) programming language &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;&lt;code&gt;R&lt;/code&gt;&lt;/a&gt;. You will use &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; as the main program to access R. &lt;strong&gt;Think of &lt;code&gt;R&lt;/code&gt; as an engine and RStudio as a car dashboard&lt;/strong&gt;‚Äî&lt;code&gt;R&lt;/code&gt; handles all the calculations produces the actual statistics and graphical output, while RStudio provides a nice interface for running &lt;code&gt;R&lt;/code&gt; code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; is free, but it can sometimes be a pain to install and configure. To make life easier, you can (and should!) use the free &lt;a href=&#34;http://rstudio.cloud/&#34;&gt;RStudio.cloud&lt;/a&gt; service, which lets you run a full instance of RStudio in your web browser. This means you won‚Äôt have to install anything on your computer to get started with &lt;code&gt;R&lt;/code&gt;. I recommend this for those who struggle with getting an operational version of &lt;code&gt;R&lt;/code&gt; going on their personal computer. RStudio.cloud will let you quickly copy templates for examples, exercises, and mini projects, and you can share resources amongst classmates.&lt;/p&gt;
&lt;p&gt;RStudio.cloud is convenient, but it can be slow and it is not designed to be able to handle larger datasets or more complicated analysis and graphics. You also can‚Äôt use your own custom fonts with RStudio.cloud. Over the course of the semester, you‚Äôll probably want to get around to installing R, RStudio, and other R packages on your computer and wean yourself off of RStudio.cloud. This isn‚Äôt 100% necessary, but it‚Äôs helpful.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;/resource/install/&#34;&gt;find instructions for installing R, RStudio, and all the tidyverse packages here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;online-help&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Online help&lt;/h3&gt;
&lt;p&gt;Data science and statistical programming can be difficult. Computers are stupid and little errors in your code can cause hours of headache (even if you‚Äôve been doing this stuff for years!).&lt;/p&gt;
&lt;p&gt;Fortunately there are tons of online resources to help you with this. Two of the most important are &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; (a Q&amp;amp;A site with hundreds of thousands of answers to all sorts of programming questions) and &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt; (a forum specifically designed for people using RStudio and the tidyverse (i.e.¬†you)).&lt;/p&gt;
&lt;p&gt;If you use Twitter, post R-related questions and content with &lt;a href=&#34;https://twitter.com/search?q=%23rstats&#34;&gt;#rstats&lt;/a&gt;. The community there is exceptionally generous and helpful.&lt;/p&gt;
&lt;p&gt;Searching for help with R on Google can sometimes be tricky because the program name is, um, a single letter. Google is generally smart enough to figure out what you mean when you search for ‚Äúr scatterplot‚Äù, but if it does struggle, try searching for ‚Äúrstats‚Äù instead (e.g.¬†‚Äúrstats scatterplot‚Äù). Also, since most of your R work will deal with &lt;strong&gt;ggplot2&lt;/strong&gt;, it‚Äôs often easier to just search for that instead of the letter ‚Äúr‚Äù (e.g.¬†‚Äúggplot scatterplot‚Äù).&lt;/p&gt;
&lt;p&gt;Additionally, we have a class chatroom at &lt;a href=&#34;https://gsudatavizm2020.slack.com&#34;&gt;Slack&lt;/a&gt; where anyone in the class can ask questions and anyone can answer. &lt;strong&gt;I will monitor Slack regularly and will respond quickly.&lt;/strong&gt; (It‚Äôs one of the rare Slack workspaces where I actually have notifications enabled!) Ask questions about the readings, exercises, and mini projects. You‚Äôll likely have similar questions as your peers, and you‚Äôll likely be able to answer other peoples‚Äô questions too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluations-and-grades&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluations and Grades&lt;/h2&gt;
&lt;p&gt;Your grade in this course will be based on attendance, labs, and a final project.&lt;/p&gt;
&lt;p&gt;The general breakdown will be 40% for both labs and the final project, and 20% for attendance and participation. The final project requires two ‚Äúmini-projects‚Äù to ensure you‚Äôre making satisfactory progress. Assignment of numeric grades will follow the standard, where ties (e.g., 91.5%) are rounded to favor the student. Evaluations (read: grades) are designed not to deter anyone from taking this course who might otherwise be interested, but will be taken seriously.&lt;/p&gt;
&lt;p&gt;Labs will be short homework assignments that require you to do something practical using a basic statistical language. Support will be provided for the &lt;code&gt;R&lt;/code&gt; language only, although I may present some examples in &lt;code&gt;Python&lt;/code&gt; from time to time. You must have access to computing resources and the ability to program basic statistical analyses.&lt;/p&gt;
&lt;p&gt;As mentioned above, this course will not teach you how to program or how to write code in a specific language. If you are unprepared to do implement basic statistical coding, please take (or retake) PLS202. I highly encourage seeking coding advice from those who instruct computer science courses ‚Äì it‚Äôs their job and they are better at it than I am. I‚Äôll try to provide a good service, but I‚Äôm really not an expert in instruction as it relates to programming.&lt;/p&gt;
&lt;p&gt;As the course progresses, you will be able to find descriptions for all the assignments on the &lt;a href=&#34;/assignment/&#34;&gt;assignments page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Recap:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;centered-table&#34;&gt;
&lt;table style=&#34;width:71%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;44%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Assignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Points&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Percent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;In-Class Mini-Exercises (10 √ó
10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Labs (10 √ó 10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;40%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Mini project 1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Mini project 2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Final project&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Total&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;500&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;‚Äî&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;centered-table&#34;&gt;


&lt;table style=&#34;width:50%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;11%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;col width=&#34;11%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Grade&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Range&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Grade&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;92‚Äì100%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;72‚Äì76%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;87‚Äì91%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;67‚Äì72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;82-87%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;62‚Äì67%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;77‚Äì81%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;bad‚Äì66%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div&gt;

&lt;div id=&#34;academic-honesty&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Academic honesty&lt;/h3&gt;
&lt;p&gt;Violation of &lt;a href=&#34;http://asmsu.msu.edu/home/initiatives/spartan-code-of-honor/&#34;&gt;MSU‚Äôs Spartan Code of Honor&lt;/a&gt; will result in a grade of 0.0 in the course. Moreover, I am required by MSU policy to report suspected cases of academic dishonesty for possible disciplinary action.&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;covid-19&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;COVID-19&lt;/h2&gt;
&lt;p&gt;Things are hard right now. You most likely know people who have lost their jobs, have tested positive for COVID-19, have been hospitalized, or perhaps have even died. You all have increased (or possibly decreased) work responsibilities and increased family care responsibilities. You might be caring for extra people right now, and you are likely facing uncertain job prospects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I‚Äôm fully committed to making sure that you learn everything you were hoping to learn from this class!&lt;/strong&gt; I will make whatever accommodations I can to help you finish your exercises, do well on your projects, and learn and understand the class material. Under ordinary conditions, I am flexible and lenient with grading and course expectations when students face difficult challenges. Under pandemic conditions, that flexibility and leniency is intensified.&lt;/p&gt;
&lt;p&gt;If you feel like you‚Äôre behind or not understanding everything, &lt;strong&gt;do not suffer in silence!&lt;/strong&gt; &lt;em&gt;Please&lt;/em&gt; contact me. I‚Äôm available through &lt;a href=&#34;mailto:bbushong@msu.edu&#34;&gt;e-mail&lt;/a&gt; and &lt;a href=&#34;https://ssc442.slack.com&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;miscellanea&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Miscellanea&lt;/h2&gt;
&lt;p&gt;All class notes will be posted on &lt;a href=&#34;https://msudataanalytics.github.io/SSC442&#34; class=&#34;uri&#34;&gt;https://msudataanalytics.github.io/SSC442&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;office-hours-are-tues-thur-430---545-pm-in-25a-marshall-adams-hall&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Office Hours are Tues &amp;amp; Thur, 4:30 - 5:45 PM in 25A Marshall Adams Hall&lt;/h4&gt;
&lt;p&gt;Please use my office hours. It would be remarkable if you didn‚Äôt need some assistance with the material, and I am here to help. One of the benefits of open office hours is to accommodate many students at once; if fellow students are in my office, please join in and feel very free to show up in groups. Office hours will move around a little bit throughout the semester to attempt to meet the needs of all students.&lt;/p&gt;
&lt;p&gt;In addition to drop-in office hours, I always have sign-up office hours for advising and other purposes. They are online, linked from my web page. As a general rule, please first seek course-related help from the drop-in office hours. However, if my scheduled office hours are always infeasible for you, let me know, and then I may encourage you to make appointments with me. I ask that you schedule your studying so that you are prepared to ask questions during office hours ‚Äì office hours are not a lecture and if you‚Äôre not prepared with questions we will end up awkwardly staring at each other for an hour until you leave.&lt;/p&gt;
&lt;p&gt;Some gentle requests regarding office hours and on contacting me. First, my office hours end sharply at the end, so don‚Äôt arrive 10 minutes before the scheduled end and expect a full session. Please arrive early if you have lengthy questions, or if you don‚Äôt want to risk not having time due to others‚Äô questions. You are free to ask me some stuff by e-mail, (e.g.¬†a typo or something on a handout), but please know e-mail sucks for answering many types of questions. ‚ÄúHow do I do this lab?‚Äù or ‚ÄúWhat‚Äôs up with &lt;code&gt;Python&lt;/code&gt;?‚Äù are short questions with long answers. Come to office hours.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;contacting-me&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Contacting Me&lt;/h3&gt;
&lt;p&gt;Email is a blessing and a curse. Instant communication is wonderful, but often email is the wrong medium to have a productive conversation about course material. Moreover, I get a &lt;strong&gt;lot&lt;/strong&gt; of emails. This means that I am frequently triaging emails into two piles: ‚Äúmy house is burning down‚Äù and ‚Äúeverything else‚Äù. Your email is unlikely to make the former pile. So‚Ä¶ asking questions about course material is always best done in-class or in office hours. Students always roll their eyes when professors say things like that, but it‚Äôs true that if you have a question, it‚Äôs very likely someone else has the same question. (An alternative here would be via Slack but again, in-class is still the best option.)&lt;/p&gt;
&lt;p&gt;That said, email is still useful. If you‚Äôre going to use it, you should at least use if effectively. There‚Äôs a running joke in academia that professors only read an email until they find a question. They then respond to that question and ignore the rest of the email. I won‚Äôt do this, but I do think it is helpful to assume that the person on the receiving end of an email will operate this way. By keeping this in mind, you will write a much more concise and easy to understand email.&lt;/p&gt;
&lt;p&gt;Some general tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use your University supplied email for University business. This helps me know who you are.&lt;/li&gt;
&lt;li&gt;Use a short but informative subject line. For example: &lt;code&gt;[SSC442] Final Project Grading&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;One topic, one email. If you have multiple things to discuss, and you anticipate followup replies, it is best to split them into two emails so that the threads do not get cluttered.&lt;/li&gt;
&lt;li&gt;Ask direct questions. If you‚Äôre asking multiple questions in one email, use a bulleted list.&lt;/li&gt;
&lt;li&gt;Don‚Äôt ask questions that are answered by reading the syllabus! This drives me nuts.&lt;/li&gt;
&lt;li&gt;I‚Äôve also found that students are overly polite in emails. I suppose it may be intimidating to email a professor, and you should try to match the style that the professor prefers, but I view email for a course as a casual form of communication. Said another way: get to the point. Students often send an entire paragraph introducing themselves, but if you use your University email address, and add the course name in the subject, I will already know who you are. Here‚Äôs an example of a perfectly reasonable email:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Subject: [SSC442] Lab, Question 2, Typo&lt;/p&gt;
&lt;p&gt;Hi Prof.¬†Bushong,&lt;/p&gt;
&lt;p&gt;There seems to be a typo in the Lab on Question 2. The problem says to use a column of data that doesn‚Äôt seem to exist. Can you correct this or which should we use?&lt;/p&gt;
&lt;p&gt;Thanks,
Student McStudentFace&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;By the end of the course, you will realize that 1) I make many many many errors; 2) that I frequently cannot remember a command or the correct syntax; and 3) that none of this matters too much in the big picture because I know the broad approaches I‚Äôm trying to take and I know how to Google stuff. Learn from my idiocy.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;wtf is a book?!&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;If you‚Äôve got money to burn, you can buy me Red Bull.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;So just don‚Äôt cheat or plagiarize. This is an easy problem to avoid.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
